import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
import * as $type from "../../../core/util/Type";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var Trix = /** @class */ (function (_super) {
    __extends(Trix, _super);
    function Trix() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indicator series for the signal.
         */
        Object.defineProperty(_this, "signalSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "signalPeriod",
                    name: _this.root.language.translateAny("Signal period"),
                    type: "number"
                }, {
                    key: "signalColor",
                    name: _this.root.language.translateAny("Signal color"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "trix"
        });
        return _this;
    }
    Object.defineProperty(Trix.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                themeTags: ["indicator"],
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "trix",
                fill: undefined
            }));
        }
    });
    Object.defineProperty(Trix.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var chart = this.panel;
            if (chart) {
                var signalSeries = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "signal",
                    xAxis: this.xAxis,
                    yAxis: this.yAxis,
                    groupDataDisabled: true,
                    themeTags: ["indicator", "signal"]
                }));
                this.signalSeries = signalSeries;
            }
        }
    });
    Object.defineProperty(Trix.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("signalPeriod")) {
                this._dataDirty = true;
                this.setCustomData("signalPeriod", this.get("signalPeriod"));
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    Object.defineProperty(Trix.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("signalColor")) {
                this._updateSeriesColor(this.signalSeries, this.get("signalColor"), "signalColor");
            }
            var dataItem = this.series.dataItem;
            if (dataItem) {
                var dataContext = dataItem.dataContext;
                if (dataContext) {
                    dataContext.signalPeriod = this.get("signalPeriod");
                    var signalColor = this.get("signalColor");
                    if (signalColor) {
                        dataContext.signalColor = signalColor.toCSSHex();
                    }
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Trix.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.prepareData.call(this);
            if (this.series) {
                var period = this.get("period", 14);
                var stockSeries = this.get("stockSeries");
                var dataItems = stockSeries.dataItems;
                var data = this._getDataArray(dataItems);
                this._ema(data, period, "value_y", "ema");
                this._ema(data, period, "ema", "ema2");
                this._ema(data, period, "ema2", "ema3");
                var previousDataItem_1;
                var previousValue_1;
                $array.each(data, function (dataItem) {
                    var value = dataItem.ema3;
                    if (previousDataItem_1) {
                        previousValue_1 = previousDataItem_1.ema3;
                    }
                    if ($type.isNumber(value) && $type.isNumber(previousValue_1)) {
                        dataItem.trix = 100 * (value - previousValue_1) / previousValue_1;
                    }
                    previousDataItem_1 = dataItem;
                });
                this.series.data.setAll(data);
                period = this.get("signalPeriod", 9);
                this._sma(data, period, "trix", "signal");
                this.signalSeries.data.setAll(data);
            }
        }
    });
    Object.defineProperty(Trix, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Trix"
    });
    Object.defineProperty(Trix, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([Trix.className])
    });
    return Trix;
}(ChartIndicator));
export { Trix };
//# sourceMappingURL=Trix.js.map