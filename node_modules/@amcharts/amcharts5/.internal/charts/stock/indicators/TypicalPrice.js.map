{"version":3,"file":"TypicalPrice.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/indicators/TypicalPrice.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,cAAc,EAA0E,MAAM,kBAAkB,CAAC;AAC1H,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAExD,OAAO,KAAK,MAAM,MAAM,0BAA0B,CAAC;AAYnD;;;;GAIG;AACH;IAAkC,gCAAc;IAAhD;QAAA,qEA2EC;QA9DA;;;;mBAAwD,CAAC;oBACxD,GAAG,EAAE,QAAQ;oBACb,IAAI,EAAE,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC;oBAC/C,IAAI,EAAE,QAAQ;iBACd,EAAE;oBACF,GAAG,EAAE,aAAa;oBAClB,IAAI,EAAE,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC;oBAC9C,IAAI,EAAE,OAAO;iBACb,CAAC;WAAC;QAEH;;;;mBAA8B,cAAc;WAAC;;IAoD9C,CAAC;;;;;eAlDA;YACC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE;gBACxD,SAAS,EAAE,CAAC,WAAW,CAAC;gBACxB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,QAAQ;gBACrB,WAAW,EAAE,SAAS;gBACtB,IAAI,EAAE,SAAS;aACf,CAAC,CAAC,CAAA;QACJ,CAAC;;IAED;;OAEG;;;;;eACH;YACC,iBAAM,WAAW,WAAE,CAAC;YAEpB,IAAI,IAAI,CAAC,MAAM,EAAE;gBAEhB,IAAI,QAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBACpC,IAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC5C,IAAM,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;gBAExC,IAAI,MAAI,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBAEzC,IAAI,GAAC,GAAG,CAAC,CAAC;gBACV,IAAI,OAAK,GAAG,CAAC,CAAC;gBACd,IAAI,SAAO,GAAG,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,MAAI,EAAE,UAAC,QAAQ;oBAC1B,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;oBAC7B,IAAI,KAAK,IAAI,IAAI,EAAE;wBAClB,GAAC,EAAE,CAAC;wBACJ,SAAO,IAAI,KAAK,GAAG,QAAM,CAAC;wBAE1B,IAAI,GAAC,IAAI,QAAM,EAAE;4BAChB,IAAI,GAAC,GAAG,QAAM,EAAE;gCACf,IAAI,aAAa,GAAG,MAAI,CAAC,OAAK,GAAG,QAAM,CAAC,CAAC,OAAO,CAAC;gCACjD,IAAI,aAAa,IAAI,IAAI,EAAE;oCAC1B,SAAO,IAAI,aAAa,GAAG,QAAM,CAAC;iCAClC;6BACD;4BACD,QAAQ,CAAC,OAAO,GAAG,SAAO,CAAC;yBAC3B;qBACD;oBACD,OAAK,EAAE,CAAC;gBACT,CAAC,CAAC,CAAA;gBAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC;aAC9B;QACF,CAAC;;IAzED;;;;eAAkC,cAAc;OAAC;IACjD;;;;eAA0C,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;OAAC;IAyEtG,mBAAC;CAAA,AA3ED,CAAkC,cAAc,GA2E/C;SA3EY,YAAY","sourcesContent":["import type { IIndicatorEditableSetting } from \"./Indicator\";\r\n\r\nimport { ChartIndicator, IChartIndicatorSettings, IChartIndicatorPrivate, IChartIndicatorEvents } from \"./ChartIndicator\";\r\nimport { LineSeries } from \"../../xy/series/LineSeries\";\r\n\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface ITypicalPriceSettings extends IChartIndicatorSettings {\r\n}\r\n\r\nexport interface ITypicalPricePrivate extends IChartIndicatorPrivate {\r\n}\r\n\r\nexport interface ITypicalPriceEvents extends IChartIndicatorEvents {\r\n}\r\n\r\n\r\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\r\nexport class TypicalPrice extends ChartIndicator {\r\n\tpublic static className: string = \"TypicalPrice\";\r\n\tpublic static classNames: Array<string> = ChartIndicator.classNames.concat([TypicalPrice.className]);\r\n\r\n\tdeclare public _settings: ITypicalPriceSettings;\r\n\tdeclare public _privateSettings: ITypicalPricePrivate;\r\n\tdeclare public _events: ITypicalPriceEvents;\r\n\r\n\t/**\r\n\t * Indicator series.\r\n\t */\r\n\tdeclare public series: LineSeries;\r\n\r\n\tpublic _editableSettings: IIndicatorEditableSetting[] = [{\r\n\t\tkey: \"period\",\r\n\t\tname: this.root.language.translateAny(\"Period\"),\r\n\t\ttype: \"number\"\r\n\t}, {\r\n\t\tkey: \"seriesColor\",\r\n\t\tname: this.root.language.translateAny(\"Color\"),\r\n\t\ttype: \"color\"\r\n\t}];\r\n\r\n\tprotected _themeTag: string = \"typicalprice\";\r\n\r\n\tpublic _createSeries(): LineSeries {\r\n\t\treturn this.panel.series.push(LineSeries.new(this._root, {\r\n\t\t\tthemeTags: [\"indicator\"],\r\n\t\t\txAxis: this.xAxis,\r\n\t\t\tyAxis: this.yAxis,\r\n\t\t\tvalueXField: \"valueX\",\r\n\t\t\tvalueYField: \"typical\",\r\n\t\t\tfill: undefined\r\n\t\t}))\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic prepareData() {\r\n\t\tsuper.prepareData();\r\n\r\n\t\tif (this.series) {\r\n\r\n\t\t\tlet period = this.get(\"period\", 20);\r\n\t\t\tconst stockSeries = this.get(\"stockSeries\");\r\n\t\t\tconst dataItems = stockSeries.dataItems;\r\n\r\n\t\t\tlet data = this._getDataArray(dataItems);\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\tlet index = 0;\r\n\t\t\tlet typical = 0;\r\n\t\t\t$array.each(data, (dataItem) => {\r\n\t\t\t\tlet value = dataItem.value_y;\r\n\t\t\t\tif (value != null) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\ttypical += value / period;\r\n\r\n\t\t\t\t\tif (i >= period) {\r\n\t\t\t\t\t\tif (i > period) {\r\n\t\t\t\t\t\t\tlet valueToRemove = data[index - period].value_y;\r\n\t\t\t\t\t\t\tif (valueToRemove != null) {\r\n\t\t\t\t\t\t\t\ttypical -= valueToRemove / period;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdataItem.typical = typical;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t})\r\n\r\n\t\t\tthis.series.data.setAll(data);\r\n\t\t}\r\n\t}\r\n}"]}