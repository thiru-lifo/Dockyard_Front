import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var TypicalPrice = /** @class */ (function (_super) {
    __extends(TypicalPrice, _super);
    function TypicalPrice() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "typicalprice"
        });
        return _this;
    }
    Object.defineProperty(TypicalPrice.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                themeTags: ["indicator"],
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "typical",
                fill: undefined
            }));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(TypicalPrice.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.prepareData.call(this);
            if (this.series) {
                var period_1 = this.get("period", 20);
                var stockSeries = this.get("stockSeries");
                var dataItems = stockSeries.dataItems;
                var data_1 = this._getDataArray(dataItems);
                var i_1 = 0;
                var index_1 = 0;
                var typical_1 = 0;
                $array.each(data_1, function (dataItem) {
                    var value = dataItem.value_y;
                    if (value != null) {
                        i_1++;
                        typical_1 += value / period_1;
                        if (i_1 >= period_1) {
                            if (i_1 > period_1) {
                                var valueToRemove = data_1[index_1 - period_1].value_y;
                                if (valueToRemove != null) {
                                    typical_1 -= valueToRemove / period_1;
                                }
                            }
                            dataItem.typical = typical_1;
                        }
                    }
                    index_1++;
                });
                this.series.data.setAll(data_1);
            }
        }
    });
    Object.defineProperty(TypicalPrice, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "TypicalPrice"
    });
    Object.defineProperty(TypicalPrice, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([TypicalPrice.className])
    });
    return TypicalPrice;
}(ChartIndicator));
export { TypicalPrice };
//# sourceMappingURL=TypicalPrice.js.map