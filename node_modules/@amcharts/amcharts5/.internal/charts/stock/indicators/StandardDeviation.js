import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var StandardDeviation = /** @class */ (function (_super) {
    __extends(StandardDeviation, _super);
    function StandardDeviation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "standarddeviation"
        });
        return _this;
    }
    Object.defineProperty(StandardDeviation.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                themeTags: ["indicator"],
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "deviation",
                fill: undefined
            }));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(StandardDeviation.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype.prepareData.call(this);
            if (this.series) {
                var period_1 = this.get("period", 20);
                var stockSeries = this.get("stockSeries");
                var dataItems_1 = stockSeries.dataItems;
                var data = this._getDataArray(dataItems_1);
                this._sma(data, period_1, "value_y", "ma");
                var i_1 = 0;
                $array.each(data, function (dataItem) {
                    if (i_1 >= period_1 - 1) {
                        var mean = dataItem.ma;
                        var stdSum = 0;
                        for (var j = i_1 - period_1 + 1; j <= i_1; j++) {
                            var di = dataItems_1[j];
                            var diValue = _this._getValue(di);
                            if (diValue != null) {
                                stdSum += Math.pow(diValue - mean, 2);
                            }
                        }
                        var std = Math.sqrt(stdSum / period_1);
                        dataItem.deviation = std;
                    }
                    i_1++;
                });
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(StandardDeviation, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "StandardDeviation"
    });
    Object.defineProperty(StandardDeviation, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([StandardDeviation.className])
    });
    return StandardDeviation;
}(ChartIndicator));
export { StandardDeviation };
//# sourceMappingURL=StandardDeviation.js.map