import { __extends } from "tslib";
import { Indicator } from "./Indicator";
import { LineSeries } from "../../xy/series/LineSeries";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var ZigZag = /** @class */ (function (_super) {
    __extends(ZigZag, _super);
    function ZigZag() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "deviation",
                    name: _this.root.language.translateAny("Deviation"),
                    type: "number"
                }, {
                    key: "depth",
                    name: _this.root.language.translateAny("Depth"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }]
        });
        return _this;
    }
    Object.defineProperty(ZigZag.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("deviation") || this.isDirty("depth")) {
                this._dataDirty = true;
                this.setCustomData("deviation", this.get("deviation"));
                this.setCustomData("depth", this.get("depth"));
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    Object.defineProperty(ZigZag.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var stockSeries = this.get("stockSeries");
            var chart = stockSeries.chart;
            if (chart) {
                var series = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "time",
                    valueYField: "zigzag",
                    groupDataDisabled: true,
                    calculateAggregates: true,
                    xAxis: stockSeries.get("xAxis"),
                    yAxis: stockSeries.get("yAxis"),
                    themeTags: ["indicator", "zigzag"],
                    name: "ZigZag"
                }));
                series.setPrivate("baseValueSeries", stockSeries);
                this.series = series;
                this._handleLegend(series);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ZigZag.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var deviation = this.get("deviation", 5) / 100;
                var stockSeries = this.get("stockSeries");
                var data = [];
                if (stockSeries) {
                    var dataItems = stockSeries.dataItems;
                    if (dataItems.length > 1) {
                        var firstDataItem = dataItems[0];
                        var goesUp = false;
                        var firstTime = firstDataItem.get("valueX", 0);
                        var firstValue = firstDataItem.get("valueY");
                        var firstHigh = firstDataItem.get("highValueY", firstValue);
                        var firstLow = firstDataItem.get("lowValueY", firstValue);
                        var zigZagTime = void 0;
                        var zigZagValue = void 0;
                        var j = 1;
                        for (var i = 1, len = dataItems.length; i < len; i++) {
                            var dataItem = dataItems[i];
                            var value = dataItem.get("value", 0);
                            var low = dataItem.get("lowValueY", value);
                            var high = dataItem.get("highValueY", value);
                            var time = dataItem.get("valueX", 0);
                            if (low <= Number(firstHigh) * (1 - deviation)) {
                                data.push({ time: firstTime, zigzag: firstHigh });
                                zigZagTime = time;
                                zigZagValue = low;
                                goesUp = true;
                                j = i;
                                break;
                            }
                            else if (high >= Number(firstLow) * (1 + deviation)) {
                                data.push({ time: firstTime, zigzag: firstLow });
                                zigZagTime = time;
                                zigZagValue = high;
                                goesUp = false;
                                j = i;
                                break;
                            }
                        }
                        if (zigZagValue != null) {
                            var depth = this.get("depth", 3);
                            for (var i = j - 1, len = dataItems.length; i < len; i++) {
                                var dataItem = dataItems[i];
                                var value = dataItem.get("value", 0);
                                var low = dataItem.get("lowValueY", value);
                                var high = dataItem.get("highValueY", value);
                                var time = dataItem.get("valueX", 0);
                                if (goesUp) {
                                    if (low <= zigZagValue) {
                                        zigZagValue = low;
                                        zigZagTime = time;
                                    }
                                    else if (high >= zigZagValue * (1 + deviation)) {
                                        var b = Math.max(0, i - depth);
                                        var skip = false;
                                        for (var k = i; k > b; k--) {
                                            if (high < dataItems[k].get("highValueY")) {
                                                skip = true;
                                                break;
                                            }
                                        }
                                        if (!skip) {
                                            data.push({ time: zigZagTime, zigzag: zigZagValue });
                                            zigZagValue = high;
                                            zigZagTime = time;
                                            goesUp = false;
                                        }
                                    }
                                }
                                else {
                                    if (high >= zigZagValue) {
                                        zigZagValue = high;
                                        zigZagTime = time;
                                    }
                                    else if (low <= zigZagValue * (1 - deviation)) {
                                        var b = Math.max(0, i - depth);
                                        var skip = false;
                                        for (var k = i; k > b; k--) {
                                            if (low > dataItems[k].get("lowValueY")) {
                                                skip = true;
                                                break;
                                            }
                                        }
                                        if (!skip) {
                                            data.push({ time: zigZagTime, zigzag: zigZagValue });
                                            zigZagValue = low;
                                            zigZagTime = time;
                                            goesUp = true;
                                        }
                                    }
                                }
                            }
                            var lastDataItem = dataItems[dataItems.length - 1];
                            var lastTime = lastDataItem.get("valueX", 0);
                            var lastValue = lastDataItem.get("valueY");
                            var lastHigh = lastDataItem.get("highValueY", lastValue);
                            var lastLow = lastDataItem.get("lowValueY", lastValue);
                            if (zigZagValue < lastHigh) {
                                data.push({ time: lastTime, zigzag: lastLow });
                            }
                            else {
                                data.push({ time: lastTime, zigzag: lastHigh });
                            }
                        }
                    }
                    this.series.data.setAll(data);
                }
            }
        }
    });
    Object.defineProperty(ZigZag, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ZigZag"
    });
    Object.defineProperty(ZigZag, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Indicator.classNames.concat([ZigZag.className])
    });
    return ZigZag;
}(Indicator));
export { ZigZag };
//# sourceMappingURL=ZigZag.js.map