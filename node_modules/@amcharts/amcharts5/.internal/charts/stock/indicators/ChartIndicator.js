import { __extends } from "tslib";
import { Indicator } from "./Indicator";
import { StockPanel } from "../StockPanel";
import { XYCursor } from "../../xy/XYCursor";
import { DateAxis } from "../../xy/axes/DateAxis";
import { GaplessDateAxis } from "../../xy/axes/GaplessDateAxis";
import { ValueAxis } from "../../xy/axes/ValueAxis";
import { AxisRendererX } from "../../xy/axes/AxisRendererX";
import { AxisRendererY } from "../../xy/axes/AxisRendererY";
import { Tooltip } from "../../../core/render/Tooltip";
import { StockLegend } from "../StockLegend";
/**
 * A base class for chart-based [[StockChart]] indicators.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var ChartIndicator = /** @class */ (function (_super) {
    __extends(ChartIndicator, _super);
    function ChartIndicator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "panel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "xAxis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "yAxis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "cursor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "legend", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(ChartIndicator.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            var stockChart = this.get("stockChart");
            var stockSeries = this.get("stockSeries");
            var seriesChart = stockSeries.chart;
            var root = this._root;
            if (stockChart && seriesChart) {
                // make chart
                var themeTags = ["indicator"];
                if (this._themeTag) {
                    themeTags.push(this._themeTag);
                }
                var chart_1 = stockChart.panels.push(StockPanel.new(root, { wheelY: "zoomX", panX: true, panY: false, themeTags: themeTags }));
                chart_1.addTag("indicator");
                this.panel = chart_1;
                stockChart.panels.events.on("removeIndex", function (e) {
                    if (e.oldValue == chart_1) {
                        stockChart.indicators.removeValue(_this);
                    }
                });
                var seriesXAxis = stockSeries.get("xAxis");
                // xAxis
                var xRenderer = AxisRendererX.new(root, {});
                var xAxis = void 0;
                var baseInterval = seriesXAxis.get("baseInterval");
                var start = seriesXAxis.get("start");
                var end = seriesXAxis.get("end");
                if (seriesXAxis instanceof GaplessDateAxis) {
                    xAxis = chart_1.xAxes.push(GaplessDateAxis.new(root, { renderer: xRenderer, baseInterval: baseInterval }));
                }
                else {
                    xAxis = chart_1.xAxes.push(DateAxis.new(root, { renderer: xRenderer, baseInterval: baseInterval }));
                }
                xAxis.set("groupData", seriesXAxis.get("groupData"));
                xAxis.set("groupCount", seriesXAxis.get("groupCount"));
                xAxis.set("tooltip", Tooltip.new(root, { forceHidden: true }));
                xAxis.setAll({ start: start, end: end });
                this.xAxis = xAxis;
                // yAxis
                var yRenderer = AxisRendererY.new(root, {});
                var yAxis = chart_1.yAxes.push(ValueAxis.new(root, {
                    renderer: yRenderer,
                    tooltip: Tooltip.new(root, { forceHidden: true })
                }));
                this.yAxis = yAxis;
                var series = this._createSeries();
                this.series = series;
                // legend
                var legend = chart_1.topPlotContainer.children.insertIndex(0, StockLegend.new(root, { stockChart: this.get("stockChart") }));
                legend.data.push(series);
                var legendDataItem = legend.dataItems[legend.dataItems.length - 1];
                legendDataItem.set("panel", chart_1);
                legendDataItem.get("marker").set("forceHidden", true);
                var settingsButton = legendDataItem.get("settingsButton");
                settingsButton.setPrivate("customData", this);
                var editableSettings = this._editableSettings;
                if (!editableSettings || editableSettings.length == 0) {
                    settingsButton.set("forceHidden", true);
                }
                chart_1.set("cursor", XYCursor.new(root, { yAxis: yAxis, xAxis: xAxis }));
            }
        }
    });
    Object.defineProperty(ChartIndicator.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            var stockChart = this.get("stockChart");
            stockChart.panels.removeValue(this.panel);
        }
    });
    Object.defineProperty(ChartIndicator, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ChartIndicator"
    });
    Object.defineProperty(ChartIndicator, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Indicator.classNames.concat([ChartIndicator.className])
    });
    return ChartIndicator;
}(Indicator));
export { ChartIndicator };
//# sourceMappingURL=ChartIndicator.js.map