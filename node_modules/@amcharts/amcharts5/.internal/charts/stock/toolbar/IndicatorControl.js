import { __extends } from "tslib";
import { AccumulationDistribution } from "../indicators/AccumulationDistribution";
import { AccumulativeSwingIndex } from "../indicators/AccumulativeSwingIndex";
import { Aroon } from "../indicators/Aroon";
import { AwesomeOscillator } from "../indicators/AwesomeOscillator";
import { BollingerBands } from "../indicators/BollingerBands";
import { ChaikinMoneyFlow } from "../indicators/ChaikinMoneyFlow";
import { ChaikinOscillator } from "../indicators/ChaikinOscillator";
import { CommodityChannelIndex } from "../indicators/CommodityChannelIndex";
import { DisparityIndex } from "../indicators/DisparityIndex";
import { MACD } from "../indicators/MACD";
import { MovingAverage } from "../indicators/MovingAverage";
import { MovingAverageDeviation } from "../indicators/MovingAverageDeviation";
import { MovingAverageEnvelope } from "../indicators/MovingAverageEnvelope";
import { StandardDeviation } from "../indicators/StandardDeviation";
import { TypicalPrice } from "../indicators/TypicalPrice";
import { MedianPrice } from "../indicators/MedianPrice";
import { OnBalanceVolume } from "../indicators/OnBalanceVolume";
import { RelativeStrengthIndex } from "../indicators/RelativeStrengthIndex";
import { StochasticOscillator } from "../indicators/StochasticOscillator";
import { WilliamsR } from "../indicators/WilliamsR";
import { Trix } from "../indicators/Trix";
import { Volume } from "../indicators/Volume";
import { VWAP } from "../indicators/VWAP";
import { ZigZag } from "../indicators/ZigZag";
//import type { IDisposer } from "../../../core/util/Disposer";
import { StockControl } from "./StockControl";
import { DropdownList } from "./DropdownList";
import { StockIcons } from "./StockIcons";
import * as $array from "../../../core/util/Array";
import * as $type from "../../../core/util/Type";
/**
 * A [[StockToolbar]] control for adding indicators to a [[StockChart]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/toolbar/indicator-control/} for more info
 */
var IndicatorControl = /** @class */ (function (_super) {
    __extends(IndicatorControl, _super);
    function IndicatorControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IndicatorControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // Do parent stuff
            _super.prototype._afterNew.call(this);
            // Create list of tools
            var list = DropdownList.new(this._root, {
                control: this,
                parent: this.getPrivate("button")
            });
            this.setPrivate("list", list);
            list.events.on("invoked", function (ev) {
                _this.addIndicator(ev.item.id);
            });
            list.events.on("closed", function (_ev) {
                _this.set("active", false);
            });
            this.on("active", function (active) {
                if (active) {
                    _this.setTimeout(function () { return list.show(); }, 10);
                }
                else {
                    list.hide();
                }
            });
            var button = this.getPrivate("button");
            button.className = button.className + " am5stock-control-dropdown";
            this._initList();
        }
    });
    Object.defineProperty(IndicatorControl.prototype, "_initList", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var list = this.getPrivate("list");
            var indicators = this.get("indicators");
            var items = [];
            $array.each(indicators, function (indicator) {
                if ($type.isObject(indicator)) {
                    items.push({
                        id: indicator.id,
                        label: indicator.name
                    });
                }
                else {
                    items.push({
                        id: indicator,
                        label: _this._root.language.translateAny(indicator)
                    });
                }
            });
            list.set("items", items);
        }
    });
    Object.defineProperty(IndicatorControl.prototype, "_getDefaultIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return StockIcons.getIcon("Indicator");
        }
    });
    Object.defineProperty(IndicatorControl.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("indicators")) {
                this._initList();
            }
        }
    });
    Object.defineProperty(IndicatorControl.prototype, "addIndicator", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (indicatorId) {
            var _this = this;
            var stockChart = this.get("stockChart");
            var indicator;
            var stockSeries = stockChart.get("stockSeries");
            var volumeSeries = stockChart.get("volumeSeries");
            var legend = this.get("legend");
            switch (indicatorId) {
                case "Accumulation Distribution":
                    indicator = AccumulationDistribution.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        volumeSeries: volumeSeries,
                        legend: legend
                    });
                    break;
                case "Accumulative Swing Index":
                    indicator = AccumulativeSwingIndex.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Aroon":
                    indicator = Aroon.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Awesome Oscillator":
                    indicator = AwesomeOscillator.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Bollinger Bands":
                    indicator = BollingerBands.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Chaikin Money Flow":
                    indicator = ChaikinMoneyFlow.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        volumeSeries: volumeSeries,
                        legend: legend
                    });
                    break;
                case "Chaikin Oscillator":
                    indicator = ChaikinOscillator.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        volumeSeries: volumeSeries,
                        legend: legend
                    });
                    break;
                case "Commodity Channel Index":
                    indicator = CommodityChannelIndex.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries
                    });
                    break;
                case "Disparity Index":
                    indicator = DisparityIndex.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries
                    });
                    break;
                case "MACD":
                    indicator = MACD.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Moving Average":
                    indicator = MovingAverage.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Moving Average Deviation":
                    indicator = MovingAverageDeviation.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Moving Average Envelope":
                    indicator = MovingAverageEnvelope.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Standard Deviation":
                    indicator = StandardDeviation.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Trix":
                    indicator = Trix.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Typical Price":
                    indicator = TypicalPrice.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "Median Price":
                    indicator = MedianPrice.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
                case "On Balance Volume":
                    indicator = OnBalanceVolume.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        volumeSeries: volumeSeries,
                        legend: legend
                    });
                    break;
                case "Relative Strength Index":
                    indicator = RelativeStrengthIndex.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries
                    });
                    break;
                case "Stochastic Oscillator":
                    indicator = StochasticOscillator.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries
                    });
                    break;
                case "Williams R":
                    indicator = WilliamsR.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries
                    });
                    break;
                case "Volume":
                    indicator = Volume.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        volumeSeries: volumeSeries
                    });
                    break;
                case "VWAP":
                    indicator = VWAP.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        volumeSeries: volumeSeries,
                        legend: legend
                    });
                    break;
                case "ZigZag":
                    indicator = ZigZag.new(this.root, {
                        stockChart: stockChart,
                        stockSeries: stockSeries,
                        legend: legend
                    });
                    break;
            }
            if (!indicator) {
                // Try searching in the list
                $array.eachContinue(this.get("indicators", []), function (item) {
                    if ($type.isObject(item) && item.id == indicatorId) {
                        indicator = item.callback.call(_this);
                        return false;
                    }
                    return true;
                });
            }
            if (indicator) {
                stockChart.indicators.push(indicator);
                if (indicator._editableSettings.length) {
                    var modal = stockChart.getPrivate("settingsModal");
                    modal.events.once("done", function (ev) {
                        if (indicator) {
                            if (!ev.settings) {
                                indicator.dispose();
                            }
                        }
                    });
                    modal.openIndicator(indicator);
                }
                if (this.events.isEnabled("selected")) {
                    this.events.dispatch("selected", {
                        type: "selected",
                        target: this,
                        indicator: indicator
                    });
                }
            }
        }
    });
    Object.defineProperty(IndicatorControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "IndicatorControl"
    });
    Object.defineProperty(IndicatorControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([IndicatorControl.className])
    });
    return IndicatorControl;
}(StockControl));
export { IndicatorControl };
//# sourceMappingURL=IndicatorControl.js.map