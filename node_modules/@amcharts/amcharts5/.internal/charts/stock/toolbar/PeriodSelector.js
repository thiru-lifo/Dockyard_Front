import { __extends } from "tslib";
import { StockControl } from "./StockControl";
import { MultiDisposer } from "../../../core/util/Disposer";
import * as $utils from "../../../core/util/Utils";
import * as $time from "../../../core/util/Time";
import * as $array from "../../../core/util/Array";
/**
 * A pre-defined period selector control for [[StockToolback]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/toolbar/period-selector/} for more info
 */
var PeriodSelector = /** @class */ (function (_super) {
    __extends(PeriodSelector, _super);
    function PeriodSelector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_groupChangedDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_groupChangedTo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(PeriodSelector.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var button = this.getPrivate("button");
            button.className = button.className + " am5stock-no-hover";
            this._initPeriodButtons();
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_initPeriodButtons", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var container = this.getPrivate("label");
            container.style.display = "";
            var periods = this.get("periods", []);
            $array.each(periods, function (period) {
                var button = document.createElement("a");
                button.innerHTML = period.name || (period.timeUnit.toUpperCase() + period.count || "1");
                button.className = "am5stock-link";
                button.setAttribute("data-period", period.timeUnit + (period.count || ""));
                container.appendChild(button);
                _this._disposers.push($utils.addEventListener(button, "click", function (_ev) {
                    _this.setPrivate("deferReset", false);
                    _this._resetActiveButtons();
                    _this.selectPeriod(period);
                    _this.setPrivate("deferReset", true);
                    $utils.addClass(button, "am5stock-active");
                    var timeout = _this.getPrivate("deferTimeout");
                    if (timeout) {
                        timeout.dispose();
                    }
                    var axis = _this._getAxis();
                    _this.setPrivate("deferTimeout", _this.setTimeout(function () { return _this.setPrivate("deferReset", false); }, axis.get("interpolationDuration", 1000) + 200));
                }));
            });
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_resetActiveButtons", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this.getPrivate("deferReset") !== true) {
                var container = this.getPrivate("label");
                var buttons = container.getElementsByClassName("am5stock-active");
                $array.each(buttons, function (b) {
                    $utils.removeClass(b, "am5stock-active");
                });
                var axis = this.getPrivate("axis");
                if (!axis) {
                    axis = this._getAxis();
                    this.setPrivate("axis", axis);
                    this._disposers.push(new MultiDisposer([
                        axis.on("start", function () { return _this._resetActiveButtons(); }),
                        axis.on("end", function () { return _this._resetActiveButtons(); })
                    ]));
                }
            }
        }
    });
    // protected _getDefaultIcon(): SVGElement {
    // 	return StockIcons.getIcon("Period");
    // }
    Object.defineProperty(PeriodSelector.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            // if (this.isDirty("active")) {
            // 	this._initDropdown();
            // }
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_getChart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.get("stockChart").panels.getIndex(0);
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_getAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._getChart().xAxes.getIndex(0);
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "selectPeriod", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (period) {
            var _this = this;
            this._highlightPeriod(period);
            if (period.timeUnit == "max") {
                this._getChart().zoomOut();
            }
            else {
                var axis_1 = this._getAxis();
                var end_1 = new Date(axis_1.getPrivate("max"));
                var start_1;
                if (period.timeUnit == "ytd") {
                    start_1 = new Date(end_1.getFullYear(), 0, 1, 0, 0, 0, 0);
                    end_1 = new Date(axis_1.getIntervalMax(axis_1.get("baseInterval")));
                    if (axis_1.get("groupData")) {
                        axis_1.zoomToDates(start_1, end_1, 0);
                        setTimeout(function () {
                            axis_1.zoomToDates(start_1, end_1, 0);
                        }, 10);
                        return;
                    }
                }
                else {
                    // some adjustments in case data is grouped
                    if (axis_1.get("groupData")) {
                        // find interval which will be used after zoom
                        var interval = axis_1.getGroupInterval($time.getDuration(period.timeUnit, period.count));
                        if (interval) {
                            // find max of the base interval
                            var endTime = axis_1.getIntervalMax(axis_1.get("baseInterval"));
                            if (endTime != null) {
                                // round to the future interval
                                end_1 = $time.round(new Date(endTime), interval.timeUnit, interval.count);
                                end_1.setTime(end_1.getTime() + $time.getDuration(interval.timeUnit, interval.count * 1.05));
                                end_1 = $time.round(end_1, interval.timeUnit, interval.count);
                            }
                            start_1 = $time.add(new Date(end_1), period.timeUnit, (period.count || 1) * -1);
                            if (this._groupChangedDp) {
                                this._groupChangedDp.dispose();
                                this._groupChangedDp = undefined;
                            }
                            if (this._groupChangedTo) {
                                this._groupChangedTo.dispose();
                            }
                            this._groupChangedDp = axis_1.events.once("groupintervalchanged", function () {
                                axis_1.zoomToDates(start_1, end_1, 0);
                            });
                            axis_1.zoomToDates(start_1, end_1, 0);
                            this._groupChangedTo = this.setTimeout(function () {
                                if (_this._groupChangedDp) {
                                    _this._groupChangedDp.dispose();
                                }
                                _this._groupChangedTo = undefined;
                            }, 500);
                            return;
                        }
                    }
                    start_1 = $time.add(new Date(end_1), period.timeUnit, (period.count || 1) * -1);
                }
                axis_1.zoomToDates(start_1, end_1);
            }
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_highlightPeriod", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (period) {
            var id = period.timeUnit + (period.count || "");
            var container = this.getPrivate("label");
            var buttons = container.getElementsByTagName("a");
            for (var i = 0; i < buttons.length; i++) {
                var button = buttons[i];
                if (button.getAttribute("data-period") == id) {
                    $utils.addClass(button, "am5stock-active");
                }
                else {
                    $utils.removeClass(button, "am5stock-active");
                }
            }
        }
    });
    Object.defineProperty(PeriodSelector, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "PeriodSelector"
    });
    Object.defineProperty(PeriodSelector, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([PeriodSelector.className])
    });
    return PeriodSelector;
}(StockControl));
export { PeriodSelector };
//# sourceMappingURL=PeriodSelector.js.map