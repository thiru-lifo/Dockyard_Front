import { __extends } from "tslib";
import { Pattern } from "./Pattern";
/**
 * Picture pattern.
 *
 * @since 5.2.15
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
 */
var PicturePattern = /** @class */ (function (_super) {
    __extends(PicturePattern, _super);
    function PicturePattern() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(PicturePattern.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            this._clear = true;
            if (this.isDirty("src")) {
                this._load();
            }
        }
    });
    Object.defineProperty(PicturePattern.prototype, "_draw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._draw.call(this);
            var image = this._image;
            if (image) {
                var patternWidth = this.get("width", 100);
                var patternHeight = this.get("height", 100);
                // Fit
                var fit = this.get("fit", "image");
                var width = 0;
                var height = 0;
                if (fit == "pattern") {
                    width = patternWidth;
                    height = patternHeight;
                }
                else {
                    width = image.width;
                    height = image.height;
                    if (fit == "image") {
                        this.set("width", width);
                        this.set("height", height);
                    }
                }
                // Position
                var centered = this.get("centered", true);
                var x = 0;
                var y = 0;
                if (centered) {
                    x = patternWidth / 2 - width / 2;
                    y = patternHeight / 2 - height / 2;
                }
                this._display.image(image, width, height, x, y);
            }
        }
    });
    Object.defineProperty(PicturePattern.prototype, "_load", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var src = this.get("src");
            if (src) {
                var image_1 = new Image();
                //image.crossOrigin = "Anonymous";
                image_1.src = src;
                image_1.decode().then(function () {
                    _this._image = image_1;
                    _this._draw();
                    if (_this.events.isEnabled("loaded")) {
                        _this.events.dispatch("loaded", { type: "loaded", target: _this });
                    }
                }).catch(function (_error) {
                    // TODO: maybe raise error?
                });
            }
        }
    });
    Object.defineProperty(PicturePattern, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "PicturePattern"
    });
    Object.defineProperty(PicturePattern, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Pattern.classNames.concat([PicturePattern.className])
    });
    return PicturePattern;
}(Pattern));
export { PicturePattern };
//# sourceMappingURL=PicturePattern.js.map