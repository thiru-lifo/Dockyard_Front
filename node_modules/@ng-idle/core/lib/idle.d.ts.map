{"version":3,"file":"idle.d.ts","sources":["idle.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { IdleExpiry } from './idleexpiry';\nimport { Interrupt } from './interrupt';\nimport { InterruptSource } from './interruptsource';\nimport { KeepaliveSvc } from './keepalivesvc';\nexport declare enum AutoResume {\n    disabled = 0,\n    idle = 1,\n    notIdle = 2\n}\n/**\n * A service for detecting and responding to user idleness.\n */\nexport declare class Idle implements OnDestroy {\n    private expiry;\n    private zone;\n    private platformId?;\n    private idle;\n    private timeoutVal;\n    private autoResume;\n    private interrupts;\n    private running;\n    private idling;\n    private idleHandle;\n    private timeoutHandle;\n    private countdown;\n    private keepaliveEnabled;\n    private keepaliveSvc;\n    onIdleStart: EventEmitter<any>;\n    onIdleEnd: EventEmitter<any>;\n    onTimeoutWarning: EventEmitter<number>;\n    onTimeout: EventEmitter<number>;\n    onInterrupt: EventEmitter<any>;\n    [key: string]: any;\n    constructor(expiry: IdleExpiry, zone: NgZone, keepaliveSvc?: KeepaliveSvc, platformId?: Object);\n    setIdleName(key: string): void;\n    getKeepaliveEnabled(): boolean;\n    setKeepaliveEnabled(value: boolean): boolean;\n    getTimeout(): number;\n    setTimeout(seconds: number | boolean): number;\n    getIdle(): number;\n    setIdle(seconds: number): number;\n    getAutoResume(): AutoResume;\n    setAutoResume(value: AutoResume): AutoResume;\n    setInterrupts(sources: Array<InterruptSource>): Array<Interrupt>;\n    getInterrupts(): Array<Interrupt>;\n    clearInterrupts(): void;\n    isRunning(): boolean;\n    isIdling(): boolean;\n    watch(skipExpiry?: boolean): void;\n    setIdleIntervalOutsideOfZone(watchFn: () => void, frequency: number): void;\n    stop(): void;\n    timeout(): void;\n    interrupt(force?: boolean, eventArgs?: any): void;\n    private setIdling;\n    private toggleState;\n    private setTimoutIntervalOutsideZone;\n    private toggleInterrupts;\n    private getExpiryDiff;\n    private doCountdownInZone;\n    private doCountdown;\n    private safeClearInterval;\n    private startKeepalive;\n    private stopKeepalive;\n    ngOnDestroy(): void;\n}\n"]}