/*
 * A class for managing an interrupt from an interrupt source.
 */
export class Interrupt {
    constructor(source, options) {
        this.source = source;
        if (source.initialize) {
            source.initialize(options);
        }
    }
    /*
     * Subscribes to the interrupt using the specified function.
     * @param fn - The subscription function.
     */
    subscribe(fn) {
        this.sub = this.source.onInterrupt.subscribe(fn);
    }
    /*
     * Unsubscribes the interrupt.
     */
    unsubscribe() {
        this.sub.unsubscribe();
        this.sub = null;
    }
    /*
     * Keeps the subscription but resumes interrupt events.
     */
    resume() {
        this.source.attach();
    }
    /*
     * Keeps the subscription but pauses interrupt events.
     */
    pause() {
        this.source.detach();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJydXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2ludGVycnVwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTs7R0FFRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBR3BCLFlBQW1CLE1BQXVCLEVBQUUsT0FBMEI7UUFBbkQsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDeEMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUyxDQUFDLEVBQWlDO1FBQ3pDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJbnRlcnJ1cHRBcmdzIH0gZnJvbSAnLi9pbnRlcnJ1cHRhcmdzJztcbmltcG9ydCB7IEludGVycnVwdE9wdGlvbnMgfSBmcm9tICcuL2ludGVycnVwdG9wdGlvbnMnO1xuaW1wb3J0IHsgSW50ZXJydXB0U291cmNlIH0gZnJvbSAnLi9pbnRlcnJ1cHRzb3VyY2UnO1xuXG4vKlxuICogQSBjbGFzcyBmb3IgbWFuYWdpbmcgYW4gaW50ZXJydXB0IGZyb20gYW4gaW50ZXJydXB0IHNvdXJjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVycnVwdCB7XG4gIHByaXZhdGUgc3ViOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHVibGljIHNvdXJjZTogSW50ZXJydXB0U291cmNlLCBvcHRpb25zPzogSW50ZXJydXB0T3B0aW9ucykge1xuICAgIGlmIChzb3VyY2UuaW5pdGlhbGl6ZSkge1xuICAgICAgc291cmNlLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogU3Vic2NyaWJlcyB0byB0aGUgaW50ZXJydXB0IHVzaW5nIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBmbiAtIFRoZSBzdWJzY3JpcHRpb24gZnVuY3Rpb24uXG4gICAqL1xuICBzdWJzY3JpYmUoZm46IChhcmdzOiBJbnRlcnJ1cHRBcmdzKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5zdWIgPSB0aGlzLnNvdXJjZS5vbkludGVycnVwdC5zdWJzY3JpYmUoZm4pO1xuICB9XG5cbiAgLypcbiAgICogVW5zdWJzY3JpYmVzIHRoZSBpbnRlcnJ1cHQuXG4gICAqL1xuICB1bnN1YnNjcmliZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuc3ViID0gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqIEtlZXBzIHRoZSBzdWJzY3JpcHRpb24gYnV0IHJlc3VtZXMgaW50ZXJydXB0IGV2ZW50cy5cbiAgICovXG4gIHJlc3VtZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNvdXJjZS5hdHRhY2goKTtcbiAgfVxuXG4gIC8qXG4gICAqIEtlZXBzIHRoZSBzdWJzY3JpcHRpb24gYnV0IHBhdXNlcyBpbnRlcnJ1cHQgZXZlbnRzLlxuICAgKi9cbiAgcGF1c2UoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VyY2UuZGV0YWNoKCk7XG4gIH1cbn1cbiJdfQ==