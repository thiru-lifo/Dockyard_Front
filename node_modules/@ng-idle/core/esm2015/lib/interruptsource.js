import { EventEmitter } from '@angular/core';
/*
 * A base for classes that act as a source for interrupts.
 */
export class InterruptSource {
    constructor(attachFn, detachFn) {
        this.attachFn = attachFn;
        this.detachFn = detachFn;
        this.isAttached = false;
        this.onInterrupt = new EventEmitter();
    }
    /*
     * Attaches to the specified events on the specified source.
     */
    attach() {
        // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone
        // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode
        // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)
        if (Zone.current.get('isAngularZone') === true) {
            Zone.current.parent.run(() => this.attach());
            return;
        }
        if (!this.isAttached && this.attachFn) {
            this.attachFn(this);
        }
        this.isAttached = true;
    }
    /*
     * Detaches from the specified events on the specified source.
     */
    detach() {
        if (this.isAttached && this.detachFn) {
            this.detachFn(this);
        }
        this.isAttached = false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJydXB0c291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2ludGVycnVwdHNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzdDOztHQUVHO0FBQ0gsTUFBTSxPQUFnQixlQUFlO0lBT25DLFlBQ1ksUUFBNEMsRUFDNUMsUUFBNEM7UUFENUMsYUFBUSxHQUFSLFFBQVEsQ0FBb0M7UUFDNUMsYUFBUSxHQUFSLFFBQVEsQ0FBb0M7UUFSeEQsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVaLGdCQUFXLEdBQWdDLElBQUksWUFBWSxFQUUvRCxDQUFDO0lBS0QsQ0FBQztJQUVKOztPQUVHO0lBQ0gsTUFBTTtRQUNKLHlHQUF5RztRQUN6Ryx3R0FBd0c7UUFDeEcsZ0hBQWdIO1FBQ2hILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUM3QyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQjtRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7Q0FHRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnRlcnJ1cHRBcmdzIH0gZnJvbSAnLi9pbnRlcnJ1cHRhcmdzJztcbmltcG9ydCB7IEludGVycnVwdE9wdGlvbnMgfSBmcm9tICcuL2ludGVycnVwdG9wdGlvbnMnO1xuXG5kZWNsYXJlIGNvbnN0IFpvbmU6IGFueTtcblxuLypcbiAqIEEgYmFzZSBmb3IgY2xhc3NlcyB0aGF0IGFjdCBhcyBhIHNvdXJjZSBmb3IgaW50ZXJydXB0cy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEludGVycnVwdFNvdXJjZSB7XG4gIGlzQXR0YWNoZWQgPSBmYWxzZTtcblxuICBwdWJsaWMgb25JbnRlcnJ1cHQ6IEV2ZW50RW1pdHRlcjxJbnRlcnJ1cHRBcmdzPiA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgSW50ZXJydXB0QXJnc1xuICA+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGF0dGFjaEZuPzogKHNvdXJjZTogSW50ZXJydXB0U291cmNlKSA9PiB2b2lkLFxuICAgIHByb3RlY3RlZCBkZXRhY2hGbj86IChzb3VyY2U6IEludGVycnVwdFNvdXJjZSkgPT4gdm9pZFxuICApIHt9XG5cbiAgLypcbiAgICogQXR0YWNoZXMgdG8gdGhlIHNwZWNpZmllZCBldmVudHMgb24gdGhlIHNwZWNpZmllZCBzb3VyY2UuXG4gICAqL1xuICBhdHRhY2goKTogdm9pZCB7XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgem9uZSBpcyB0aGUgJ2FuZ3VsYXInIHpvbmUgKGEuay5hLiBOZ1pvbmUpIHRoZW4gcmUtZW50ZXIgdGhpcyBtZXRob2QgaW4gaXRzIHBhcmVudCB6b25lXG4gICAgLy8gVGhlIHBhcmVudCB6b25lIGlzIHVzdWFsbHkgdGhlICc8cm9vdD4nIHpvbmUgYnV0IGl0IGNhbiBhbHNvIGJlICdsb25nLXN0YWNrLXRyYWNlLXpvbmUnIGluIGRlYnVnIG1vZGVcbiAgICAvLyBJbiB0ZXN0cywgdGhlIGN1cnJlbnQgem9uZSBpcyB0eXBpY2FsbHkgYSAnUHJveHlab25lJyBjcmVhdGVkIGJ5IGFzeW5jL2Zha2VBc3luYyAoZnJvbSBAYW5ndWxhci9jb3JlL3Rlc3RpbmcpXG4gICAgaWYgKFpvbmUuY3VycmVudC5nZXQoJ2lzQW5ndWxhclpvbmUnKSA9PT0gdHJ1ZSkge1xuICAgICAgWm9uZS5jdXJyZW50LnBhcmVudC5ydW4oKCkgPT4gdGhpcy5hdHRhY2goKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzQXR0YWNoZWQgJiYgdGhpcy5hdHRhY2hGbikge1xuICAgICAgdGhpcy5hdHRhY2hGbih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQXR0YWNoZWQgPSB0cnVlO1xuICB9XG5cbiAgLypcbiAgICogRGV0YWNoZXMgZnJvbSB0aGUgc3BlY2lmaWVkIGV2ZW50cyBvbiB0aGUgc3BlY2lmaWVkIHNvdXJjZS5cbiAgICovXG4gIGRldGFjaCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0F0dGFjaGVkICYmIHRoaXMuZGV0YWNoRm4pIHtcbiAgICAgIHRoaXMuZGV0YWNoRm4odGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0F0dGFjaGVkID0gZmFsc2U7XG4gIH1cblxuICBpbml0aWFsaXplPyhvcHRpb25zPzogSW50ZXJydXB0T3B0aW9ucyk6IHZvaWQ7XG59XG4iXX0=