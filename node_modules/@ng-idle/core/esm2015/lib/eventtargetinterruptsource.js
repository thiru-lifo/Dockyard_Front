import { isPlatformServer } from '@angular/common';
import { Subscription, fromEvent, merge } from 'rxjs';
import { filter, throttleTime } from 'rxjs/operators';
import { InterruptArgs } from './interruptargs';
import { InterruptSource } from './interruptsource';
const defaultThrottleDelay = 500;
/*
 * An interrupt source on an EventTarget object, such as a Window or HTMLElement.
 */
export class EventTargetInterruptSource extends InterruptSource {
    constructor(target, events, opts) {
        super(null, null);
        this.target = target;
        this.events = events;
        this.opts = opts;
        this.eventSubscription = new Subscription();
        if (typeof this.opts === 'number') {
            this.opts = { throttleDelay: this.opts, passive: false };
        }
        this.opts = this.opts || {
            passive: false,
            throttleDelay: defaultThrottleDelay
        };
        if (this.opts.throttleDelay === undefined || this.opts.throttleDelay === null) {
            this.opts.throttleDelay = defaultThrottleDelay;
        }
        this.throttleDelay = this.opts.throttleDelay;
        this.passive = !!this.opts.passive;
    }
    initialize(options) {
        if ((options === null || options === void 0 ? void 0 : options.platformId) && isPlatformServer(options.platformId)) {
            return;
        }
        const eventTarget = typeof this.target === 'function' ? this.target() : this.target;
        const opts = this.passive ? { passive: true } : null;
        const fromEvents = this.events
            .split(' ')
            .map(eventName => fromEvent(eventTarget, eventName, opts));
        this.eventSrc = merge(...fromEvents);
        this.eventSrc = this.eventSrc.pipe(filter(innerArgs => !this.filterEvent(innerArgs)));
        if (this.throttleDelay > 0) {
            this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));
        }
        const handler = (innerArgs) => this.onInterrupt.emit(new InterruptArgs(this, innerArgs));
        this.attachFn = () => (this.eventSubscription = this.eventSrc.subscribe(handler));
        this.detachFn = () => this.eventSubscription.unsubscribe();
    }
    /*
     * Checks to see if the event should be filtered. Always returns false unless overriden.
     * @param event - The original event object.
     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
     */
    filterEvent(event) {
        return false;
    }
    /**
     * Returns the current options being used.
     * @return The current option values.
     */
    get options() {
        return {
            passive: this.passive,
            throttleDelay: this.throttleDelay
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnR0YXJnZXRpbnRlcnJ1cHRzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvZXZlbnR0YXJnZXRpbnRlcnJ1cHRzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFjLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQWtCcEQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUM7QUFFakM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsZUFBZTtJQU03RCxZQUNZLE1BQW1ELEVBQ25ELE1BQWMsRUFDaEIsSUFBMkM7UUFFbkQsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUpSLFdBQU0sR0FBTixNQUFNLENBQTZDO1FBQ25ELFdBQU0sR0FBTixNQUFNLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBdUM7UUFQN0Msc0JBQWlCLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFXM0QsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDMUQ7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUk7WUFDdkIsT0FBTyxFQUFFLEtBQUs7WUFDZCxhQUFhLEVBQUUsb0JBQW9CO1NBQ3BDLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDN0UsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsb0JBQW9CLENBQUM7U0FDaEQ7UUFFRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxVQUFVLENBQUMsT0FBMEI7UUFDbkMsSUFBSSxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxVQUFVLEtBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQy9ELE9BQU87U0FDUjtRQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3JELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNO2FBQzNCLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQ2xELENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxTQUFjLEVBQUUsRUFBRSxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUNuQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdELENBQUM7SUFFRDs7OztPQUlHO0lBQ08sV0FBVyxDQUFDLEtBQVU7UUFDOUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxPQUFPO1FBQ1QsT0FBTztZQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDbEMsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRocm90dGxlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgRXZlbnRUYXJnZXQgfSBmcm9tICcuL2V2ZW50dGFyZ2V0JztcbmltcG9ydCB7IEludGVycnVwdEFyZ3MgfSBmcm9tICcuL2ludGVycnVwdGFyZ3MnO1xuaW1wb3J0IHsgSW50ZXJydXB0T3B0aW9ucyB9IGZyb20gJy4vaW50ZXJydXB0b3B0aW9ucyc7XG5pbXBvcnQgeyBJbnRlcnJ1cHRTb3VyY2UgfSBmcm9tICcuL2ludGVycnVwdHNvdXJjZSc7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgRXZlbnRUYXJnZXRJbnRlcnJ1cHRTb3VyY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmVudFRhcmdldEludGVycnVwdE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgdGhlIGV2ZW50cyBjb21pbmcgZnJvbSB0aGUgdGFyZ2V0LlxuICAgKi9cbiAgdGhyb3R0bGVEZWxheT86IG51bWJlcjtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gdXNlIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLlxuICAgKiBOb3RlOiB5b3UgbmVlZCB0byBkZXRlY3QgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgcGFzc2l2ZSBsaXN0ZW5lcnMsIGFuZCBvbmx5IHNldCB0aGlzIHRvIHRydWUgaWYgaXQgZG9lcy5cbiAgICovXG4gIHBhc3NpdmU/OiBib29sZWFuO1xufVxuXG5jb25zdCBkZWZhdWx0VGhyb3R0bGVEZWxheSA9IDUwMDtcblxuLypcbiAqIEFuIGludGVycnVwdCBzb3VyY2Ugb24gYW4gRXZlbnRUYXJnZXQgb2JqZWN0LCBzdWNoIGFzIGEgV2luZG93IG9yIEhUTUxFbGVtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRUYXJnZXRJbnRlcnJ1cHRTb3VyY2UgZXh0ZW5kcyBJbnRlcnJ1cHRTb3VyY2Uge1xuICBwcml2YXRlIGV2ZW50U3JjOiBPYnNlcnZhYmxlPGFueT47XG4gIHByaXZhdGUgZXZlbnRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgcHJvdGVjdGVkIHRocm90dGxlRGVsYXk6IG51bWJlcjtcbiAgcHJvdGVjdGVkIHBhc3NpdmU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRhcmdldDogRXZlbnRUYXJnZXQ8YW55PiB8ICgoKSA9PiBFdmVudFRhcmdldDxhbnk+KSxcbiAgICBwcm90ZWN0ZWQgZXZlbnRzOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBvcHRzPzogbnVtYmVyIHwgRXZlbnRUYXJnZXRJbnRlcnJ1cHRPcHRpb25zXG4gICkge1xuICAgIHN1cGVyKG51bGwsIG51bGwpO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm9wdHMgPSB7IHRocm90dGxlRGVsYXk6IHRoaXMub3B0cywgcGFzc2l2ZTogZmFsc2UgfTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdHMgPSB0aGlzLm9wdHMgfHwge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICB0aHJvdHRsZURlbGF5OiBkZWZhdWx0VGhyb3R0bGVEZWxheVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRzLnRocm90dGxlRGVsYXkgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9wdHMudGhyb3R0bGVEZWxheSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5vcHRzLnRocm90dGxlRGVsYXkgPSBkZWZhdWx0VGhyb3R0bGVEZWxheTtcbiAgICB9XG5cbiAgICB0aGlzLnRocm90dGxlRGVsYXkgPSB0aGlzLm9wdHMudGhyb3R0bGVEZWxheTtcbiAgICB0aGlzLnBhc3NpdmUgPSAhIXRoaXMub3B0cy5wYXNzaXZlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZShvcHRpb25zPzogSW50ZXJydXB0T3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zPy5wbGF0Zm9ybUlkICYmIGlzUGxhdGZvcm1TZXJ2ZXIob3B0aW9ucy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50VGFyZ2V0ID0gdHlwZW9mIHRoaXMudGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gdGhpcy50YXJnZXQoKSA6IHRoaXMudGFyZ2V0O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLnBhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IG51bGw7XG4gICAgY29uc3QgZnJvbUV2ZW50cyA9IHRoaXMuZXZlbnRzXG4gICAgICAuc3BsaXQoJyAnKVxuICAgICAgLm1hcChldmVudE5hbWUgPT4gZnJvbUV2ZW50KGV2ZW50VGFyZ2V0LCBldmVudE5hbWUsIG9wdHMpKTtcbiAgICB0aGlzLmV2ZW50U3JjID0gbWVyZ2UoLi4uZnJvbUV2ZW50cyk7XG4gICAgdGhpcy5ldmVudFNyYyA9IHRoaXMuZXZlbnRTcmMucGlwZShcbiAgICAgIGZpbHRlcihpbm5lckFyZ3MgPT4gIXRoaXMuZmlsdGVyRXZlbnQoaW5uZXJBcmdzKSlcbiAgICApO1xuICAgIGlmICh0aGlzLnRocm90dGxlRGVsYXkgPiAwKSB7XG4gICAgICB0aGlzLmV2ZW50U3JjID0gdGhpcy5ldmVudFNyYy5waXBlKHRocm90dGxlVGltZSh0aGlzLnRocm90dGxlRGVsYXkpKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyID0gKGlubmVyQXJnczogYW55KSA9PlxuICAgICAgdGhpcy5vbkludGVycnVwdC5lbWl0KG5ldyBJbnRlcnJ1cHRBcmdzKHRoaXMsIGlubmVyQXJncykpO1xuXG4gICAgdGhpcy5hdHRhY2hGbiA9ICgpID0+XG4gICAgICAodGhpcy5ldmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZXZlbnRTcmMuc3Vic2NyaWJlKGhhbmRsZXIpKTtcblxuICAgIHRoaXMuZGV0YWNoRm4gPSAoKSA9PiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKlxuICAgKiBDaGVja3MgdG8gc2VlIGlmIHRoZSBldmVudCBzaG91bGQgYmUgZmlsdGVyZWQuIEFsd2F5cyByZXR1cm5zIGZhbHNlIHVubGVzcyBvdmVycmlkZW4uXG4gICAqIEBwYXJhbSBldmVudCAtIFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuXG4gICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZXZlbnQgc2hvdWxkIGJlIGZpbHRlcmVkIChkb24ndCBjYXVzZSBhbiBpbnRlcnJ1cHQpOyBvdGhlcndpc2UsIGZhbHNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGZpbHRlckV2ZW50KGV2ZW50OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBvcHRpb25zIGJlaW5nIHVzZWQuXG4gICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgb3B0aW9uIHZhbHVlcy5cbiAgICovXG4gIGdldCBvcHRpb25zKCk6IEV2ZW50VGFyZ2V0SW50ZXJydXB0T3B0aW9ucyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3NpdmU6IHRoaXMucGFzc2l2ZSxcbiAgICAgIHRocm90dGxlRGVsYXk6IHRoaXMudGhyb3R0bGVEZWxheVxuICAgIH07XG4gIH1cbn1cbiJdfQ==