{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\n/**\r\n * Picture pattern.\r\n *\r\n * @since 5.2.15\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar PicturePattern =\n/** @class */\nfunction (_super) {\n  __extends(PicturePattern, _super);\n\n  function PicturePattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_image\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(PicturePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      this._clear = true;\n\n      if (this.isDirty(\"src\")) {\n        this._load();\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n\n      var image = this._image;\n\n      if (image) {\n        var patternWidth = this.get(\"width\", 100);\n        var patternHeight = this.get(\"height\", 100); // Fit\n\n        var fit = this.get(\"fit\", \"image\");\n        var width = 0;\n        var height = 0;\n\n        if (fit == \"pattern\") {\n          width = patternWidth;\n          height = patternHeight;\n        } else {\n          width = image.width;\n          height = image.height;\n\n          if (fit == \"image\") {\n            this.set(\"width\", width);\n            this.set(\"height\", height);\n          }\n        } // Position\n\n\n        var centered = this.get(\"centered\", true);\n        var x = 0;\n        var y = 0;\n\n        if (centered) {\n          x = patternWidth / 2 - width / 2;\n          y = patternHeight / 2 - height / 2;\n        }\n\n        this._display.image(image, width, height, x, y);\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern.prototype, \"_load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var src = this.get(\"src\");\n\n      if (src) {\n        var image_1 = new Image(); //image.crossOrigin = \"Anonymous\";\n\n        image_1.src = src;\n        image_1.decode().then(function () {\n          _this._image = image_1;\n\n          _this._draw();\n\n          if (_this.events.isEnabled(\"loaded\")) {\n            _this.events.dispatch(\"loaded\", {\n              type: \"loaded\",\n              target: _this\n            });\n          }\n        }).catch(function (_error) {// TODO: maybe raise error?\n        });\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PicturePattern\"\n  });\n  Object.defineProperty(PicturePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([PicturePattern.className])\n  });\n  return PicturePattern;\n}(Pattern);\n\nexport { PicturePattern }; //# sourceMappingURL=PicturePattern.js.map","map":null,"metadata":{},"sourceType":"module"}