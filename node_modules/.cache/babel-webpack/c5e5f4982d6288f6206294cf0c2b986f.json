{"ast":null,"code":"/*!\n* metismenujs - v1.3.1\n* MetisMenu: Collapsible menu plugin with Vanilla-JS\n* https://github.com/onokumus/metismenujs#readme\n*\n* Made by Osman Nuri Okumus <onokumus@gmail.com> (https://github.com/onokumus)\n* Under MIT License\n*/\n!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : (t = \"undefined\" != typeof globalThis ? globalThis : t || self).MetisMenu = e();\n}(this, function () {\n  \"use strict\";\n\n  const t = {\n    parentTrigger: \"li\",\n    subMenu: \"ul\",\n    toggle: !0,\n    triggerElement: \"a\"\n  },\n        e = {\n    ACTIVE: \"mm-active\",\n    COLLAPSE: \"mm-collapse\",\n    COLLAPSED: \"mm-collapsed\",\n    COLLAPSING: \"mm-collapsing\",\n    METIS: \"metismenu\",\n    SHOW: \"mm-show\"\n  };\n\n  class s {\n    constructor(e, i) {\n      this.element = s.isElement(e) ? e : document.querySelector(e), this.config = Object.assign(Object.assign({}, t), i), this.disposed = !1, this.triggerArr = [], this.init();\n    }\n\n    static attach(t, e) {\n      return new s(t, e);\n    }\n\n    init() {\n      const {\n        METIS: t,\n        ACTIVE: s,\n        COLLAPSE: i\n      } = e;\n      this.element.classList.add(t), [].slice.call(this.element.querySelectorAll(this.config.subMenu)).forEach(t => {\n        t.classList.add(i);\n        const e = t.closest(this.config.parentTrigger);\n        (null == e ? void 0 : e.classList.contains(s)) ? this.show(t) : this.hide(t);\n        const n = null == e ? void 0 : e.querySelector(this.config.triggerElement);\n        \"true\" !== (null == n ? void 0 : n.getAttribute(\"aria-disabled\")) && (null == n || n.setAttribute(\"aria-expanded\", \"false\"), null == n || n.addEventListener(\"click\", this.clickEvent.bind(this)), this.triggerArr.push(n));\n      });\n    }\n\n    clickEvent(t) {\n      if (!this.disposed) {\n        const e = null == t ? void 0 : t.currentTarget;\n        e && \"A\" === e.tagName && t.preventDefault();\n        const s = e.closest(this.config.parentTrigger),\n              i = null == s ? void 0 : s.querySelector(this.config.subMenu);\n        this.toggle(i);\n      }\n    }\n\n    update() {\n      this.disposed = !1, this.init();\n    }\n\n    dispose() {\n      this.triggerArr.forEach(t => {\n        t.removeEventListener(\"click\", this.clickEvent.bind(this));\n      }), this.disposed = !0;\n    }\n\n    on(t, e, s) {\n      return this.element.addEventListener(t, e, s), this;\n    }\n\n    off(t, e, s) {\n      return this.element.removeEventListener(t, e, s), this;\n    }\n\n    emit(t, e, s = !1) {\n      const i = new CustomEvent(t, {\n        bubbles: s,\n        detail: e\n      });\n      this.element.dispatchEvent(i);\n    }\n\n    toggle(t) {\n      const s = t.closest(this.config.parentTrigger);\n      (null == s ? void 0 : s.classList.contains(e.ACTIVE)) ? this.hide(t) : this.show(t);\n    }\n\n    show(t) {\n      var s;\n      const i = t,\n            {\n        ACTIVE: n,\n        COLLAPSE: l,\n        COLLAPSED: o,\n        COLLAPSING: r,\n        SHOW: c\n      } = e;\n      if (this.isTransitioning || i.classList.contains(r)) return;\n\n      const a = () => {\n        i.classList.remove(r), i.style.height = \"\", i.removeEventListener(\"transitionend\", a), this.setTransitioning(!1), this.emit(\"shown.metisMenu\", {\n          shownElement: i\n        });\n      },\n            h = i.closest(this.config.parentTrigger);\n\n      null == h || h.classList.add(n);\n      const d = null == h ? void 0 : h.querySelector(this.config.triggerElement);\n      null == d || d.setAttribute(\"aria-expanded\", \"true\"), null == d || d.classList.remove(o), i.style.height = \"0px\", i.classList.remove(l), i.classList.remove(c), i.classList.add(r);\n      const g = [].slice.call(null === (s = null == h ? void 0 : h.parentNode) || void 0 === s ? void 0 : s.children).filter(t => t !== h);\n      this.config.toggle && g.length > 0 && g.forEach(t => {\n        const e = t.querySelector(this.config.subMenu);\n        e && this.hide(e);\n      }), this.setTransitioning(!0), i.classList.add(l), i.classList.add(c), i.style.height = `${i.scrollHeight}px`, this.emit(\"show.metisMenu\", {\n        showElement: i\n      }), i.addEventListener(\"transitionend\", a);\n    }\n\n    hide(t) {\n      const {\n        ACTIVE: s,\n        COLLAPSE: i,\n        COLLAPSED: n,\n        COLLAPSING: l,\n        SHOW: o\n      } = e,\n            r = t;\n      if (this.isTransitioning || !r.classList.contains(o)) return;\n      this.emit(\"hide.metisMenu\", {\n        hideElement: r\n      });\n      const c = r.closest(this.config.parentTrigger);\n      null == c || c.classList.remove(s);\n\n      const a = () => {\n        r.classList.remove(l), r.classList.add(i), r.style.height = \"\", r.removeEventListener(\"transitionend\", a), this.setTransitioning(!1), this.emit(\"hidden.metisMenu\", {\n          hiddenElement: r\n        });\n      };\n\n      r.style.height = `${r.getBoundingClientRect().height}px`, r.style.height = `${r.offsetHeight}px`, r.classList.add(l), r.classList.remove(i), r.classList.remove(o), this.setTransitioning(!0), r.addEventListener(\"transitionend\", a), r.style.height = \"0px\";\n      const h = null == c ? void 0 : c.querySelector(this.config.triggerElement);\n      null == h || h.setAttribute(\"aria-expanded\", \"false\"), null == h || h.classList.add(n);\n    }\n\n    setTransitioning(t) {\n      this.isTransitioning = t;\n    }\n\n    static isElement(t) {\n      return Boolean(t.classList);\n    }\n\n  }\n\n  return s;\n}); //# sourceMappingURL=metismenujs.min.js.map","map":null,"metadata":{},"sourceType":"script"}