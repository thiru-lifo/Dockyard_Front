{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Text } from \"./Text\";\nimport * as $math from \"../util/Math\";\n/**\r\n * @ignore\r\n */\n\nvar RadialText =\n/** @class */\nfunction (_super) {\n  __extends(RadialText, _super);\n\n  function RadialText() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeRadialText(\"\", _this.textStyle)\n    });\n    return _this;\n  }\n\n  Object.defineProperty(RadialText.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(RadialText.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      this._display.clear();\n\n      if (this.isDirty(\"textType\")) {\n        this._display.textType = this.get(\"textType\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"radius\")) {\n        this._display.radius = this.get(\"radius\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"startAngle\")) {\n        this._display.startAngle = (this.get(\"startAngle\", 0) + 90) * $math.RADIANS;\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"inside\")) {\n        this._display.inside = this.get(\"inside\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"orientation\")) {\n        this._display.orientation = this.get(\"orientation\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"kerning\")) {\n        this._display.kerning = this.get(\"kerning\");\n        this.markDirtyBounds();\n      }\n    }\n  });\n  Object.defineProperty(RadialText, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialText\"\n  });\n  Object.defineProperty(RadialText, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Text.classNames.concat([RadialText.className])\n  });\n  return RadialText;\n}(Text);\n\nexport { RadialText }; //# sourceMappingURL=RadialText.js.map","map":null,"metadata":{},"sourceType":"module"}