{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n * @ignore\r\n */\n\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\n\n\nvar List =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * List values.\r\n     */\n\n\n    Object.defineProperty(this, \"_values\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._values = initial;\n  }\n\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n\n  Object.defineProperty(List.prototype, \"contains\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return this._values.indexOf(value) !== -1;\n    }\n  });\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n\n  Object.defineProperty(List.prototype, \"removeValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var i = 0;\n      var length = this._values.length;\n\n      while (i < length) {\n        // TODO handle NaN\n        if (this._values[i] === value) {\n          this.removeIndex(i);\n          --length;\n        } else {\n          ++i;\n        }\n      }\n    }\n  });\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n\n  Object.defineProperty(List.prototype, \"indexOf\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return $array.indexOf(this._values, value);\n    }\n  });\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n\n  Object.defineProperty(List.prototype, \"hasIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return index >= 0 && index < this._values.length;\n    }\n  });\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n\n  Object.defineProperty(List.prototype, \"getIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._values[index];\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onPush\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newValue) {\n      if (this.events.isEnabled(\"push\")) {\n        this.events.dispatch(\"push\", {\n          type: \"push\",\n          target: this,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onInsertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, newValue) {\n      if (this.events.isEnabled(\"insertIndex\")) {\n        this.events.dispatch(\"insertIndex\", {\n          type: \"insertIndex\",\n          target: this,\n          index: index,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatch(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatch(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onMoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldIndex, newIndex, value) {\n      if (this.events.isEnabled(\"moveIndex\")) {\n        this.events.dispatch(\"moveIndex\", {\n          type: \"moveIndex\",\n          target: this,\n          oldIndex: oldIndex,\n          newIndex: newIndex,\n          value: value\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.events.isEnabled(\"clear\")) {\n        this.events.dispatch(\"clear\", {\n          type: \"clear\",\n          target: this,\n          oldValues: oldValues\n        });\n      }\n    }\n  });\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n\n  Object.defineProperty(List.prototype, \"setIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same\n\n      if (oldValue !== value) {\n        this._values[index] = value;\n\n        this._onSetIndex(index, oldValue, value);\n      }\n\n      return oldValue;\n    }\n  });\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"insertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length + 1);\n      $array.insertIndex(this._values, index, value);\n\n      this._onInsertIndex(index, value);\n\n      return value;\n    }\n  });\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n\n  Object.defineProperty(List.prototype, \"swap\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (a, b) {\n      var len = this._values.length;\n      checkBounds(a, len);\n      checkBounds(b, len);\n\n      if (a !== b) {\n        var value_a = this._values[a];\n        var value_b = this._values[b];\n        this._values[a] = value_b;\n\n        this._onSetIndex(a, value_a, value_b);\n\n        this._values[b] = value_a;\n\n        this._onSetIndex(b, value_b, value_a);\n      }\n    }\n  });\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n\n  Object.defineProperty(List.prototype, \"removeIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      this._onRemoveIndex(index, oldValue);\n\n      return oldValue;\n    }\n  });\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n\n  Object.defineProperty(List.prototype, \"moveValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, toIndex) {\n      // TODO don't do anything if the desired index is the same as the current index\n      var index = this.indexOf(value); // TODO remove all old values rather than only the first ?\n\n      if (index !== -1) {\n        $array.removeIndex(this._values, index);\n\n        if (toIndex == null) {\n          var toIndex_1 = this._values.length;\n\n          this._values.push(value);\n\n          this._onMoveIndex(index, toIndex_1, value);\n        } else {\n          $array.insertIndex(this._values, toIndex, value);\n\n          this._onMoveIndex(index, toIndex, value);\n        }\n      } else if (toIndex == null) {\n        this._values.push(value);\n\n        this._onPush(value);\n      } else {\n        $array.insertIndex(this._values, toIndex, value);\n\n        this._onInsertIndex(toIndex, value);\n      }\n\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"push\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this._values.push(value);\n\n      this._onPush(value);\n\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"unshift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this.insertIndex(0, value);\n      return value;\n    }\n  });\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"pushAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (values) {\n      var _this = this;\n\n      $array.each(values, function (value) {\n        _this.push(value);\n      });\n    }\n  });\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n\n  Object.defineProperty(List.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source) {\n      this.pushAll(source._values);\n    }\n  });\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n  Object.defineProperty(List.prototype, \"pop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var index = this._values.length - 1;\n      return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n    }\n  });\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n  Object.defineProperty(List.prototype, \"shift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._values.length ? this.removeIndex(0) : undefined;\n    }\n  });\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n  Object.defineProperty(List.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newArray) {\n      var _this = this;\n\n      var old = this._values;\n      this._values = [];\n\n      this._onClear(old);\n\n      $array.each(newArray, function (value) {\n        _this._values.push(value);\n\n        _this._onPush(value);\n      });\n    }\n  });\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n  Object.defineProperty(List.prototype, \"clear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.setAll([]);\n    }\n  });\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n  Object.defineProperty(List.prototype, Symbol.iterator, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var length, i;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            length = this._values.length;\n            i = 0;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < length)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._values[i]];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            ++i;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    }\n  });\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n  Object.defineProperty(List.prototype, \"each\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $array.each(this._values, f);\n    }\n  });\n  /**\r\n   * Calls `f` for each element in the list, from right to left.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n  Object.defineProperty(List.prototype, \"eachReverse\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $array.eachReverse(this._values, f);\n    }\n  });\n  return List;\n}();\n\nexport { List };\n/**\r\n * A version of a [[List]] where the elements are disposed automatically when\r\n * removed from the list, unless `autoDispose` is set to `false`.\r\n */\n\nvar ListAutoDispose =\n/** @class */\nfunction (_super) {\n  __extends(ListAutoDispose, _super);\n\n  function ListAutoDispose() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Automatically disposes elements that are removed from the list.\r\n     *\r\n     * @default true\r\n     */\n\n\n    Object.defineProperty(_this, \"autoDispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ListAutoDispose.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n\n      _super.prototype._onSetIndex.call(this, index, oldValue, newValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n\n      _super.prototype._onRemoveIndex.call(this, index, oldValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.autoDispose) {\n        $array.each(oldValues, function (x) {\n          x.dispose();\n        });\n      }\n\n      _super.prototype._onClear.call(this, oldValues);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        if (this.autoDispose) {\n          $array.each(this._values, function (x) {\n            x.dispose();\n          });\n        }\n      }\n    }\n  });\n  return ListAutoDispose;\n}(List);\n\nexport { ListAutoDispose };\n/**\r\n * A version of a [[List]] that is able to create new elements as well as\r\n * apply additional settings to newly created items.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\r\n */\n\nvar ListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(ListTemplate, _super);\n\n  function ListTemplate(template, make) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperty(_this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"make\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this.template = template;\n    _this.make = make;\n    return _this;\n  }\n\n  return ListTemplate;\n}(ListAutoDispose);\n\nexport { ListTemplate }; //# sourceMappingURL=List.js.map","map":null,"metadata":{},"sourceType":"module"}