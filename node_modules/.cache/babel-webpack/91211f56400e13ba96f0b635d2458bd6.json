{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Children } from \"../util/Children\";\nimport { Percent } from \"../util/Percent\";\nimport { Sprite } from \"./Sprite\";\nimport { Rectangle } from \"./Rectangle\";\nimport { HorizontalLayout } from \"./HorizontalLayout\";\nimport { VerticalLayout } from \"./VerticalLayout\";\nimport { GridLayout } from \"./GridLayout\";\nimport { populateString } from \"../util/PopulateString\";\nimport * as $array from \"../util/Array\";\nimport * as $type from \"../util/Type\";\nimport * as $utils from \"../util/Utils\";\n/**\r\n * A basic element that can have child elements, maintain their layout, and\r\n * have a background.\r\n *\r\n * It can have any [[Sprite]] element as a child, from very basic shapes, to\r\n * full-fledged charts.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n * @important\r\n */\n\nvar Container =\n/** @class */\nfunction (_super) {\n  __extends(Container, _super);\n\n  function Container() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeContainer()\n    });\n    Object.defineProperty(_this, \"_childrenDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeContainer()\n    });\n    /**\r\n     * List of Container's child elements.\r\n     */\n\n    Object.defineProperty(_this, \"children\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Children(_this)\n    });\n    Object.defineProperty(_this, \"_percentageSizeChildren\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_percentagePositionChildren\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_prevWidth\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_prevHeight\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_contentWidth\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_contentHeight\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_contentMask\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_vsbd0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_vsbd1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Container.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n\n      this._display.addChild(this._childrenDisplay);\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      $array.eachReverse(this.allChildren(), function (child) {\n        child.dispose();\n      });\n\n      if (this.getPrivate(\"htmlElement\")) {\n        this._root._removeHTMLContent(this);\n      }\n\n      _super.prototype._dispose.call(this);\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"interactiveChildren\")) {\n        this._display.interactiveChildren = this.get(\"interactiveChildren\", false);\n      }\n\n      if (this.isDirty(\"layout\")) {\n        this._prevWidth = 0;\n        this._prevHeight = 0;\n        this.markDirtyBounds();\n\n        if (this._prevSettings.layout) {\n          this.children.each(function (child) {\n            child.removePrivate(\"x\");\n            child.removePrivate(\"y\");\n          });\n        }\n      }\n\n      if (this.isDirty(\"paddingTop\") || this.isDirty(\"paddingBottom\") || this.isDirty(\"paddingLeft\") || this.isDirty(\"paddingRight\")) {\n        this.children.each(function (child) {\n          child.markDirtyPosition();\n        });\n      }\n\n      if (this.isDirty(\"maskContent\")) {\n        var childrenDisplay = this._childrenDisplay;\n        var contentMask = this._contentMask;\n\n        if (this.get(\"maskContent\")) {\n          if (!contentMask) {\n            contentMask = Rectangle.new(this._root, {\n              width: this.width() + .5,\n              height: this.height() + .5\n            });\n            this._contentMask = contentMask;\n            childrenDisplay.addChildAt(contentMask._display, 0);\n            childrenDisplay.mask = contentMask._display;\n          }\n        } else {\n          if (contentMask) {\n            childrenDisplay.removeChild(contentMask._display);\n            childrenDisplay.mask = null;\n            contentMask.dispose();\n            this._contentMask = undefined;\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateSize.call(this);\n\n      $array.each(this._percentageSizeChildren, function (child) {\n        child._updateSize();\n      });\n      $array.each(this._percentagePositionChildren, function (child) {\n        child.markDirtyPosition();\n\n        child._updateSize();\n      });\n      this.updateBackground();\n    }\n  });\n  Object.defineProperty(Container.prototype, \"updateBackground\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var background = this.get(\"background\");\n      var bounds = this._localBounds;\n\n      if (bounds && !this.isHidden()) {\n        var x = bounds.left;\n        var y = bounds.top;\n        var w = bounds.right - x;\n        var h = bounds.bottom - y;\n        var maxWidth = this.get(\"maxWidth\");\n        var maxHeight = this.get(\"maxHeight\");\n\n        if (maxHeight) {\n          if (h > maxHeight) {\n            h = maxHeight;\n          }\n        }\n\n        if (maxWidth) {\n          if (w > maxWidth) {\n            w = maxWidth;\n          }\n        }\n\n        var width = this.width();\n        var height = this.height();\n\n        if (background) {\n          background.setAll({\n            width: w,\n            height: h,\n            x: x,\n            y: y\n          });\n\n          if (this._display.interactive) {\n            background._display.interactive = true;\n          }\n        }\n\n        var contentMask = this._contentMask;\n\n        if (contentMask) {\n          contentMask.setAll({\n            width: width + .5,\n            height: height + .5\n          });\n        }\n\n        var verticalScrollbar = this.get(\"verticalScrollbar\");\n\n        if (verticalScrollbar) {\n          verticalScrollbar.set(\"height\", height);\n          verticalScrollbar.set(\"x\", width - verticalScrollbar.width() - verticalScrollbar.get(\"marginRight\", 0));\n          verticalScrollbar.set(\"end\", verticalScrollbar.get(\"start\", 0) + height / this._contentHeight);\n          var bg = verticalScrollbar.get(\"background\");\n\n          if (bg) {\n            bg.setAll({\n              width: verticalScrollbar.width(),\n              height: height\n            });\n          }\n\n          var visible = true;\n\n          if (this._contentHeight <= height) {\n            visible = false;\n          }\n\n          verticalScrollbar.setPrivate(\"visible\", visible);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_applyThemes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (_super.prototype._applyThemes.call(this)) {\n        this.eachChildren(function (child) {\n          child._applyThemes();\n        });\n        return true;\n      } else {\n        return false;\n      }\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_applyState\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      _super.prototype._applyState.call(this, name);\n\n      if (this.get(\"setStateOnChildren\")) {\n        this.eachChildren(function (child) {\n          child.states.apply(name);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_applyStateAnimated\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name, duration) {\n      _super.prototype._applyStateAnimated.call(this, name, duration);\n\n      if (this.get(\"setStateOnChildren\")) {\n        this.eachChildren(function (child) {\n          child.states.applyAnimate(name, duration);\n        });\n      }\n    }\n  });\n  /**\r\n   * Returns container's inner width (width without padding) in pixels.\r\n   *\r\n   * @return Inner width (px)\r\n   */\n\n  Object.defineProperty(Container.prototype, \"innerWidth\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.width() - this.get(\"paddingRight\", 0) - this.get(\"paddingLeft\", 0);\n    }\n  });\n  /**\r\n   * Returns container's inner height (height without padding) in pixels.\r\n   *\r\n   * @return Inner height (px)\r\n   */\n\n  Object.defineProperty(Container.prototype, \"innerHeight\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.height() - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0);\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_getBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var width = this.get(\"width\");\n      var height = this.get(\"height\");\n      var pWidth = this.getPrivate(\"width\");\n      var pHeight = this.getPrivate(\"height\");\n      var bounds = {\n        left: 0,\n        top: 0,\n        right: this.width(),\n        bottom: this.height()\n      };\n      var layout = this.get(\"layout\");\n      var horizontal = false;\n      var vertical = false;\n\n      if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {\n        horizontal = true;\n      }\n\n      if (layout instanceof VerticalLayout) {\n        vertical = true;\n      }\n\n      if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get(\"verticalScrollbar\")) {// void\n      } else {\n        var m = Number.MAX_VALUE;\n        var l_1 = m;\n        var r_1 = -m;\n        var t_1 = m;\n        var b_1 = -m;\n        var paddingLeft = this.get(\"paddingLeft\", 0);\n        var paddingTop = this.get(\"paddingTop\", 0);\n        var paddingRight = this.get(\"paddingRight\", 0);\n        var paddingBottom = this.get(\"paddingBottom\", 0);\n        this.children.each(function (child) {\n          if (child.get(\"position\") != \"absolute\" && child.get(\"isMeasured\")) {\n            var childBounds = child.adjustedLocalBounds();\n            var childX = child.x();\n            var childY = child.y();\n            var cl = childX + childBounds.left;\n            var cr = childX + childBounds.right;\n            var ct = childY + childBounds.top;\n            var cb = childY + childBounds.bottom;\n\n            if (horizontal) {\n              cl -= child.get(\"marginLeft\", 0);\n              cr += child.get(\"marginRight\", 0);\n            }\n\n            if (vertical) {\n              ct -= child.get(\"marginTop\", 0);\n              cb += child.get(\"marginBottom\", 0);\n            }\n\n            if (cl < l_1) {\n              l_1 = cl;\n            }\n\n            if (cr > r_1) {\n              r_1 = cr;\n            }\n\n            if (ct < t_1) {\n              t_1 = ct;\n            }\n\n            if (cb > b_1) {\n              b_1 = cb;\n            }\n          }\n        });\n\n        if (l_1 == m) {\n          l_1 = 0;\n        }\n\n        if (r_1 == -m) {\n          r_1 = 0;\n        }\n\n        if (t_1 == m) {\n          t_1 = 0;\n        }\n\n        if (b_1 == -m) {\n          b_1 = 0;\n        }\n\n        bounds.left = l_1 - paddingLeft;\n        bounds.top = t_1 - paddingTop;\n        bounds.right = r_1 + paddingRight;\n        bounds.bottom = b_1 + paddingBottom;\n      }\n\n      this._contentWidth = bounds.right - bounds.left;\n      this._contentHeight = bounds.bottom - bounds.top;\n\n      if ($type.isNumber(width)) {\n        bounds.left = 0;\n        bounds.right = width;\n      }\n\n      if ($type.isNumber(pWidth)) {\n        bounds.left = 0;\n        bounds.right = pWidth;\n      }\n\n      if ($type.isNumber(height)) {\n        bounds.top = 0;\n        bounds.bottom = height;\n      }\n\n      if ($type.isNumber(pHeight)) {\n        bounds.top = 0;\n        bounds.bottom = pHeight;\n      }\n\n      this._localBounds = bounds;\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_updateBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var layout = this.get(\"layout\");\n\n      if (layout) {\n        layout.updateContainer(this);\n      }\n\n      _super.prototype._updateBounds.call(this);\n\n      this.updateBackground();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Container.prototype, \"markDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype.markDirty.call(this);\n\n      this._root._addDirtyParent(this);\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var innerWidth = this.innerWidth();\n      var innerHeight = this.innerHeight();\n\n      if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {\n        var layout = this.get(\"layout\");\n        var horizontal_1 = false;\n        var vertical_1 = false;\n\n        if (layout) {\n          if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {\n            horizontal_1 = true;\n          }\n\n          if (layout instanceof VerticalLayout) {\n            vertical_1 = true;\n          }\n        }\n\n        $array.each(this._percentageSizeChildren, function (child) {\n          if (!horizontal_1) {\n            var width = child.get(\"width\");\n\n            if (width instanceof Percent) {\n              child.setPrivate(\"width\", width.value * innerWidth);\n            }\n          }\n\n          if (!vertical_1) {\n            var height = child.get(\"height\");\n\n            if (height instanceof Percent) {\n              child.setPrivate(\"height\", height.value * innerHeight);\n            }\n          }\n        });\n        $array.each(this._percentagePositionChildren, function (child) {\n          child.markDirtyPosition();\n          child.markDirtyBounds();\n        });\n        this._prevWidth = innerWidth;\n        this._prevHeight = innerHeight;\n        this._sizeDirty = true;\n        this.updateBackground();\n      }\n\n      this._handleStates();\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      if (this.isDirty(\"html\")) {\n        var html = this.get(\"html\");\n\n        if (html && html !== \"\") {\n          this._root._setHTMLContent(this, populateString(this, this.get(\"html\", \"\")));\n        } else {\n          this._root._removeHTMLContent(this);\n        }\n\n        this._root._positionHTMLElement(this);\n      }\n\n      if (this.isDirty(\"verticalScrollbar\")) {\n        var verticalScrollbar_1 = this.get(\"verticalScrollbar\");\n\n        if (verticalScrollbar_1) {\n          verticalScrollbar_1._setParent(this);\n\n          verticalScrollbar_1.children.removeValue(verticalScrollbar_1.startGrip);\n          verticalScrollbar_1.children.removeValue(verticalScrollbar_1.endGrip);\n          this.set(\"maskContent\", true);\n          this.set(\"paddingRight\", verticalScrollbar_1.width() + verticalScrollbar_1.get(\"marginRight\", 0) + verticalScrollbar_1.get(\"marginLeft\", 0));\n          var background = this.get(\"background\");\n\n          if (!background) {\n            background = this.set(\"background\", Rectangle.new(this._root, {\n              themeTags: [\"background\"],\n              fillOpacity: 0,\n              fill: this._root.interfaceColors.get(\"alternativeBackground\")\n            }));\n          }\n\n          this._vsbd0 = this.events.on(\"wheel\", function (event) {\n            var wheelEvent = event.originalEvent; // Ignore wheel event if it is happening on a non-chart element, e.g. if\n            // some page element is over the chart.\n\n            if ($utils.isLocalEvent(wheelEvent, _this)) {\n              wheelEvent.preventDefault();\n            } else {\n              return;\n            }\n\n            var shiftY = wheelEvent.deltaY / 5000;\n            var start = verticalScrollbar_1.get(\"start\", 0);\n            var end = verticalScrollbar_1.get(\"end\", 1);\n\n            if (start + shiftY > 0 && end + shiftY < 1) {\n              verticalScrollbar_1.set(\"start\", start + shiftY);\n              verticalScrollbar_1.set(\"end\", end + shiftY);\n            }\n          });\n\n          this._disposers.push(this._vsbd0);\n\n          this._vsbd1 = verticalScrollbar_1.events.on(\"rangechanged\", function () {\n            var h = _this._contentHeight;\n            var childrenDisplay = _this._childrenDisplay;\n            var contentMask = _this._contentMask;\n            childrenDisplay.y = -verticalScrollbar_1.get(\"start\") * h;\n            childrenDisplay.markDirtyLayer();\n\n            if (contentMask) {\n              contentMask._display.y = -childrenDisplay.y;\n              childrenDisplay.mask = contentMask._display;\n            }\n          });\n\n          this._disposers.push(this._vsbd1);\n\n          this._display.addChild(verticalScrollbar_1._display);\n        } else {\n          var previous = this._prevSettings.verticalScrollbar;\n\n          if (previous) {\n            this._display.removeChild(previous._display);\n\n            if (this._vsbd0) {\n              this._vsbd0.dispose();\n            }\n\n            if (this._vsbd1) {\n              this._vsbd1.dispose();\n            }\n\n            var childrenDisplay = this._childrenDisplay;\n            childrenDisplay.y = 0;\n            this.setPrivate(\"height\", undefined);\n            this.set(\"maskContent\", false);\n            this.set(\"paddingRight\", undefined);\n          }\n        }\n      }\n\n      if (this.isDirty(\"background\")) {\n        // TODO maybe this should dispose ?\n        var previous = this._prevSettings[\"background\"];\n\n        if (previous) {\n          this._display.removeChild(previous._display);\n        }\n\n        var background = this.get(\"background\");\n\n        if (background instanceof Sprite) {\n          background.set(\"isMeasured\", false);\n\n          background._setParent(this);\n\n          this._display.addChildAt(background._display, 0);\n        }\n      }\n\n      if (this.isDirty(\"mask\")) {\n        var mask = this.get(\"mask\");\n        var previous = this._prevSettings[\"mask\"];\n\n        if (previous) {\n          this._display.removeChild(previous._display);\n\n          if (previous != mask) {\n            previous.dispose();\n          }\n        }\n\n        if (mask) {\n          var parent = mask.parent;\n\n          if (parent) {\n            parent.children.removeValue(mask);\n          }\n\n          mask._setParent(this);\n\n          this._display.addChildAt(mask._display, 0);\n\n          this._childrenDisplay.mask = mask._display;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_processTemplateField\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._processTemplateField.call(this);\n\n      this.children.each(function (child) {\n        child._processTemplateField();\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Container.prototype, \"walkChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      this.children.each(function (child) {\n        if (child instanceof Container) {\n          child.walkChildren(f);\n        }\n\n        f(child);\n      });\n    }\n  });\n  Object.defineProperty(Container.prototype, \"eachChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      var background = this.get(\"background\");\n\n      if (background) {\n        f(background);\n      }\n\n      var verticalScrollbar = this.get(\"verticalScrollbar\");\n\n      if (verticalScrollbar) {\n        f(verticalScrollbar);\n      }\n\n      var mask = this.get(\"mask\");\n\n      if (mask) {\n        f(mask);\n      }\n\n      this.children.values.forEach(function (child) {\n        f(child);\n      });\n    }\n  });\n  Object.defineProperty(Container.prototype, \"allChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var output = [];\n      this.eachChildren(function (x) {\n        output.push(x);\n      });\n      return output;\n    }\n  });\n  Object.defineProperty(Container.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var updated = dataItem !== this._dataItem;\n\n      _super.prototype._setDataItem.call(this, dataItem);\n\n      var html = this.get(\"html\", \"\");\n\n      if (html && html !== \"\" && updated) {\n        this._root._setHTMLContent(this, populateString(this, html));\n      }\n    }\n  });\n  Object.defineProperty(Container, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Container\"\n  });\n  Object.defineProperty(Container, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Container.className])\n  });\n  return Container;\n}(Sprite);\n\nexport { Container }; //# sourceMappingURL=Container.js.map","map":null,"metadata":{},"sourceType":"module"}