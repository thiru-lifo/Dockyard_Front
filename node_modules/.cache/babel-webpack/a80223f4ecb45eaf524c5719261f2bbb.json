{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Container } from \"../../core/render/Container\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Grid } from \"./axes/Grid\"; //import { Animations } from \"../core/util/Animation\";\n\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\n/**\r\n * Creates a chart cursor for an [[XYChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info\r\n * @important\r\n */\n\nvar XYCursor =\n/** @class */\nfunction (_super) {\n  __extends(XYCursor, _super);\n\n  function XYCursor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A [[Grid]] elment that used for horizontal line of the cursor crosshair.\r\n     *\r\n     * @default Grid.new()\r\n     */\n\n\n    Object.defineProperty(_this, \"lineX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Grid.new(_this._root, {\n        themeTags: [\"x\"]\n      }))\n    });\n    /**\r\n     * A [[Grid]] elment that used for horizontal line of the cursor crosshair.\r\n     *\r\n     * @default Grid.new()\r\n     */\n\n    Object.defineProperty(_this, \"lineY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Grid.new(_this._root, {\n        themeTags: [\"y\"]\n      }))\n    });\n    /**\r\n     * An element that represents current selection.\r\n     *\r\n     * @default Graphics.new()\r\n     */\n\n    Object.defineProperty(_this, \"selection\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Graphics.new(_this._root, {\n        themeTags: [\"selection\", \"cursor\"],\n        layer: 30\n      }))\n    });\n    Object.defineProperty(_this, \"_movePoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_lastPoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    Object.defineProperty(_this, \"_tooltipX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_tooltipY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A chart cursor is attached to.\r\n     */\n\n    Object.defineProperty(_this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_toX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_toY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(XYCursor.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"xy\", \"cursor\"]);\n\n      _super.prototype._afterNew.call(this);\n\n      this.setAll({\n        \"width\": p100,\n        height: p100,\n        isMeasured: true,\n        position: \"absolute\"\n      });\n      this.states.create(\"hidden\", {\n        visible: true,\n        opacity: 0\n      });\n\n      this._drawLines();\n\n      this.setPrivateRaw(\"visible\", false);\n\n      this._disposers.push(this.setTimeout(function () {\n        _this.setPrivate(\"visible\", true);\n      }, 500));\n\n      this.lineX.events.on(\"positionchanged\", function () {\n        _this._handleXLine();\n      });\n      this.lineY.events.on(\"positionchanged\", function () {\n        _this._handleYLine();\n      });\n      this.lineX.events.on(\"focus\", function (ev) {\n        return _this._handleLineFocus(ev.target);\n      });\n      this.lineX.events.on(\"blur\", function (ev) {\n        return _this._handleLineBlur(ev.target);\n      });\n      this.lineY.events.on(\"focus\", function (ev) {\n        return _this._handleLineFocus(ev.target);\n      });\n      this.lineY.events.on(\"blur\", function (ev) {\n        return _this._handleLineBlur(ev.target);\n      });\n\n      if ($utils.supports(\"keyboardevents\")) {\n        this._disposers.push($utils.addEventListener(document, \"keydown\", function (ev) {\n          _this._handleLineMove(ev.keyCode);\n        }));\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_setUpTouch\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var chart = this.chart;\n\n      if (chart) {\n        chart.plotContainer._display.cancelTouch = this.get(\"behavior\") != \"none\" ? true : false;\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleXLine\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var x = this.lineX.x();\n      var visible = true;\n\n      if (x < 0 || x > this.width()) {\n        visible = false;\n      }\n\n      this.lineX.setPrivate(\"visible\", visible);\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleYLine\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var y = this.lineY.y();\n      var visible = true;\n\n      if (y < 0 || y > this.height()) {\n        visible = false;\n      }\n\n      this.lineY.setPrivate(\"visible\", visible);\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleLineMove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (keyCode) {\n      var dir = \"\";\n      var position = 0;\n      var increment = 0.1;\n      var chart = this.chart;\n\n      if (this._root.focused(this.lineX)) {\n        if (chart && chart.xAxes.length) {\n          increment = chart.xAxes.getIndex(0).getCellWidthPosition();\n        }\n\n        position = this.getPrivate(\"positionX\", 0);\n        dir = \"positionX\";\n\n        if (keyCode == 37) {\n          position -= increment;\n        } else if (keyCode == 39) {\n          position += increment;\n        }\n      } else if (this._root.focused(this.lineY)) {\n        if (chart && chart.yAxes.length) {\n          increment = chart.yAxes.getIndex(0).getCellWidthPosition();\n        }\n\n        position = this.getPrivate(\"positionY\", 0);\n        dir = \"positionY\";\n\n        if (keyCode == 38) {\n          position -= increment;\n        } else if (keyCode == 40) {\n          position += increment;\n        }\n      }\n\n      if (position < 0) {\n        position = 0;\n      } else if (position > 1) {\n        position = 1;\n      }\n\n      if (dir != \"\") {\n        this.set(dir, position);\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleLineFocus\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_line) {\n      this.setAll({\n        positionX: this.getPrivate(\"positionX\"),\n        positionY: this.getPrivate(\"positionY\"),\n        alwaysShow: true\n      });\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleLineBlur\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_line) {\n      this.setAll({\n        positionX: undefined,\n        positionY: undefined,\n        alwaysShow: false\n      });\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"xAxis\")) {\n        this._tooltipX = false;\n        var xAxis = this.get(\"xAxis\");\n\n        if (xAxis) {\n          var tooltip_1 = xAxis.get(\"tooltip\");\n\n          if (tooltip_1) {\n            this._tooltipX = true;\n            tooltip_1.on(\"pointTo\", function () {\n              _this._updateXLine(tooltip_1);\n            });\n          }\n        }\n      }\n\n      if (this.isDirty(\"yAxis\")) {\n        this._tooltipY = false;\n        var yAxis = this.get(\"yAxis\");\n\n        if (yAxis) {\n          var tooltip_2 = yAxis.get(\"tooltip\");\n\n          if (tooltip_2) {\n            this._tooltipY = true;\n            tooltip_2.on(\"pointTo\", function () {\n              _this._updateYLine(tooltip_2);\n            });\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleSyncWith\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var chart = this.chart;\n\n      if (chart) {\n        var syncWith = this.get(\"syncWith\");\n        var otherCharts_1 = [];\n\n        if (syncWith) {\n          $array.each(syncWith, function (cursor) {\n            var chart = cursor.chart;\n\n            if (chart) {\n              otherCharts_1.push(chart);\n            }\n          });\n        }\n\n        chart._otherCharts = otherCharts_1;\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this);\n\n      this._handleSyncWith();\n\n      if (this.isDirty(\"positionX\") || this.isDirty(\"positionY\")) {\n        var positionX = this.get(\"positionX\");\n        var positionY = this.get(\"positionY\");\n\n        if (positionX == null && positionY == null) {\n          this.hide(0);\n        } else {\n          this._movePoint = this.toGlobal(this._getPoint(this.get(\"positionX\", 0), this.get(\"positionY\", 0)));\n          this.handleMove();\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_updateXLine\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tooltip) {\n      var x = $math.round(this._display.toLocal(tooltip.get(\"pointTo\", {\n        x: 0,\n        y: 0\n      })).x, 2);\n\n      if (this._toX != x) {\n        this.lineX.animate({\n          key: \"x\",\n          to: x,\n          duration: tooltip.get(\"animationDuration\", 0),\n          easing: tooltip.get(\"animationEasing\")\n        });\n        this._toX = x;\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_updateYLine\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tooltip) {\n      var y = $math.round(this._display.toLocal(tooltip.get(\"pointTo\", {\n        x: 0,\n        y: 0\n      })).y, 2);\n\n      if (this._toY != y) {\n        this.lineY.animate({\n          key: \"y\",\n          to: y,\n          duration: tooltip.get(\"animationDuration\", 0),\n          easing: tooltip.get(\"animationEasing\")\n        });\n        this._toY = y;\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_drawLines\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this.lineX.set(\"draw\", function (display) {\n        display.moveTo(0, 0);\n        display.lineTo(0, _this.height());\n      });\n      this.lineY.set(\"draw\", function (display) {\n        display.moveTo(0, 0);\n        display.lineTo(_this.width(), 0);\n      });\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_setChart\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (chart) {\n      var _this = this;\n\n      this.chart = chart;\n\n      this._handleSyncWith();\n\n      var plotContainer = chart.plotContainer;\n      this.events.on(\"boundschanged\", function () {\n        _this._disposers.push(_this.setTimeout(function () {\n          if (_this.get(\"alwaysShow\")) {\n            _this._movePoint = _this.toGlobal(_this._getPoint(_this.get(\"positionX\", 0), _this.get(\"positionY\", 0)));\n\n            _this.handleMove();\n          }\n        }, 50));\n      }); //this._display.interactive = true;\n\n      if ($utils.supports(\"touchevents\")) {\n        this._disposers.push(plotContainer.events.on(\"click\", function (event) {\n          if ($utils.isTouchEvent(event.originalEvent)) {\n            _this._handleMove(event.originalEvent);\n          }\n        }));\n\n        this._setUpTouch();\n      }\n\n      this._disposers.push(plotContainer.events.on(\"pointerdown\", function (event) {\n        _this._handleCursorDown(event.originalEvent);\n      }));\n\n      this._disposers.push(plotContainer.events.on(\"globalpointerup\", function (event) {\n        _this._handleCursorUp(event.originalEvent);\n\n        if (!event.native && !_this.isHidden()) {\n          _this._handleMove(event.originalEvent);\n        }\n      }));\n\n      this._disposers.push(plotContainer.events.on(\"globalpointermove\", function (event) {\n        if (!_this.get(\"syncWith\")) {\n          if ($object.keys(plotContainer._downPoints).length == 0 && !event.native && _this.isHidden()) {\n            // Ignore mouse movement if it originates on outside element and\n            // we're not dragging.\n            return;\n          }\n        }\n\n        _this._handleMove(event.originalEvent);\n      }));\n\n      var parent = this.parent;\n\n      if (parent) {\n        parent.children.moveValue(this.selection);\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_inPlot\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point) {\n      var chart = this.chart;\n\n      if (chart) {\n        return chart.inPlot(point);\n      }\n\n      return false;\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleCursorDown\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      var rootPoint = this._root.documentPointToRoot({\n        x: event.clientX,\n        y: event.clientY\n      });\n\n      var local = this._display.toLocal(rootPoint);\n\n      var chart = this.chart;\n      this.selection.set(\"draw\", function () {});\n\n      if (chart && this._inPlot(local)) {\n        this._downPoint = local;\n\n        if (this.get(\"behavior\") != \"none\") {\n          this.selection.show();\n          var type = \"selectstarted\";\n\n          if (this.events.isEnabled(type)) {\n            this.events.dispatch(type, {\n              type: type,\n              target: this\n            });\n          }\n        }\n\n        var positionX = this._getPosition(local).x;\n\n        var positionY = this._getPosition(local).y;\n\n        this.setPrivate(\"downPositionX\", positionX);\n        this.setPrivate(\"downPositionY\", positionY);\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleCursorUp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      // TODO: handle multitouch\n      if (this._downPoint) {\n        var behavior = this.get(\"behavior\", \"none\");\n\n        if (behavior != \"none\") {\n          if (behavior.charAt(0) === \"z\") {\n            this.selection.hide();\n          }\n\n          var rootPoint = this._root.documentPointToRoot({\n            x: event.clientX,\n            y: event.clientY\n          });\n\n          var local = this._display.toLocal(rootPoint);\n\n          var downPoint = this._downPoint;\n          var moveThreshold = this.get(\"moveThreshold\", 1);\n\n          if (local && downPoint) {\n            var dispatch = false;\n\n            if (behavior === \"zoomX\" || behavior === \"zoomXY\" || behavior === \"selectX\" || behavior === \"selectXY\") {\n              if (Math.abs(local.x - downPoint.x) > moveThreshold) {\n                dispatch = true;\n              }\n            }\n\n            if (behavior === \"zoomY\" || behavior === \"zoomXY\" || behavior === \"selectY\" || behavior === \"selectXY\") {\n              if (Math.abs(local.y - downPoint.y) > moveThreshold) {\n                dispatch = true;\n              }\n            }\n\n            if (dispatch) {\n              var type = \"selectended\";\n\n              if (this.events.isEnabled(type)) {\n                this.events.dispatch(type, {\n                  type: type,\n                  target: this\n                });\n              }\n            }\n          }\n        }\n      }\n\n      this._downPoint = undefined;\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_handleMove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      if (this.getPrivate(\"visible\")) {\n        var chart = this.chart;\n\n        if (chart && $object.keys(chart.plotContainer._downPoints).length > 1) {\n          this.set(\"forceHidden\", true);\n          return;\n        } else {\n          this.set(\"forceHidden\", false);\n        } // TODO: handle multitouch\n\n\n        var rootPoint = this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        });\n\n        var lastPoint = this._lastPoint;\n\n        if (Math.round(lastPoint.x) === Math.round(rootPoint.x) && Math.round(lastPoint.y) === Math.round(rootPoint.y)) {\n          return;\n        }\n\n        this._lastPoint = rootPoint;\n        this.setPrivate(\"lastPoint\", rootPoint);\n        this.handleMove({\n          x: rootPoint.x,\n          y: rootPoint.y\n        });\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_getPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point) {\n      return {\n        x: point.x / this.width(),\n        y: point.y / this.height()\n      };\n    }\n  });\n  /**\r\n   * Moves the cursor to X/Y coordinates within chart container (`point`).\r\n   *\r\n   * If `skipEvent` parameter is set to `true`, the move will not invoke\r\n   * the `\"cursormoved\"` event.\r\n   *\r\n   * @param  point      X/Y to move cursor to\r\n   * @param  skipEvent  Do not fire \"cursormoved\" event\r\n   */\n\n  Object.defineProperty(XYCursor.prototype, \"handleMove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point, skipEvent) {\n      if (!point) {\n        point = this._movePoint;\n      }\n\n      var alwaysShow = this.get(\"alwaysShow\");\n\n      if (!point) {\n        this.hide(0);\n        return;\n      }\n\n      this._movePoint = point;\n\n      var local = this._display.toLocal(point);\n\n      var chart = this.chart;\n\n      if (chart && this._inPlot(local)) {\n        chart._movePoint = point;\n\n        if (this.isHidden()) {\n          this.show();\n          var behavior = this.get(\"behavior\", \"\");\n\n          if (behavior.charAt(0) == \"z\") {\n            this.selection.set(\"draw\", function () {});\n          }\n        }\n\n        var x = local.x;\n        var y = local.y;\n\n        var xyPos = this._getPosition(local);\n\n        this.setPrivate(\"point\", local);\n        var snapToSeries_1 = this.get(\"snapToSeries\");\n\n        if (this._downPoint) {\n          snapToSeries_1 = undefined;\n        }\n\n        var userPositionX = this.get(\"positionX\");\n        var positionX_1 = xyPos.x;\n\n        if ($type.isNumber(userPositionX)) {\n          positionX_1 = userPositionX;\n        }\n\n        var userPositionY = this.get(\"positionY\");\n        var positionY_1 = xyPos.y;\n\n        if ($type.isNumber(userPositionY)) {\n          positionY_1 = userPositionY;\n        }\n\n        this.setPrivate(\"positionX\", positionX_1);\n        this.setPrivate(\"positionY\", positionY_1);\n\n        var xy = this._getPoint(positionX_1, positionY_1);\n\n        x = xy.x;\n        y = xy.y;\n        chart.xAxes.each(function (axis) {\n          axis._handleCursorPosition(positionX_1, snapToSeries_1);\n\n          if (alwaysShow) {\n            axis.handleCursorShow();\n          }\n        });\n        chart.yAxes.each(function (axis) {\n          axis._handleCursorPosition(positionY_1, snapToSeries_1);\n\n          if (alwaysShow) {\n            axis.handleCursorShow();\n          }\n        });\n\n        if (!skipEvent) {\n          chart._handleCursorPosition();\n\n          var type = \"cursormoved\";\n\n          if (this.events.isEnabled(type)) {\n            this.events.dispatch(type, {\n              type: type,\n              target: this\n            });\n          }\n        }\n\n        this._updateLines(x, y);\n\n        chart.arrangeTooltips();\n      } else if (!this._downPoint) {\n        if (!alwaysShow) {\n          this.hide(0);\n          var type = \"cursorhidden\";\n\n          if (this.events.isEnabled(type)) {\n            this.events.dispatch(type, {\n              type: type,\n              target: this\n            });\n          }\n        }\n      }\n\n      if (this._downPoint && this.get(\"behavior\") != \"none\") {\n        this._updateSelection(local);\n      }\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_getPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (positionX, positionY) {\n      return {\n        x: this.width() * positionX,\n        y: this.height() * positionY\n      };\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_updateLines\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (x, y) {\n      if (!this._tooltipX) {\n        this.lineX.set(\"x\", x);\n      }\n\n      if (!this._tooltipY) {\n        this.lineY.set(\"y\", y);\n      }\n\n      this._drawLines();\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_updateSelection\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point) {\n      var _this = this;\n\n      var selection = this.selection;\n      var behavior = this.get(\"behavior\");\n      var w = this.width();\n      var h = this.height();\n\n      if (point.x < 0) {\n        point.x = 0;\n      }\n\n      if (point.x > w) {\n        point.x = w;\n      }\n\n      if (point.y < 0) {\n        point.y = 0;\n      }\n\n      if (point.y > h) {\n        point.y = h;\n      }\n\n      selection.set(\"draw\", function (display) {\n        var downPoint = _this._downPoint;\n\n        if (downPoint) {\n          if (behavior === \"zoomXY\" || behavior === \"selectXY\") {\n            display.moveTo(downPoint.x, downPoint.y);\n            display.lineTo(downPoint.x, point.y);\n            display.lineTo(point.x, point.y);\n            display.lineTo(point.x, downPoint.y);\n            display.lineTo(downPoint.x, downPoint.y);\n          } else if (behavior === \"zoomX\" || behavior === \"selectX\") {\n            display.moveTo(downPoint.x, 0);\n            display.lineTo(downPoint.x, h);\n            display.lineTo(point.x, h);\n            display.lineTo(point.x, 0);\n            display.lineTo(downPoint.x, 0);\n          } else if (behavior === \"zoomY\" || behavior === \"selectY\") {\n            display.moveTo(0, downPoint.y);\n            display.lineTo(w, downPoint.y);\n            display.lineTo(w, point.y);\n            display.lineTo(0, point.y);\n            display.lineTo(0, downPoint.y);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_onHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.isHidden()) {\n        var chart = this.chart;\n\n        if (chart) {\n          chart.xAxes.each(function (axis) {\n            axis.handleCursorHide();\n          });\n          chart.yAxes.each(function (axis) {\n            axis.handleCursorHide();\n          });\n          chart.series.each(function (series) {\n            series.handleCursorHide();\n          });\n        }\n      }\n\n      _super.prototype._onHide.call(this);\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_onShow\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this.isHidden()) {\n        var chart = this.chart;\n\n        if (chart) {\n          chart.xAxes.each(function (axis) {\n            axis.handleCursorShow();\n          });\n          chart.yAxes.each(function (axis) {\n            axis.handleCursorShow();\n          });\n        }\n      }\n\n      _super.prototype._onShow.call(this);\n    }\n  });\n  Object.defineProperty(XYCursor.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._dispose.call(this);\n\n      this.selection.dispose();\n    }\n  });\n  Object.defineProperty(XYCursor, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"XYCursor\"\n  });\n  Object.defineProperty(XYCursor, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([XYCursor.className])\n  });\n  return XYCursor;\n}(Container);\n\nexport { XYCursor }; //# sourceMappingURL=XYCursor.js.map","map":null,"metadata":{},"sourceType":"module"}