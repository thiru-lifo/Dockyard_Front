{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Container } from \"./Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { Tooltip } from \"../../core/render/Tooltip\";\nimport { LinearGradient } from \"../../core/render/gradients/LinearGradient\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n/**\r\n * Heat legend.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/} for more info\r\n */\n\nvar HeatLegend =\n/** @class */\nfunction (_super) {\n  __extends(HeatLegend, _super);\n\n  function HeatLegend() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A [[Container]] that all labels are placed in.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n\n    Object.defineProperty(_this, \"labelContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Container.new(_this._root, {}))\n    });\n    /**\r\n     * A [[Container]] that all markers are placed in.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"markerContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Container.new(_this._root, {}))\n    });\n    /**\r\n     * A start [[Label]].\r\n     *\r\n     * @default Label.new()\r\n     */\n\n    Object.defineProperty(_this, \"startLabel\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.labelContainer.children.push(Label.new(_this._root, {\n        themeTags: [\"start\"]\n      }))\n    });\n    /**\r\n     * An end [[Label]].\r\n     *\r\n     * @default Label.new()\r\n     */\n\n    Object.defineProperty(_this, \"endLabel\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.labelContainer.children.push(Label.new(_this._root, {\n        themeTags: [\"end\"]\n      }))\n    });\n    /**\r\n     * List of rectangle elements used for default legend markers.\r\n     *\r\n     * @default new ListTemplate<RoundedRectangle>\r\n     */\n\n    Object.defineProperty(_this, \"markers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return RoundedRectangle._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.markers.template.get(\"themeTags\", []), [_this.get(\"orientation\"), \"heatlegend\", \"marker\"])\n        }, [_this.markers.template]);\n      })\n    });\n    return _this;\n  }\n\n  Object.defineProperty(HeatLegend.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"heatlegend\", this._settings.orientation]);\n\n      _super.prototype._afterNew.call(this);\n\n      this.set(\"tooltip\", Tooltip.new(this._root, {\n        themeTags: [\"heatlegend\"]\n      }));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(HeatLegend.prototype, \"makeMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var marker = this.markers.make();\n      marker.states.create(\"disabled\", {});\n      return marker;\n    }\n  });\n  /**\r\n   * Moves and shows tooltip at specific value.\r\n   *\r\n   * Can also specify optional text to show in tooltip, as well as the color.\r\n   *\r\n   * @param  value  Value\r\n   * @param  text   Text\r\n   * @param  color  Color\r\n   */\n\n  Object.defineProperty(HeatLegend.prototype, \"showValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, text, color) {\n      var tooltip = this.getTooltip();\n\n      if (tooltip && $type.isNumber(value)) {\n        var startValue = this.get(\"startValue\", 0);\n        var endValue = this.get(\"endValue\", 1);\n        var c = (value - startValue) / (endValue - startValue);\n        var startColor = this.get(\"startColor\");\n        var endColor = this.get(\"endColor\");\n\n        if (!text) {\n          text = this.getNumberFormatter().format(value);\n        }\n\n        if (!color) {\n          color = Color.interpolate(c, startColor, endColor);\n        }\n\n        tooltip.label.set(\"text\", text);\n        var p = void 0;\n\n        if (this.get(\"orientation\") == \"vertical\") {\n          p = this.markerContainer.toGlobal({\n            x: 0,\n            y: this.innerHeight() * (1 - c)\n          });\n        } else {\n          p = this.markerContainer.toGlobal({\n            x: this.innerWidth() * c,\n            y: 0\n          });\n        }\n\n        var background = tooltip.get(\"background\");\n\n        if (background) {\n          background.set(\"fill\", Color.interpolate(c, startColor, endColor));\n        }\n\n        tooltip.set(\"pointTo\", p);\n        tooltip.show();\n      }\n    }\n  });\n  Object.defineProperty(HeatLegend.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      var labelContainer = this.labelContainer;\n      var orientation = this.get(\"orientation\");\n      var startLabel = this.startLabel;\n      var endLabel = this.endLabel;\n      var tooltip = this.getTooltip();\n\n      if (this.isDirty(\"orientation\")) {\n        if (orientation == \"vertical\") {\n          this.markerContainer.setAll({\n            layout: this._root.verticalLayout,\n            height: p100\n          });\n          this.set(\"layout\", this._root.horizontalLayout);\n          startLabel.setAll({\n            y: p100,\n            x: undefined,\n            centerY: p100,\n            centerX: p100\n          });\n          endLabel.setAll({\n            y: 0,\n            x: undefined,\n            centerY: 0,\n            centerX: p100\n          });\n          labelContainer.setAll({\n            height: p100,\n            width: undefined\n          });\n\n          if (tooltip) {\n            tooltip.set(\"pointerOrientation\", \"horizontal\");\n          }\n        } else {\n          this.markerContainer.setAll({\n            layout: this._root.horizontalLayout,\n            width: p100\n          });\n          this.set(\"layout\", this._root.verticalLayout);\n          startLabel.setAll({\n            x: 0,\n            y: undefined,\n            centerX: 0,\n            centerY: 0\n          });\n          endLabel.setAll({\n            x: p100,\n            y: undefined,\n            centerX: p100,\n            centerY: 0\n          });\n          labelContainer.setAll({\n            width: p100,\n            height: undefined\n          });\n\n          if (tooltip) {\n            tooltip.set(\"pointerOrientation\", \"vertical\");\n          }\n        }\n      }\n\n      if (this.isDirty(\"stepCount\")) {\n        var stepCount = this.get(\"stepCount\", 1);\n        var startColor = this.get(\"startColor\");\n        var endColor = this.get(\"endColor\");\n        this.markerContainer.children.clear();\n\n        if (stepCount > 1) {\n          for (var i = 0; i < stepCount; i++) {\n            var marker = this.makeMarker();\n\n            if (orientation == \"vertical\") {\n              this.markerContainer.children.moveValue(marker, 0);\n            } else {\n              this.markerContainer.children.push(marker);\n            }\n\n            if (startColor && endColor) {\n              marker.set(\"fill\", Color.interpolate(i / stepCount, startColor, endColor));\n            }\n          }\n        } else if (stepCount == 1) {\n          var marker = this.makeMarker();\n          this.markerContainer.children.push(marker);\n          var gradient = LinearGradient.new(this._root, {\n            stops: [{\n              color: startColor\n            }, {\n              color: endColor\n            }]\n          });\n\n          if (orientation == \"vertical\") {\n            gradient.set(\"rotation\", 90);\n            var stops = gradient.get(\"stops\");\n\n            if (stops) {\n              stops.reverse();\n            }\n          } else {\n            gradient.set(\"rotation\", 0);\n          }\n\n          if (startColor && endColor) {\n            marker.set(\"fillGradient\", gradient);\n          }\n        }\n      }\n\n      if (this.isDirty(\"startText\") || this.isDirty(\"startValue\")) {\n        startLabel.set(\"text\", this.get(\"startText\", this.getNumberFormatter().format(this.get(\"startValue\", 0))));\n      }\n\n      if (this.isDirty(\"endText\") || this.isDirty(\"endValue\")) {\n        endLabel.set(\"text\", this.get(\"endText\", this.getNumberFormatter().format(this.get(\"endValue\", 1))));\n      }\n    }\n  });\n  Object.defineProperty(HeatLegend, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"HeatLegend\"\n  });\n  Object.defineProperty(HeatLegend, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([HeatLegend.className])\n  });\n  return HeatLegend;\n}(Container);\n\nexport { HeatLegend }; //# sourceMappingURL=HeatLegend.js.map","map":null,"metadata":{},"sourceType":"module"}