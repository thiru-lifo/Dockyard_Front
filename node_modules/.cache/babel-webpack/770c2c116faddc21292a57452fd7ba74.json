{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { AxisTick } from \"./AxisTick\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Base class for an axis renderer.\r\n *\r\n * Should not be used on its own.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n */\n\nvar AxisRenderer =\n/** @class */\nfunction (_super) {\n  __extends(AxisRenderer, _super);\n\n  function AxisRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // save for quick access\n\n\n    Object.defineProperty(_this, \"_axisLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 100\n    });\n    Object.defineProperty(_this, \"_start\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_end\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_inversed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_minSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * Chart the renderer is used in.\r\n     */\n\n    Object.defineProperty(_this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_lc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_ls\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_thumbDownPoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_downStart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_downEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A list of ticks in the axis.\r\n     *\r\n     * `ticks.template` can be used to configure ticks.\r\n     *\r\n     * @default new ListTemplate<AxisTick>\r\n     */\n\n    Object.defineProperty(_this, \"ticks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return AxisTick._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.ticks.template.get(\"themeTags\", []), _this.get(\"themeTags\", []))\n        }, [_this.ticks.template]);\n      })\n    });\n    /**\r\n     * A list of grid elements in the axis.\r\n     *\r\n     * `grid.template` can be used to configure grid.\r\n     *\r\n     * @default new ListTemplate<Grid>\r\n     */\n\n    Object.defineProperty(_this, \"grid\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Grid._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.grid.template.get(\"themeTags\", []), _this.get(\"themeTags\", []))\n        }, [_this.grid.template]);\n      })\n    });\n    /**\r\n     * A list of fills in the axis.\r\n     *\r\n     * `axisFills.template` can be used to configure axis fills.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n\n    Object.defineProperty(_this, \"axisFills\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Graphics._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.axisFills.template.get(\"themeTags\", [\"axis\", \"fill\"]), _this.get(\"themeTags\", []))\n        }, [_this.axisFills.template]);\n      })\n    });\n    /**\r\n     * A list of labels in the axis.\r\n     *\r\n     * `labels.template` can be used to configure axis labels.\r\n     *\r\n     * @default new ListTemplate<AxisLabel>\r\n     */\n\n    Object.defineProperty(_this, \"labels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return AxisLabel._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.labels.template.get(\"themeTags\", []), _this.get(\"themeTags\", []))\n        }, [_this.labels.template]);\n      })\n    });\n    /**\r\n     * An [[Axis]] renderer is for.\r\n     */\n\n    Object.defineProperty(_this, \"axis\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeTick\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, themeTags) {\n      var tick = this.ticks.make();\n\n      tick._setDataItem(dataItem);\n\n      dataItem.setRaw(\"tick\", tick);\n      tick.set(\"themeTags\", $utils.mergeTags(tick.get(\"themeTags\"), themeTags));\n      this.axis.labelsContainer.children.push(tick);\n      this.ticks.push(tick);\n      return tick;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeGrid\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, themeTags) {\n      var grid = this.grid.make();\n\n      grid._setDataItem(dataItem);\n\n      dataItem.setRaw(\"grid\", grid);\n      grid.set(\"themeTags\", $utils.mergeTags(grid.get(\"themeTags\"), themeTags));\n      this.axis.gridContainer.children.push(grid);\n      this.grid.push(grid);\n      return grid;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeAxisFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, themeTags) {\n      var axisFill = this.axisFills.make();\n\n      axisFill._setDataItem(dataItem);\n\n      axisFill.set(\"themeTags\", $utils.mergeTags(axisFill.get(\"themeTags\"), themeTags));\n      this.axis.gridContainer.children.push(axisFill);\n      dataItem.setRaw(\"axisFill\", axisFill);\n      this.axisFills.push(axisFill);\n      return axisFill;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"makeLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, themeTags) {\n      var label = this.labels.make();\n      label.set(\"themeTags\", $utils.mergeTags(label.get(\"themeTags\"), themeTags));\n      this.axis.labelsContainer.children.moveValue(label, 0);\n\n      label._setDataItem(dataItem);\n\n      dataItem.setRaw(\"label\", label);\n      this.labels.push(label);\n      return label;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"axisLength\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return 0;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"gridCount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.axisLength() / this.get(\"minGridDistance\", 50);\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_updatePositions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this.set(\"isMeasured\", false);\n      var thumb = this.thumb;\n\n      if (thumb) {\n        this._disposers.push(thumb.events.on(\"pointerdown\", function (event) {\n          _this._handleThumbDown(event.originalEvent);\n        }));\n\n        this._disposers.push(thumb.events.on(\"globalpointerup\", function (event) {\n          _this._handleThumbUp(event.originalEvent);\n        }));\n\n        this._disposers.push(thumb.events.on(\"globalpointermove\", function (event) {\n          _this._handleThumbMove(event.originalEvent);\n        }));\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"pan\")) {\n        var thumb = this.thumb;\n\n        if (thumb) {\n          var labelsContainer = this.axis.labelsContainer;\n          var pan = this.get(\"pan\");\n\n          if (pan == \"zoom\") {\n            labelsContainer.children.push(thumb);\n          } else if (pan == \"none\") {\n            labelsContainer.children.removeValue(thumb);\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_handleThumbDown\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      this._thumbDownPoint = this.toLocal(this._root.documentPointToRoot({\n        x: event.clientX,\n        y: event.clientY\n      }));\n      var axis = this.axis;\n      this._downStart = axis.get(\"start\");\n      this._downEnd = axis.get(\"end\");\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_handleThumbUp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_event) {\n      this._thumbDownPoint = undefined;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_handleThumbMove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (event) {\n      var downPoint = this._thumbDownPoint;\n\n      if (downPoint) {\n        var point = this.toLocal(this._root.documentPointToRoot({\n          x: event.clientX,\n          y: event.clientY\n        }));\n        var downStart = this._downStart;\n        var downEnd = this._downEnd;\n        var extra = this._getPan(point, downPoint) * Math.min(1, downEnd - downStart) / 2;\n        this.axis.setAll({\n          start: downStart - extra,\n          end: downEnd + extra\n        });\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_getPan\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_point1, _point2) {\n      return 0;\n    }\n  });\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"positionToCoordinate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      if (this._inversed) {\n        return (this._end - position) * this._axisLength;\n      } else {\n        return (position - this._start) * this._axisLength;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"updateTooltipBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_tooltip) {}\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.markDirty();\n      this._clear = true;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"toAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var start = this._start || 0;\n      var end = this._end || 1;\n      position = position * (end - start);\n\n      if (!this.get(\"inversed\")) {\n        position = start + position;\n      } else {\n        position = end - position;\n      }\n\n      return position;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRenderer.prototype, \"fixPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      if (this.get(\"inversed\")) {\n        return 1 - position;\n      }\n\n      return position;\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_updateLC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"toggleVisibility\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (sprite, position, minPosition, maxPosition) {\n      var axis = this.axis;\n      var start = axis.get(\"start\", 0);\n      var end = axis.get(\"end\", 1);\n      var updatedStart = start + (end - start) * (minPosition - 0.0001);\n      var updatedEnd = start + (end - start) * (maxPosition + 0.0001);\n\n      if (position < updatedStart || position > updatedEnd) {\n        sprite.setPrivate(\"visible\", false);\n      } else {\n        sprite.setPrivate(\"visible\", true);\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"_positionTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tooltip, point) {\n      var chart = this.chart;\n\n      if (chart) {\n        if (chart.inPlot(point)) {\n          tooltip.set(\"pointTo\", this._display.toGlobal(point));\n        } else {\n          tooltip.hide();\n        }\n      }\n    }\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"processAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(AxisRenderer, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"AxisRenderer\"\n  });\n  Object.defineProperty(AxisRenderer, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([AxisRenderer.className])\n  });\n  return AxisRenderer;\n}(Graphics);\n\nexport { AxisRenderer }; //# sourceMappingURL=AxisRenderer.js.map","map":null,"metadata":{},"sourceType":"module"}