{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PicturePattern } from \"../render/patterns/PicturePattern\";\nimport { Sprite } from \"./Sprite\";\nimport { BlendMode } from \"./backend/Renderer\";\nimport * as $type from \"../util/Type\";\nimport * as $array from \"../util/Array\";\nexport var visualSettings = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeWidth\", \"strokeOpacity\", \"fillPattern\", \"strokePattern\", \"fillGradient\", \"strokeGradient\", \"strokeDasharray\", \"strokeDashoffset\"];\n/**\r\n * Base class used for drawing shapes.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Graphics =\n/** @class */\nfunction (_super) {\n  __extends(Graphics, _super);\n\n  function Graphics() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Graphics.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"draw\") || this.isDirty(\"svgPath\")) {\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"fill\") || this.isDirty(\"stroke\") || this.isDirty(\"visible\") || this.isDirty(\"forceHidden\") || this.isDirty(\"scale\") || this.isDirty(\"fillGradient\") || this.isDirty(\"strokeGradient\") || this.isDirty(\"fillPattern\") || this.isDirty(\"strokePattern\") || this.isDirty(\"fillOpacity\") || this.isDirty(\"strokeOpacity\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"draw\") || this.isDirty(\"blendMode\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"svgPath\") || this.isDirty(\"lineJoin\") || this.isDirty(\"shadowColor\") || this.isDirty(\"shadowBlur\") || this.isDirty(\"shadowOffsetX\") || this.isDirty(\"shadowOffsetY\")) {\n        this._clear = true;\n      }\n\n      if (this.isDirty(\"fillGradient\")) {\n        var gradient = this.get(\"fillGradient\");\n\n        if (gradient) {\n          this._display.isMeasured = true;\n          var gradientTarget = gradient.get(\"target\");\n\n          if (gradientTarget) {\n            this._disposers.push(gradientTarget.events.on(\"boundschanged\", function () {\n              _this._markDirtyKey(\"fill\");\n            }));\n\n            this._disposers.push(gradientTarget.events.on(\"positionchanged\", function () {\n              _this._markDirtyKey(\"fill\");\n            }));\n          }\n        }\n      }\n\n      if (this.isDirty(\"strokeGradient\")) {\n        var gradient = this.get(\"strokeGradient\");\n\n        if (gradient) {\n          this._display.isMeasured = true;\n          var gradientTarget = gradient.get(\"target\");\n\n          if (gradientTarget) {\n            this._disposers.push(gradientTarget.events.on(\"boundschanged\", function () {\n              _this._markDirtyKey(\"stroke\");\n            }));\n\n            this._disposers.push(gradientTarget.events.on(\"positionchanged\", function () {\n              _this._markDirtyKey(\"stroke\");\n            }));\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Graphics.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        this.markDirtyBounds();\n        this.markDirtyLayer();\n\n        this._display.clear();\n\n        var strokeDasharray = this.get(\"strokeDasharray\");\n\n        if ($type.isNumber(strokeDasharray)) {\n          if (strokeDasharray < 0.5) {\n            strokeDasharray = [0];\n          } else {\n            strokeDasharray = [strokeDasharray];\n          }\n        }\n\n        this._display.setLineDash(strokeDasharray);\n\n        var strokeDashoffset = this.get(\"strokeDashoffset\");\n\n        if (strokeDashoffset) {\n          this._display.setLineDashOffset(strokeDashoffset);\n        }\n\n        var blendMode = this.get(\"blendMode\", BlendMode.NORMAL);\n        this._display.blendMode = blendMode;\n        var draw = this.get(\"draw\");\n\n        if (draw) {\n          draw(this._display, this);\n        }\n\n        var svgPath = this.get(\"svgPath\");\n\n        if (svgPath != null) {\n          this._display.svgPath(svgPath);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Graphics.prototype, \"_afterChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterChanged.call(this);\n\n      if (this._clear) {\n        var fill_1 = this.get(\"fill\");\n        var fillGradient = this.get(\"fillGradient\");\n        var fillPattern = this.get(\"fillPattern\");\n        var fillOpacity_1 = this.get(\"fillOpacity\");\n        var stroke_1 = this.get(\"stroke\");\n        var strokeGradient = this.get(\"strokeGradient\");\n        var strokePattern = this.get(\"strokePattern\");\n        var shadowColor = this.get(\"shadowColor\");\n        var shadowBlur = this.get(\"shadowBlur\");\n        var shadowOffsetX = this.get(\"shadowOffsetX\");\n        var shadowOffsetY = this.get(\"shadowOffsetY\");\n        var shadowOpacity = this.get(\"shadowOpacity\"); //const bounds = this._display.getLocalBounds();\n\n        if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {\n          this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);\n        }\n\n        if (fillPattern) {\n          var changed = false;\n\n          if (fill_1 && (!fillPattern.get(\"fill\") || fillPattern.get(\"fillInherited\"))) {\n            fillPattern.set(\"fill\", fill_1);\n            fillPattern.set(\"fillInherited\", true);\n            changed = true;\n          }\n\n          if (stroke_1 && (!fillPattern.get(\"color\") || fillPattern.get(\"colorInherited\"))) {\n            fillPattern.set(\"color\", stroke_1);\n            fillPattern.set(\"colorInherited\", true);\n            changed = true;\n          }\n\n          if (changed) {\n            // @todo: is this OK?\n            fillPattern._changed();\n          }\n\n          var pattern = fillPattern.pattern;\n\n          if (pattern) {\n            this._display.beginFill(pattern, fillOpacity_1);\n\n            this._display.endFill();\n\n            if (fillPattern instanceof PicturePattern) {\n              fillPattern.events.once(\"loaded\", function () {\n                _this._clear = true;\n\n                _this.markDirty();\n              });\n            }\n          }\n        } else if (fillGradient) {\n          if (fill_1) {\n            var stops = fillGradient.get(\"stops\", []);\n\n            if (stops.length) {\n              $array.each(stops, function (stop) {\n                if ((!stop.color || stop.colorInherited) && fill_1) {\n                  stop.color = fill_1;\n                  stop.colorInherited = true;\n                }\n\n                if (stop.opacity == null || stop.opacityInherited) {\n                  stop.opacity = fillOpacity_1;\n                  stop.opacityInherited = true;\n                }\n              });\n            }\n          }\n\n          var gradient = fillGradient.getFill(this);\n\n          if (gradient) {\n            this._display.beginFill(gradient, fillOpacity_1);\n\n            this._display.endFill();\n          }\n        } else if (fill_1) {\n          this._display.beginFill(fill_1, fillOpacity_1);\n\n          this._display.endFill();\n        }\n\n        if (stroke_1 || strokeGradient || strokePattern) {\n          var strokeOpacity_1 = this.get(\"strokeOpacity\");\n          var strokeWidth = this.get(\"strokeWidth\", 1);\n\n          if (this.get(\"nonScalingStroke\")) {\n            strokeWidth = strokeWidth / this.get(\"scale\", 1);\n          }\n\n          var lineJoin = this.get(\"lineJoin\");\n\n          if (strokePattern) {\n            var changed = false;\n\n            if (stroke_1 && (!strokePattern.get(\"color\") || strokePattern.get(\"colorInherited\"))) {\n              strokePattern.set(\"color\", stroke_1);\n              strokePattern.set(\"colorInherited\", true);\n              changed = true;\n            }\n\n            if (changed) {\n              // @todo: is this OK?\n              strokePattern._changed();\n            }\n\n            var pattern = strokePattern.pattern;\n\n            if (pattern) {\n              this._display.lineStyle(strokeWidth, pattern, strokeOpacity_1, lineJoin);\n\n              this._display.endStroke();\n\n              if (strokePattern instanceof PicturePattern) {\n                strokePattern.events.once(\"loaded\", function () {\n                  _this._clear = true;\n\n                  _this.markDirty();\n                });\n              }\n            }\n          } else if (strokeGradient) {\n            var stops = strokeGradient.get(\"stops\", []);\n\n            if (stops.length) {\n              $array.each(stops, function (stop) {\n                if ((!stop.color || stop.colorInherited) && stroke_1) {\n                  stop.color = stroke_1;\n                  stop.colorInherited = true;\n                }\n\n                if (stop.opacity == null || stop.opacityInherited) {\n                  stop.opacity = strokeOpacity_1;\n                  stop.opacityInherited = true;\n                }\n              });\n            }\n\n            var gradient = strokeGradient.getFill(this);\n\n            if (gradient) {\n              this._display.lineStyle(strokeWidth, gradient, strokeOpacity_1, lineJoin);\n\n              this._display.endStroke();\n            }\n          } else if (stroke_1) {\n            this._display.lineStyle(strokeWidth, stroke_1, strokeOpacity_1, lineJoin);\n\n            this._display.endStroke();\n          }\n        }\n      }\n\n      this._clear = false;\n    }\n  });\n  Object.defineProperty(Graphics, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Graphics\"\n  });\n  Object.defineProperty(Graphics, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Graphics.className])\n  });\n  return Graphics;\n}(Sprite);\n\nexport { Graphics }; //# sourceMappingURL=Graphics.js.map","map":null,"metadata":{},"sourceType":"module"}