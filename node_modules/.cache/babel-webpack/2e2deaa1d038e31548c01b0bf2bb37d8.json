{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A horizontal children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar HorizontalLayout =\n/** @class */\nfunction (_super) {\n  __extends(HorizontalLayout, _super);\n\n  function HorizontalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(HorizontalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var availableWidth = container.innerWidth();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n\n            if (childWidth instanceof Percent) {\n              totalPercent += childWidth.value;\n              var w = availableWidth * childWidth.value;\n              var minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n\n              if (minWidth > w) {\n                availableWidth -= minWidth;\n                totalPercent -= childWidth.value;\n              }\n\n              var maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n\n              if (w > maxWidth) {\n                availableWidth -= maxWidth;\n                totalPercent -= childWidth.value;\n              }\n            } else {\n              if (!$type.isNumber(childWidth)) {\n                childWidth = child.width();\n              }\n\n              availableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n            }\n          }\n        }\n      });\n\n      if (availableWidth < 0) {\n        availableWidth = 0.01;\n      } //if (availableWidth > 0) {\n\n\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n\n            if (childWidth instanceof Percent) {\n              var privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n              var minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n              var maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n              privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n              child.setPrivate(\"width\", privateWidth);\n            }\n          }\n        }\n      }); //}\n\n      var prevX = paddingLeft;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginLeft = child.get(\"marginLeft\", 0);\n            var marginRight = child.get(\"marginRight\", 0);\n            var maxWidth = child.get(\"maxWidth\");\n            var left = bounds.left;\n            var right = bounds.right;\n\n            if (maxWidth) {\n              if (right - left > maxWidth) {\n                right = left + maxWidth;\n              }\n            }\n\n            var x = prevX + marginLeft - left;\n            child.setPrivate(\"x\", x);\n            prevX = x + right + marginRight;\n          } else {\n            child.setPrivate(\"x\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(HorizontalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"HorizontalLayout\"\n  });\n  Object.defineProperty(HorizontalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([HorizontalLayout.className])\n  });\n  return HorizontalLayout;\n}(Layout);\n\nexport { HorizontalLayout }; //# sourceMappingURL=HorizontalLayout.js.map","map":null,"metadata":{},"sourceType":"module"}