{"ast":null,"code":"import * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\n/**\r\n * An object representing a collection of setting values to apply as required.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\r\n */\n\nvar State =\n/** @class */\nfunction () {\n  function State(entity, settings) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_userSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._entity = entity;\n    this._settings = settings;\n  }\n\n  Object.defineProperty(State.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(State.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value;\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key` to be set when the state\r\n   * is applied.\r\n   *\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(State.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userSettings[key] = true;\n      this.setRaw(key, value);\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(State.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._userSettings[key];\n      delete this._settings[key];\n    }\n  });\n  /**\r\n   * Sets multiple settings at once.\r\n   *\r\n   * `settings` must be an object with key: value pairs.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param settings Settings\r\n   */\n\n  Object.defineProperty(State.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      var _this = this;\n\n      $object.keys(settings).forEach(function (key) {\n        _this.set(key, settings[key]);\n      });\n    }\n  });\n  Object.defineProperty(State.prototype, \"_eachSetting\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $object.each(this._settings, f);\n    }\n  });\n  /**\r\n   * Applies the state to the target element.\r\n   *\r\n   * All setting values are set immediately.\r\n   */\n\n  Object.defineProperty(State.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var seen = {};\n      seen[\"stateAnimationEasing\"] = true;\n      seen[\"stateAnimationDuration\"] = true;\n\n      var defaultState = this._entity.states.lookup(\"default\");\n\n      this._eachSetting(function (key, value) {\n        if (!seen[key]) {\n          seen[key] = true; // save values to default state\n\n          if (_this !== defaultState) {\n            if (!(key in defaultState._settings)) {\n              defaultState._settings[key] = _this._entity.get(key);\n            }\n          }\n\n          _this._entity.set(key, value);\n        }\n      });\n    }\n  });\n  /**\r\n   * Applies the state to the target element.\r\n   *\r\n   * Returns an object representing all [[Animation]] objects created for\r\n   * each setting key transition.\r\n   *\r\n   * @return           Animations\r\n   */\n\n  Object.defineProperty(State.prototype, \"applyAnimate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (duration) {\n      var _this = this;\n\n      if (duration == null) {\n        duration = this._settings.stateAnimationDuration;\n      }\n\n      if (duration == null) {\n        duration = this.get(\"stateAnimationDuration\", this._entity.get(\"stateAnimationDuration\", 0));\n      }\n\n      var easing = this._settings.stateAnimationEasing;\n\n      if (easing == null) {\n        easing = this.get(\"stateAnimationEasing\", this._entity.get(\"stateAnimationEasing\", $ease.cubic));\n      }\n\n      var defaultState = this._entity.states.lookup(\"default\");\n\n      var seen = {};\n      seen[\"stateAnimationEasing\"] = true;\n      seen[\"stateAnimationDuration\"] = true;\n      var animations = {};\n\n      this._eachSetting(function (key, value) {\n        if (!seen[key]) {\n          seen[key] = true; // save values to default state\n\n          if (_this != defaultState) {\n            if (!(key in defaultState._settings)) {\n              defaultState._settings[key] = _this._entity.get(key);\n            }\n          }\n\n          var animation = _this._entity.animate({\n            key: key,\n            to: value,\n            duration: duration,\n            easing: easing\n          });\n\n          if (animation) {\n            animations[key] = animation;\n          }\n        }\n      });\n\n      return animations;\n    }\n  });\n  return State;\n}();\n\nexport { State };\n/**\r\n * Collection of [[State]] objects for an element.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\r\n */\n\nvar States =\n/** @class */\nfunction () {\n  function States(entity) {\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._entity = entity;\n  }\n  /**\r\n   * Checks if a state by `name` exists. Returns it there is one.\r\n   *\r\n   * @param  name  State name\r\n   * @return       State\r\n   */\n\n\n  Object.defineProperty(States.prototype, \"lookup\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      return this._states[name];\n    }\n  });\n  /**\r\n   * Sets supplied `settings` on a state by the `name`.\r\n   *\r\n   * If such state does not yet exists, it is created.\r\n   *\r\n   * @param   name      State name\r\n   * @param   settings  Settings\r\n   * @return            New State\r\n   */\n\n  Object.defineProperty(States.prototype, \"create\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name, settings) {\n      var state = this._states[name];\n\n      if (state) {\n        state.setAll(settings);\n        return state;\n      } else {\n        var state_1 = new State(this._entity, settings);\n        this._states[name] = state_1;\n        return state_1;\n      }\n    }\n  });\n  /**\r\n   * Removes the state called `name`.\r\n   *\r\n   * @param   name      State name\r\n   */\n\n  Object.defineProperty(States.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      delete this._states[name];\n    }\n  });\n  /**\r\n   * Applies a named state to the target element.\r\n   *\r\n   * @param  newState  State name\r\n   */\n\n  Object.defineProperty(States.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newState) {\n      var state = this._states[newState];\n\n      if (state) {\n        state.apply();\n      }\n\n      this._entity._applyState(newState);\n    }\n  });\n  /**\r\n   * Applies a named state to the element.\r\n   *\r\n   * Returns an object representing all [[Animation]] objects created for\r\n   * each setting key transition.\r\n   *\r\n   * @param   newState  State name\r\n   * @return            Animations\r\n   */\n\n  Object.defineProperty(States.prototype, \"applyAnimate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newState, duration) {\n      var animations;\n      var state = this._states[newState];\n\n      if (state) {\n        animations = state.applyAnimate(duration);\n      }\n\n      this._entity._applyStateAnimated(newState, duration);\n\n      return animations;\n    }\n  });\n  return States;\n}();\n\nexport { States }; //# sourceMappingURL=States.js.map","map":null,"metadata":{},"sourceType":"module"}