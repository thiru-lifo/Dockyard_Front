{"ast":null,"code":"/**\r\n * Modified from Pixi:\r\n *\r\n * The MIT License\r\n *\r\n * Copyright (c) 2013-2017 Mathew Groves, Chad Engler\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\n\n/**\r\n * @ignore\r\n */\nvar Matrix =\n/** @class */\nfunction () {\n  function Matrix(a, b, c, d, tx, ty) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (tx === void 0) {\n      tx = 0;\n    }\n\n    if (ty === void 0) {\n      ty = 0;\n    }\n\n    Object.defineProperty(this, \"a\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"b\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"c\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"d\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tx\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"ty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\r\n   * Sets the matrix based on all the available properties\r\n   */\n\n\n  Object.defineProperty(Matrix.prototype, \"setTransform\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (x, y, pivotX, pivotY, rotation, scale) {\n      if (scale === void 0) {\n        scale = 1;\n      }\n\n      this.a = Math.cos(rotation) * scale;\n      this.b = Math.sin(rotation) * scale;\n      this.c = -Math.sin(rotation) * scale;\n      this.d = Math.cos(rotation) * scale;\n      this.tx = x - (pivotX * this.a + pivotY * this.c);\n      this.ty = y - (pivotX * this.b + pivotY * this.d);\n    }\n  });\n  /**\r\n   * Get a new position with the current transformation applied.\r\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (origin) {\n      return {\n        x: this.a * origin.x + this.c * origin.y + this.tx,\n        y: this.b * origin.x + this.d * origin.y + this.ty\n      };\n    }\n  });\n  /**\r\n   * Get a new position with the inverse of the current transformation applied.\r\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"applyInverse\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (origin) {\n      var id = 1 / (this.a * this.d + this.c * -this.b);\n      return {\n        x: this.d * id * origin.x + -this.c * id * origin.y + (this.ty * this.c - this.tx * this.d) * id,\n        y: this.a * id * origin.y + -this.b * id * origin.x + (-this.ty * this.a + this.tx * this.b) * id\n      };\n    }\n  });\n  /**\r\n   * Appends the given Matrix to this Matrix.\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"append\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (matrix) {\n      var a1 = this.a;\n      var b1 = this.b;\n      var c1 = this.c;\n      var d1 = this.d;\n      this.a = matrix.a * a1 + matrix.b * c1;\n      this.b = matrix.a * b1 + matrix.b * d1;\n      this.c = matrix.c * a1 + matrix.d * c1;\n      this.d = matrix.c * b1 + matrix.d * d1;\n      this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n      this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    }\n  });\n  /**\r\n   * Prepends the given Matrix to this Matrix.\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"prepend\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (matrix) {\n      var tx1 = this.tx;\n\n      if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n        var a1 = this.a;\n        var c1 = this.c;\n        this.a = a1 * matrix.a + this.b * matrix.c;\n        this.b = a1 * matrix.b + this.b * matrix.d;\n        this.c = c1 * matrix.a + this.d * matrix.c;\n        this.d = c1 * matrix.b + this.d * matrix.d;\n      }\n\n      this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n      this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    }\n  });\n  /**\r\n   * Copies the other matrix's properties into this matrix\r\n   */\n\n  Object.defineProperty(Matrix.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (matrix) {\n      this.a = matrix.a;\n      this.b = matrix.b;\n      this.c = matrix.c;\n      this.d = matrix.d;\n      this.tx = matrix.tx;\n      this.ty = matrix.ty;\n    }\n  });\n  return Matrix;\n}();\n\nexport { Matrix }; //# sourceMappingURL=Matrix.js.map","map":null,"metadata":{},"sourceType":"module"}