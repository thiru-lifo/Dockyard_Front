{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Chart } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * A base class for all series-based charts.\r\n */\n\nvar SerialChart =\n/** @class */\nfunction (_super) {\n  __extends(SerialChart, _super);\n\n  function SerialChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A [[Container]] where chart will store all series.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n\n    Object.defineProperty(_this, \"seriesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A list of chart's series.\r\n     */\n\n    Object.defineProperty(_this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(SerialChart.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this._disposers.push(this.series);\n\n      var children = this.seriesContainer.children;\n\n      this._disposers.push(this.series.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          $array.each(change.oldValues, function (series) {\n            _this._removeSeries(series);\n          });\n\n          var colors = _this.get(\"colors\");\n\n          if (colors) {\n            colors.reset();\n          }\n        } else if (change.type === \"push\") {\n          children.moveValue(change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"setIndex\") {\n          children.setIndex(change.index, change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"insertIndex\") {\n          children.insertIndex(change.index, change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"removeIndex\") {\n          _this._removeSeries(change.oldValue);\n        } else if (change.type === \"moveIndex\") {\n          children.moveValue(change.value, change.newIndex);\n\n          _this._processSeries(change.value);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      }));\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_processSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      series.chart = this;\n\n      series._placeBulletsContainer(this);\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_removeSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      if (!series.isDisposed()) {\n        this.seriesContainer.children.removeValue(series);\n\n        series._removeBulletsContainer();\n      }\n    }\n  });\n  Object.defineProperty(SerialChart, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SerialChart\"\n  });\n  Object.defineProperty(SerialChart, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Chart.classNames.concat([SerialChart.className])\n  });\n  return SerialChart;\n}(Chart);\n\nexport { SerialChart }; //# sourceMappingURL=SerialChart.js.map","map":null,"metadata":{},"sourceType":"module"}