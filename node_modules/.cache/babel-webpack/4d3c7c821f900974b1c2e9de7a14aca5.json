{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n/**\r\n * Returns a `Promise` which can be used to execute code after number of\r\n * milliseconds.\r\n *\r\n * @param   ms  Sleep duration in ms\r\n * @return      Promise\r\n */\n\nexport function sleep(ms) {\n  return new Promise(function (resolve, _reject) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 365.242 / 12 * 86400000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\n\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n\n    case \"month\":\n      return \"year\";\n\n    case \"week\":\n      return \"month\";\n\n    case \"day\":\n      return \"month\";\n    // not a mistake\n\n    case \"hour\":\n      return \"day\";\n\n    case \"minute\":\n      return \"hour\";\n\n    case \"second\":\n      return \"minute\";\n\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\n\nexport function getDuration(unit, count) {\n  if (count == null) {\n    count = 1;\n  }\n\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * @ignore\r\n */\n\nexport function getIntervalDuration(interval) {\n  if (interval) {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  }\n\n  return 0;\n}\nexport function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {\n  var unit = interval.timeUnit;\n  var count = interval.count;\n\n  if (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  } else {\n    var firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n    var lastTime = firstTime + count * getDuration(unit) * 1.05;\n    lastTime = round(new Date(lastTime), unit, 1, firstDateOfWeek, utc, undefined, timezone).getTime();\n    return lastTime - firstTime;\n  }\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\n\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\n\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @param date  Source date\r\n * @return Copy\r\n */\n\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @param timeOne  timestamp\r\n * @param timeTwo  timestamp\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\n\nexport function checkChange(timeOne, timeTwo, unit, utc, timezone) {\n  // quick\n  if (timeTwo - timeOne > getDuration(unit, 1.2)) {\n    return true;\n  }\n\n  var dateOne = new Date(timeOne);\n  var dateTwo = new Date(timeTwo);\n\n  if (timezone) {\n    dateOne = timezone.convertLocal(dateOne);\n    dateTwo = timezone.convertLocal(dateTwo);\n  }\n\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n\n  var changed = false;\n\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n\n      break;\n  }\n\n  if (changed) {\n    return changed;\n  }\n\n  var nextUnit = getNextUnit(unit);\n\n  if (nextUnit) {\n    return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\n\nexport function add(date, unit, count, utc, timezone) {\n  var timeZoneOffset = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n\n    if (timezone) {\n      timeZoneOffset -= timezone.offsetUTC(date);\n    }\n\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (timezone) {\n        newTimeZoneOffset += timezone.offsetUTC(date);\n      }\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff); // solves issues if new time falls back to old time zone\n\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param utc              Use UTC timezone\r\n * @param firstDate        First date to round to\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\n\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {\n  if (!timezone || utc) {\n    var timeZoneOffset = 0;\n\n    if (!utc && unit != \"millisecond\") {\n      timeZoneOffset = date.getTimezoneOffset();\n      date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n    }\n\n    switch (unit) {\n      case \"day\":\n        var day = date.getUTCDate();\n\n        if (count > 1) {\n          //\tday = Math.floor(day / count) * count;\n          if (firstDate) {\n            firstDate = round(firstDate, \"day\", 1);\n            var difference = date.getTime() - firstDate.getTime();\n            var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n            var duration = getDuration(\"day\", unitCount * count);\n            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          }\n        } else {\n          date.setUTCDate(day);\n        }\n\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"second\":\n        var seconds = date.getUTCSeconds();\n\n        if (count > 1) {\n          seconds = Math.floor(seconds / count) * count;\n        }\n\n        date.setUTCSeconds(seconds, 0);\n        break;\n\n      case \"millisecond\":\n        if (count == 1) {\n          return date; // much better for perf!\n        }\n\n        var milliseconds = date.getUTCMilliseconds();\n        milliseconds = Math.floor(milliseconds / count) * count;\n        date.setUTCMilliseconds(milliseconds);\n        break;\n\n      case \"hour\":\n        var hours = date.getUTCHours();\n\n        if (count > 1) {\n          hours = Math.floor(hours / count) * count;\n        }\n\n        date.setUTCHours(hours, 0, 0, 0);\n        break;\n\n      case \"minute\":\n        var minutes = date.getUTCMinutes();\n        milliseconds = date.getUTCMilliseconds();\n\n        if (count > 1) {\n          minutes = Math.floor(minutes / count) * count;\n        }\n\n        date.setUTCMinutes(minutes, 0, 0);\n        break;\n\n      case \"month\":\n        var month = date.getUTCMonth();\n\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n\n        date.setUTCMonth(month, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"year\":\n        var year = date.getUTCFullYear();\n\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n\n        date.setUTCFullYear(year, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"week\":\n        var wday = date.getUTCDate();\n        var weekDay = date.getUTCDay();\n\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n\n        if (weekDay >= firstDateOfWeek) {\n          wday = wday - weekDay + firstDateOfWeek;\n        } else {\n          wday = wday - (7 + weekDay) + firstDateOfWeek;\n        }\n\n        date.setUTCDate(wday);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n    }\n\n    if (!utc && unit != \"millisecond\") {\n      date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n      if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n        var newTimeZoneOffset = date.getTimezoneOffset();\n\n        if (newTimeZoneOffset != timeZoneOffset) {\n          var diff = newTimeZoneOffset - timeZoneOffset;\n          date.setUTCMinutes(date.getUTCMinutes() + diff);\n        }\n      }\n    }\n\n    return date;\n  } else {\n    if (isNaN(date.getTime())) {\n      return date;\n    }\n\n    var tzoffset = timezone.offsetUTC(date);\n    var timeZoneOffset = date.getTimezoneOffset();\n    var parsedDate = timezone.parseDate(date); //console.log(parsedDate)\n\n    var year = parsedDate.year;\n    var month = parsedDate.month;\n    var day = parsedDate.day;\n    var hour = parsedDate.hour;\n    var minute = parsedDate.minute;\n    var second = parsedDate.second;\n    var millisecond = parsedDate.millisecond;\n    var weekday = parsedDate.weekday;\n\n    switch (unit) {\n      case \"day\":\n        if (count > 1 && firstDate) {\n          firstDate = round(firstDate, \"day\", 1, firstDateOfWeek, utc, undefined, timezone);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration);\n          parsedDate = timezone.parseDate(date);\n          year = parsedDate.year;\n          month = parsedDate.month;\n          day = parsedDate.day;\n        }\n\n        hour = 0;\n        minute = tzoffset - timeZoneOffset;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"second\":\n        minute += tzoffset - timeZoneOffset;\n\n        if (count > 1) {\n          second = Math.floor(second / count) * count;\n        }\n\n        millisecond = 0;\n        break;\n\n      case \"millisecond\":\n        minute += tzoffset - timeZoneOffset;\n\n        if (count > 1) {\n          millisecond = Math.floor(millisecond / count) * count;\n        }\n\n        break;\n\n      case \"hour\":\n        if (count > 1) {\n          hour = Math.floor(hour / count) * count;\n        }\n\n        minute = tzoffset - timeZoneOffset;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"minute\":\n        if (count > 1) {\n          minute = Math.floor(minute / count) * count;\n        }\n\n        minute += tzoffset - timeZoneOffset;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"month\":\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n\n        day = 1;\n        hour = 0;\n        minute = tzoffset - timeZoneOffset;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"year\":\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n\n        month = 0;\n        day = 1;\n        hour = 0;\n        minute = tzoffset - timeZoneOffset;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"week\":\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n\n        if (weekday >= firstDateOfWeek) {\n          day = day - weekday + firstDateOfWeek;\n        } else {\n          day = day - (7 + weekday) + firstDateOfWeek;\n        }\n\n        hour = 0;\n        minute = tzoffset - timeZoneOffset;\n        second = 0;\n        millisecond = 0;\n        break;\n    }\n\n    date = new Date(year, month, day, hour, minute, second, millisecond);\n    var newOffset = date.getTimezoneOffset();\n\n    if (newOffset != timeZoneOffset) {\n      date.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);\n    }\n\n    return date;\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function chooseInterval(index, duration, gridCount, intervals) {\n  var gridInterval = intervals[index];\n  var intervalDuration = getIntervalDuration(gridInterval);\n  var lastIndex = intervals.length - 1;\n\n  if (index >= lastIndex) {\n    return __assign({}, intervals[lastIndex]);\n  }\n\n  var count = Math.ceil(duration / intervalDuration);\n\n  if (duration < intervalDuration && index > 0) {\n    return __assign({}, intervals[index - 1]);\n  }\n\n  if (count <= gridCount) {\n    return __assign({}, intervals[index]);\n  } else {\n    if (index + 1 < intervals.length) {\n      return chooseInterval(index + 1, duration, gridCount, intervals);\n    } else {\n      return __assign({}, intervals[index]);\n    }\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function getUnitValue(date, unit) {\n  switch (unit) {\n    case \"day\":\n      return date.getDate();\n\n    case \"second\":\n      return date.getSeconds();\n\n    case \"millisecond\":\n      return date.getMilliseconds();\n\n    case \"hour\":\n      return date.getHours();\n\n    case \"minute\":\n      return date.getMinutes();\n\n    case \"month\":\n      return date.getMonth();\n\n    case \"year\":\n      return date.getFullYear();\n\n    case \"week\":\n      return $utils.getWeek(date);\n  }\n} //# sourceMappingURL=Time.js.map","map":null,"metadata":{},"sourceType":"module"}