{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ColumnSeries } from \"./ColumnSeries\";\nimport { Candlestick } from \"./Candlestick\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $array from \"../../../core/util/Array\";\n/**\r\n * Candlestick series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info\r\n * @important\r\n */\n\nvar CandlestickSeries =\n/** @class */\nfunction (_super) {\n  __extends(CandlestickSeries, _super);\n\n  function CandlestickSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A list of candles in the series.\r\n     *\r\n     * `columns.template` can be used to configure candles.\r\n     *\r\n     * @default new ListTemplate<Candlestick>\r\n     */\n\n\n    Object.defineProperty(_this, \"columns\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({\n        themeTags: [\"autocolor\"]\n      }), function () {\n        return Candlestick._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.columns.template.get(\"themeTags\", []), [\"candlestick\", \"series\", \"column\"])\n        }, [_this.columns.template]);\n      })\n    });\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(CandlestickSeries.prototype, \"makeColumn\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, listTemplate) {\n      var column = this.mainContainer.children.push(listTemplate.make());\n\n      column._setDataItem(dataItem);\n\n      listTemplate.push(column);\n      return column;\n    }\n  });\n  Object.defineProperty(CandlestickSeries.prototype, \"_updateGraphics\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, previousDataItem) {\n      _super.prototype._updateGraphics.call(this, dataItem, previousDataItem);\n\n      var xAxis = this.getRaw(\"xAxis\");\n      var yAxis = this.getRaw(\"yAxis\");\n      var baseAxis = this.getRaw(\"baseAxis\");\n      var vcy = this.get(\"vcy\", 1);\n      var vcx = this.get(\"vcx\", 1);\n      var lx0;\n      var lx1;\n      var ly0;\n      var ly1;\n      var hx0;\n      var hx1;\n      var hy0;\n      var hy1;\n      var locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n      var locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n      var openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n      var openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n      var orientation;\n\n      if (yAxis === baseAxis) {\n        var open_1 = xAxis.getDataItemPositionX(dataItem, this._xOpenField, 1, vcx);\n        var close_1 = xAxis.getDataItemPositionX(dataItem, this._xField, 1, vcx);\n        lx1 = xAxis.getDataItemPositionX(dataItem, this._xLowField, 1, vcx);\n        hx1 = xAxis.getDataItemPositionX(dataItem, this._xHighField, 1, vcx);\n        hx0 = Math.max(open_1, close_1);\n        lx0 = Math.min(open_1, close_1);\n        var startLocation = this._aLocationY0 + openLocationY - 0.5;\n        var endLocation = this._aLocationY1 + locationY - 0.5;\n        ly0 = yAxis.getDataItemPositionY(dataItem, this._yField, startLocation + (endLocation - startLocation) / 2, vcy);\n        ly1 = ly0;\n        hy0 = ly0;\n        hy1 = ly0;\n        orientation = \"horizontal\";\n      } else {\n        var open_2 = yAxis.getDataItemPositionY(dataItem, this._yOpenField, 1, vcy);\n        var close_2 = yAxis.getDataItemPositionY(dataItem, this._yField, 1, vcy);\n        ly1 = yAxis.getDataItemPositionY(dataItem, this._yLowField, 1, vcy);\n        hy1 = yAxis.getDataItemPositionY(dataItem, this._yHighField, 1, vcy);\n        hy0 = Math.max(open_2, close_2);\n        ly0 = Math.min(open_2, close_2);\n        var startLocation = this._aLocationX0 + openLocationX - 0.5;\n        var endLocation = this._aLocationX1 + locationX - 0.5;\n        lx0 = xAxis.getDataItemPositionX(dataItem, this._xField, startLocation + (endLocation - startLocation) / 2, vcx);\n        lx1 = lx0;\n        hx0 = lx0;\n        hx1 = lx0;\n        orientation = \"vertical\";\n      }\n\n      this._updateCandleGraphics(dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation);\n    }\n  });\n  Object.defineProperty(CandlestickSeries.prototype, \"_updateCandleGraphics\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation) {\n      var column = dataItem.get(\"graphics\");\n\n      if (column) {\n        var pl0_1 = this.getPoint(lx0, ly0);\n        var pl1_1 = this.getPoint(lx1, ly1);\n        var ph0_1 = this.getPoint(hx0, hy0);\n        var ph1_1 = this.getPoint(hx1, hy1);\n        var x_1 = column.x();\n        var y_1 = column.y();\n        column.set(\"lowX0\", pl0_1.x - x_1);\n        column.set(\"lowY0\", pl0_1.y - y_1);\n        column.set(\"lowX1\", pl1_1.x - x_1);\n        column.set(\"lowY1\", pl1_1.y - y_1);\n        column.set(\"highX0\", ph0_1.x - x_1);\n        column.set(\"highY0\", ph0_1.y - y_1);\n        column.set(\"highX1\", ph1_1.x - x_1);\n        column.set(\"highY1\", ph1_1.y - y_1);\n        column.set(\"orientation\", orientation);\n        var rangeGraphics = dataItem.get(\"rangeGraphics\");\n\n        if (rangeGraphics) {\n          $array.each(rangeGraphics, function (column) {\n            column.set(\"lowX0\", pl0_1.x - x_1);\n            column.set(\"lowY0\", pl0_1.y - y_1);\n            column.set(\"lowX1\", pl1_1.x - x_1);\n            column.set(\"lowY1\", pl1_1.y - y_1);\n            column.set(\"highX0\", ph0_1.x - x_1);\n            column.set(\"highY0\", ph0_1.y - y_1);\n            column.set(\"highX1\", ph1_1.x - x_1);\n            column.set(\"highY1\", ph1_1.y - y_1);\n            column.set(\"orientation\", orientation);\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(CandlestickSeries.prototype, \"_processAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axisRange) {\n      var _this = this;\n\n      _super.prototype._processAxisRange.call(this, axisRange);\n\n      axisRange.columns = new ListTemplate(Template.new({}), function () {\n        return Candlestick._new(_this._root, {\n          themeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"candlestick\", \"series\", \"column\"])\n        }, [_this.columns.template, axisRange.columns.template]);\n      });\n    }\n  });\n  Object.defineProperty(CandlestickSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CandlestickSeries\"\n  });\n  Object.defineProperty(CandlestickSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: ColumnSeries.classNames.concat([CandlestickSeries.className])\n  });\n  return CandlestickSeries;\n}(ColumnSeries);\n\nexport { CandlestickSeries }; //# sourceMappingURL=CandlestickSeries.js.map","map":null,"metadata":{},"sourceType":"module"}