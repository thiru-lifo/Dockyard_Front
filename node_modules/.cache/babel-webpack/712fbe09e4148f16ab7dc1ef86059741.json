{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\nimport * as $array from \"../util/Array\";\n/**\r\n * @ignore Text is an internal class. Use Label instead.\r\n */\n\nvar Text =\n/** @class */\nfunction (_super) {\n  __extends(Text, _super);\n\n  function Text() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"textStyle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeTextStyle()\n    });\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeText(\"\", _this.textStyle)\n    });\n    Object.defineProperty(_this, \"_textStyles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"textDecoration\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\", // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\", //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\"]\n    });\n    Object.defineProperty(_this, \"_originalScale\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Text.prototype, \"_updateBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this.get(\"text\")) {\n        var newBounds = {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        };\n        this._adjustedLocalBounds = newBounds;\n      } else {\n        _super.prototype._updateBounds.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._changed.call(this);\n\n      this._display.clear();\n\n      var textStyle = this.textStyle;\n\n      if (this.isDirty(\"opacity\")) {\n        var opacity = this.get(\"opacity\", 1);\n        this._display.alpha = opacity;\n      }\n\n      if (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n        this._display.text = this._getText();\n        this.markDirtyBounds();\n\n        if (this.get(\"role\") == \"tooltip\") {\n          this._root.updateTooltip(this);\n        }\n      }\n\n      if (this.isDirty(\"width\")) {\n        textStyle.wordWrapWidth = this.width();\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"oversizedBehavior\")) {\n        textStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"breakWords\")) {\n        textStyle.breakWords = this.get(\"breakWords\", false);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"ellipsis\")) {\n        textStyle.ellipsis = this.get(\"ellipsis\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"ignoreFormatting\")) {\n        textStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"minScale\")) {\n        textStyle.minScale = this.get(\"minScale\", 0);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"fill\")) {\n        var fill = this.get(\"fill\");\n\n        if (fill) {\n          textStyle.fill = fill;\n        }\n      }\n\n      if (this.isDirty(\"fillOpacity\")) {\n        var fillOpacity = this.get(\"fillOpacity\", 1);\n\n        if (fillOpacity) {\n          textStyle.fillOpacity = fillOpacity;\n        }\n      }\n\n      if (this.isDirty(\"maxWidth\") || this.isPrivateDirty(\"maxWidth\")) {\n        textStyle.maxWidth = this.get(\"maxWidth\", this.getPrivate(\"maxWidth\"));\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"maxHeight\") || this.isPrivateDirty(\"maxHeight\")) {\n        textStyle.maxHeight = this.get(\"maxHeight\", this.getPrivate(\"maxHeight\"));\n        this.markDirtyBounds();\n      }\n\n      $array.each(this._textStyles, function (styleName) {\n        if (_this._dirty[styleName]) {\n          textStyle[styleName] = _this.get(styleName);\n\n          _this.markDirtyBounds();\n        }\n      });\n      textStyle[\"fontSize\"] = this.get(\"fontSize\");\n      textStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n      this._display.style = textStyle;\n\n      if (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_getText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var text = this.get(\"text\", \"\");\n      return this.get(\"populateText\") ? populateString(this, text) : text;\n    }\n  });\n  Object.defineProperty(Text.prototype, \"markDirtyText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._display.text = this._getText();\n\n      if (this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n\n      this.markDirtyBounds();\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n\n      if (this.get(\"populateText\")) {\n        this.markDirtyText();\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"getNumberFormatter\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.parent) {\n        return this.parent.getNumberFormatter();\n      } else {\n        return _super.prototype.getNumberFormatter.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"getDateFormatter\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.parent) {\n        return this.parent.getDateFormatter();\n      } else {\n        return _super.prototype.getDateFormatter.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"getDurationFormatter\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.parent) {\n        return this.parent.getDurationFormatter();\n      } else {\n        return _super.prototype.getDurationFormatter.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Text\"\n  });\n  Object.defineProperty(Text, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Text.className])\n  });\n  return Text;\n}(Sprite);\n\nexport { Text }; //# sourceMappingURL=Text.js.map","map":null,"metadata":{},"sourceType":"module"}