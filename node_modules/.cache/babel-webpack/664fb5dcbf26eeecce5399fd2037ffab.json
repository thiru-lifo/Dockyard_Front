{"ast":null,"code":"import { EventEmitter, Injectable, NgZone, NgModule } from '@angular/core';\nimport { HttpRequest, HttpClient } from '@angular/common/http';\nimport { KeepaliveSvc, NgIdleModule } from '@ng-idle/core';\n/**\n * An example of an injectable service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@ng-idle/core';\nlet Keepalive = /*#__PURE__*/(() => {\n  class Keepalive extends KeepaliveSvc {\n    /*\n     * Initializes a new instance of Keepalive\n     * @param http - The HTTP service.\n     */\n    constructor(http, zone) {\n      super();\n      this.http = http;\n      this.zone = zone;\n      this.pingInterval = 10 * 60;\n      /*\n       * An event emitted when the service is pinging.\n       */\n\n      this.onPing = new EventEmitter();\n      /*\n       * An event emitted when the service has pinged an HTTP endpoint and received a response.\n       */\n\n      this.onPingResponse = new EventEmitter();\n    }\n    /*\n     * Sets the string or Request that should be used when pinging.\n     * @param url - The URL or Request object to use when pinging.\n     * @return The current Request used when pinging.\n     */\n\n\n    request(url) {\n      if (typeof url === 'string') {\n        this.pingRequest = new HttpRequest('GET', url);\n      } else if (url instanceof HttpRequest) {\n        this.pingRequest = url;\n      } else if (url === null) {\n        this.pingRequest = null;\n      }\n\n      return this.pingRequest;\n    }\n    /*\n     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n     * @param seconds - The ping interval in seconds.\n     * @return The current interval value.\n     */\n\n\n    interval(seconds) {\n      if (!isNaN(seconds) && seconds > 0) {\n        this.pingInterval = seconds;\n      } else if (!isNaN(seconds) && seconds <= 0) {\n        throw new Error('Interval value must be greater than zero.');\n      }\n\n      return this.pingInterval;\n    }\n    /*\n     * Immediately performs the ping operation. If a request has been set, an HTTP\n     * request will be made and the response will be emitted via the\n     * onPingResponse event.\n     */\n\n\n    ping() {\n      this.onPing.emit(null);\n\n      if (this.pingRequest) {\n        this.http.request(this.pingRequest).subscribe(response => {\n          this.onPingResponse.emit(response);\n        }, error => {\n          this.onPingResponse.emit(error);\n        });\n      }\n    }\n    /*\n     * Starts pinging on an interval.\n     */\n\n\n    start() {\n      this.stop();\n      this.zone.runOutsideAngular(() => {\n        this.pingHandle = setInterval(() => {\n          this.zone.run(() => {\n            this.ping();\n          });\n        }, this.pingInterval * 1000);\n      });\n    }\n    /*\n     * Stops pinging on an interval.\n     */\n\n\n    stop() {\n      if (this.hasPingHandle()) {\n        clearInterval(this.pingHandle);\n        this.pingHandle = null;\n      }\n    }\n    /*\n     * Performs any cleanup tasks when Angular destroys the instance.\n     */\n\n\n    ngOnDestroy() {\n      this.stop();\n    }\n    /*\n     * Returns whether or not the service will ping automatically at the specified interval.\n     * @return True if the service will ping at the specified interval; otherwise, false.\n     */\n\n\n    isRunning() {\n      return this.hasPingHandle();\n    }\n\n    hasPingHandle() {\n      return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';\n    }\n\n  }\n\n  Keepalive.ɵfac = function Keepalive_Factory(t) {\n    return new (t || Keepalive)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  Keepalive.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Keepalive,\n    factory: Keepalive.ɵfac\n  });\n  return Keepalive;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgIdleKeepaliveModule = /*#__PURE__*/(() => {\n  class NgIdleKeepaliveModule {\n    static forRoot() {\n      return {\n        ngModule: NgIdleKeepaliveModule,\n        providers: [Keepalive, {\n          provide: KeepaliveSvc,\n          useExisting: Keepalive\n        }]\n      };\n    }\n\n  }\n\n  NgIdleKeepaliveModule.ɵfac = function NgIdleKeepaliveModule_Factory(t) {\n    return new (t || NgIdleKeepaliveModule)();\n  };\n\n  NgIdleKeepaliveModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgIdleKeepaliveModule\n  });\n  NgIdleKeepaliveModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[NgIdleModule.forRoot()]]\n  });\n  return NgIdleKeepaliveModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIdleKeepaliveModule, {\n    imports: [ɵngcc2.NgIdleModule]\n  });\n})();\n/*\n * Public API Surface of keepalive\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Keepalive, NgIdleKeepaliveModule }; //# sourceMappingURL=ng-idle-keepalive.js.map","map":null,"metadata":{},"sourceType":"module"}