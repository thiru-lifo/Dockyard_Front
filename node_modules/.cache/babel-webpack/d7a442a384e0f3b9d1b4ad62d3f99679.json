{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { LineSeries } from \"./LineSeries\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { curveStepAfter } from \"d3-shape\";\n\nvar StepLineSeries =\n/** @class */\nfunction (_super) {\n  __extends(StepLineSeries, _super);\n\n  function StepLineSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(StepLineSeries.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._setDefault(\"curveFactory\", curveStepAfter);\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(StepLineSeries.prototype, \"_getPoints\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, o) {\n      var points = o.points;\n      var width = this.get(\"stepWidth\", p100).value / 2;\n      var itemLocationX0 = dataItem.get(\"locationX\", o.locationX);\n      var itemLocationY0 = dataItem.get(\"locationY\", o.locationY);\n      var itemLocationX1 = itemLocationX0;\n      var itemLocationY1 = itemLocationY0;\n\n      if (o.baseAxis === o.xAxis) {\n        itemLocationX0 -= width;\n        itemLocationX1 += width;\n      } else if (o.baseAxis === o.yAxis) {\n        itemLocationY0 -= width;\n        itemLocationY1 += width;\n      }\n\n      var xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX0, o.vcx);\n      var yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY0, o.vcy);\n      var xPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX1, o.vcx);\n      var yPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY1, o.vcy);\n\n      if (this._shouldInclude(xPos0)) {\n        var iPoint0 = this.getPoint(xPos0, yPos0);\n        var point0 = [iPoint0.x, iPoint0.y];\n        var iPoint1 = this.getPoint(xPos1, yPos1);\n        var point1 = [iPoint1.x, iPoint1.y];\n\n        if (o.fillVisible) {\n          var xOpenPos0 = xPos0;\n          var yOpenPos0 = yPos0;\n          var xOpenPos1 = xPos1;\n          var yOpenPos1 = yPos1;\n\n          if (o.baseAxis === o.xAxis) {\n            yOpenPos0 = o.basePosY;\n            yOpenPos1 = o.basePosY;\n          } else if (o.baseAxis === o.yAxis) {\n            xOpenPos0 = o.basePosX;\n            xOpenPos1 = o.basePosX;\n          }\n\n          if (o.getOpen) {\n            var valueX = dataItem.get(o.xOpenField);\n            var valueY = dataItem.get(o.yOpenField);\n\n            if (valueX != null && valueY != null) {\n              itemLocationX0 = dataItem.get(\"openLocationX\", o.openLocationX);\n              itemLocationY0 = dataItem.get(\"openLocationY\", o.openLocationY);\n              itemLocationX1 = itemLocationX0;\n              itemLocationY1 = itemLocationY0;\n\n              if (o.baseAxis === o.xAxis) {\n                itemLocationX0 -= width;\n                itemLocationX1 += width;\n              } else if (o.baseAxis === o.yAxis) {\n                itemLocationY0 -= width;\n                itemLocationY1 += width;\n              }\n\n              if (o.stacked) {\n                var stackToItemX = dataItem.get(\"stackToItemX\");\n                var stackToItemY = dataItem.get(\"stackToItemY\");\n\n                if (stackToItemX) {\n                  xOpenPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX0, stackToItemX.component.get(\"vcx\"));\n                  xOpenPos1 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX1, stackToItemX.component.get(\"vcx\"));\n                } else {\n                  if (o.yAxis === o.baseAxis) {\n                    xOpenPos0 = o.basePosX;\n                    xOpenPos1 = o.basePosX;\n                  } else if (o.baseAxis === o.yAxis) {\n                    xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);\n                    xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);\n                  }\n                }\n\n                if (stackToItemY) {\n                  yOpenPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY0, stackToItemY.component.get(\"vcy\"));\n                  yOpenPos1 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY1, stackToItemY.component.get(\"vcy\"));\n                } else {\n                  if (o.xAxis === o.baseAxis) {\n                    yOpenPos0 = o.basePosY;\n                    yOpenPos1 = o.basePosY;\n                  } else if (o.baseAxis === o.yAxis) {\n                    yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);\n                    yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);\n                  }\n                }\n              } else {\n                xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);\n                yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);\n                xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);\n                yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);\n              }\n            }\n          }\n\n          var closeIPoint0 = this.getPoint(xOpenPos0, yOpenPos0);\n          var closeIPoint1 = this.getPoint(xOpenPos1, yOpenPos1);\n          point0[2] = closeIPoint0.x;\n          point0[3] = closeIPoint0.y;\n          point1[2] = closeIPoint1.x;\n          point1[3] = closeIPoint1.y;\n        }\n\n        points.push(point0);\n        points.push(point1);\n        dataItem.set(\"point\", {\n          x: point0[0] + (point1[0] - point0[0]) / 2,\n          y: point0[1] + (point1[1] - point0[1]) / 2\n        });\n      }\n\n      if (this.get(\"noRisers\")) {\n        o.points = [];\n        o.segments.push(points);\n      }\n    }\n  });\n  Object.defineProperty(StepLineSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"StepLineSeries\"\n  });\n  Object.defineProperty(StepLineSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: LineSeries.classNames.concat([StepLineSeries.className])\n  });\n  return StepLineSeries;\n}(LineSeries);\n\nexport { StepLineSeries }; //# sourceMappingURL=StepLineSeries.js.map","map":null,"metadata":{},"sourceType":"module"}