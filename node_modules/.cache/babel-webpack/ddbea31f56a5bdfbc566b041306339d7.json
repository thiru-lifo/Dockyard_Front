{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { userDetail } from 'src/environments/userDetail';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport * as CryptoJS from 'crypto-js';\nimport { Base64 } from 'js-base64';\nimport * as $ from 'jquery';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/service/notification.service\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, router, notification) {\n      this.http = http;\n      this.router = router;\n      this.notification = notification;\n      this.token = ''; //appLogo=localStorage.getItem('APPLOGO')?localStorage.getItem('APPLOGO'):'assets/images/logo.png';\n\n      this.appLogo = localStorage.getItem('APPLOGO') ? 'assets/images/load.gif' : 'assets/images/load.gif';\n      this.tmsToken = '';\n      this.userLoggedIn = new Subject();\n      let userDetails = localStorage.getItem('userDetail');\n      this.token = localStorage.getItem('access-token');\n      this.userid = this.decryptData(localStorage.getItem('token-detail'));\n\n      if (localStorage.getItem('tmsToken')) {\n        let tmsTokenDet = this.decryptData(localStorage.getItem('tmsToken'));\n        this.tmsToken = tmsTokenDet.token;\n      } else this.tmsToken = '';\n\n      if (userDetails) {\n        let user = this.decryptData(userDetails);\n        userDetail.loginname = user.loginname;\n        userDetail.password = user.password;\n      }\n    }\n\n    getToken(loginname, password) {\n      this.userid = this.decryptData(localStorage.getItem('token-detail'));\n      return new Observable(observer => {\n        this.http.post(environment.API_URL + 'api/auth/token', {\n          loginname: loginname,\n          password: password\n        }).subscribe(res => {\n          let response = JSON.parse(JSON.stringify(res));\n          let finalRes = {};\n\n          if (response.access) {\n            finalRes = {\n              status: 'success',\n              message: 'Credentials are matched',\n              access: response.access,\n              refresh: response.refresh\n            };\n            localStorage.setItem('access-token', response.access);\n            this.token = response.access;\n            finalRes = Object.assign(Object.assign({}, finalRes), response); // if((finalRes.role_id)) \n            //   this.getPrivileges(finalRes.role_id);\n            // console.log('finalres',finalRes.role_id);\n          }\n\n          observer.next(finalRes);\n        }, error => {\n          let finalRes = {\n            status: 'error',\n            message: 'Incorrect username/password'\n          };\n          observer.next(finalRes);\n          console.log(error);\n        });\n      });\n    }\n\n    getAPI(url) {\n      this.userid = this.decryptData(localStorage.getItem('token-detail'));\n      let tmsHeader = {};\n\n      if (this.tmsToken != '') {\n        tmsHeader = {\n          'X-Api-Key': this.tmsToken\n        };\n      }\n\n      return new Observable(observer => {\n        let headers = {\n          'Authorization': `Bearer ` + this.token,\n          'timeout': '6000',\n          'authorized-role': this.userid.role_code ? this.userid.role_code : '',\n          'authorized-by': this.userid.role_id ? this.userid.role_id.toString() : ''\n        };\n        headers = Object.assign(Object.assign({}, headers), tmsHeader);\n        let httpOptions = {\n          headers: new HttpHeaders(headers)\n        };\n        this.http.get(url, httpOptions).subscribe(res => {\n          observer.next(res);\n        }, error => {\n          if (error.status == 401) {\n            this.getToken(userDetail.loginname, userDetail.password).subscribe(res => {\n              this.getAPI(url).subscribe(res => {\n                observer.next(res);\n              });\n            });\n          } else observer.next(error);\n        });\n      });\n    }\n\n    postAPI(url, data, headerOptions = {}) {\n      this.userid = this.decryptData(localStorage.getItem('token-detail'));\n      let tmsHeader = {};\n\n      if (this.tmsToken != '') {\n        tmsHeader = {\n          'X-Api-Key': this.tmsToken\n        };\n      }\n\n      return new Observable(observer => {\n        let headers = {\n          'Authorization': `Bearer ` + this.token,\n          'timeout': '6000',\n          'authorized-role': this.userid.role_code ? this.userid.role_code : '',\n          'authorized-by': this.userid.role_id ? this.userid.role_id.toString() : ''\n        };\n        headers = Object.assign(Object.assign(Object.assign({}, headers), headerOptions), tmsHeader);\n        let httpOptions = {\n          headers: new HttpHeaders(headers)\n        };\n        this.http.post(url, data, httpOptions).subscribe(res => {\n          observer.next(res);\n        }, error => {\n          if (error.status == 401) {\n            this.getToken(userDetail.loginname, userDetail.password).subscribe(res => {\n              this.postAPI(url, data, headerOptions).subscribe(res => {\n                observer.next(res);\n              });\n            });\n          } else observer.next(error);\n        });\n      });\n    }\n\n    getPageAction() {\n      let data = localStorage.getItem('token-detail');\n\n      if (data) {\n        let access = this.decryptData(data);\n        let modules = JSON.parse(access.permissions); // console.log('modules',modules)\n\n        let components = modules.map(value => value.components);\n        let mergedComponents = [].concat.apply([], components);\n        let attributes = mergedComponents.map(value => value.attributes);\n        let mergedAttributes = [].concat.apply([], attributes);\n        let currentPath = this.router.url;\n        currentPath = currentPath.substring(1);\n        let currentPageActionAttr = mergedAttributes.map(value => value.url == currentPath ? value.action : '');\n        let currentPageAction = mergedComponents.map(value => value.url == currentPath ? value.action : '');\n        currentPageAction = currentPageAction.concat(currentPageActionAttr);\n        var filtered = currentPageAction.filter(function (el) {\n          return el != '';\n        }); // console.log('filtered',filtered);\n\n        let finalActions = filtered.length > 0 ? filtered[0] : '';\n\n        if (finalActions != '') {\n          let filterStatus = finalActions.map(value => value.status == true ? value : '');\n          var filteredStatus = filterStatus.filter(function (el) {\n            return el != '';\n          });\n          return filteredStatus;\n        } else return '';\n      }\n    }\n\n    secugenErrorString(ErrorCode) {\n      var Description;\n\n      switch (ErrorCode) {\n        // 0 - 999 - Comes from SgFplib.h\n        // 1,000 - 9,999 - SGIBioSrv errors \n        // 10,000 - 99,999 license errors\n        case 51:\n          Description = \"System file load failure\";\n          break;\n\n        case 52:\n          Description = \"Sensor chip initialization failed\";\n          break;\n\n        case 53:\n          Description = \"Device not found\";\n          break;\n\n        case 54:\n          Description = \"Fingerprint image capture timeout\";\n          break;\n\n        case 55:\n          Description = \"No device available\";\n          break;\n\n        case 56:\n          Description = \"Driver load failed\";\n          break;\n\n        case 57:\n          Description = \"Wrong Image\";\n          break;\n\n        case 58:\n          Description = \"Lack of bandwidth\";\n          break;\n\n        case 59:\n          Description = \"Device Busy\";\n          break;\n\n        case 60:\n          Description = \"Cannot get serial number of the device\";\n          break;\n\n        case 61:\n          Description = \"Unsupported device\";\n          break;\n\n        case 63:\n          Description = \"SgiBioSrv didn't start; Try image capture again\";\n          break;\n\n        default:\n          Description = \"Unknown error code or Update code to reflect latest result\";\n          break;\n      }\n\n      return Description;\n    }\n\n    encryptData(data) {\n      try {\n        return CryptoJS.AES.encrypt(JSON.stringify(data), environment.CRYPTO_KEY).toString();\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    decryptData(data) {\n      try {\n        const bytes = CryptoJS.AES.decrypt(data, environment.CRYPTO_KEY);\n\n        if (bytes.toString()) {\n          return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n        }\n\n        return data;\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    loggedIn() {\n      return !!localStorage.getItem('userDetail');\n    }\n\n    setUserLoggedIn(userLoggedIn) {\n      this.userLoggedIn.next(userLoggedIn);\n    }\n\n    getUserLoggedIn() {\n      return this.userLoggedIn.asObservable();\n    }\n\n    applicationLogoutLog() {\n      this.userid = this.decryptData(localStorage.getItem('token-detail'));\n      console.log('this.userid', this.userid);\n      this.postAPI(environment.API_URL + \"api/auth/logout\", {\n        user_id: this.userid.user_id\n      }).subscribe(res => {\n        this.notification.displayMessage(res.message);\n        localStorage.removeItem('userDetail');\n        localStorage.removeItem('token-detail');\n        this.router.navigateByUrl(localStorage.getItem('LOGINPAGE') ? localStorage.getItem('LOGINPAGE') : '/authenticate/login');\n      });\n    }\n\n    displayLoading(show = true) {\n      //this.appLogo = 'assets/images/loading.gif';\n      if (show) {\n        $('body').append(`<div class=\"body-load\">\n         <div class=\"loader-icon\">\n          <div class=\"loader\"><img src=\"` + this.appLogo + `\"></div>\n         </div>\n      </div>`);\n      } else {\n        $('.body-load').remove();\n      } //console.log(this.appLogo,\"HHHHHHHHHHH\")\n\n    }\n\n    getConfiguration(code = '') {\n      if (this.userid) {\n        if (this.userid.configuration) {\n          let config = this.userid.configuration.filter(config => {\n            return config.code == code;\n          });\n          return config[0].value;\n        }\n      }\n\n      return '';\n    }\n\n    encrypt(str, secret) {\n      str = Math.random().toString(36).substring(2, 10) + str;\n\n      var _strkey = Base64.decode(secret);\n\n      _strkey.split(\",\");\n\n      var text = CryptoJS.enc.Utf8.parse(str);\n      var Key = CryptoJS.enc.Base64.parse(_strkey.split(\",\")[1]); //secret key\n\n      var IV = CryptoJS.enc.Base64.parse(_strkey.split(\",\")[0]); //16 digit\n\n      var encryptedText = CryptoJS.AES.encrypt(text, Key, {\n        keySize: 128 / 8,\n        iv: IV,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7\n      });\n      var b64 = encryptedText.toString();\n      var e64 = CryptoJS.enc.Base64.parse(b64);\n      var eHex = e64.toLocaleString(CryptoJS.enc.Hex);\n      return eHex.toUpperCase();\n    }\n\n    decrypt(str, secret) {\n      try {\n        var _strkey = Base64.decode(secret);\n\n        var reb64 = CryptoJS.enc.Hex.parse(str);\n        var text = reb64.toString(CryptoJS.enc.Base64);\n        var Key = CryptoJS.enc.Base64.parse(_strkey.split(\",\")[1]); //secret key\n\n        var IV = CryptoJS.enc.Base64.parse(_strkey.split(\",\")[0]); //16 digit\n\n        var decryptedText = CryptoJS.AES.decrypt(text, Key, {\n          keySize: 128 / 8,\n          iv: IV,\n          mode: CryptoJS.mode.CBC,\n          padding: CryptoJS.pad.Pkcs7\n        });\n        return decryptedText.toString(CryptoJS.enc.Utf8); //binascii.unhexlify(decryptedText)\n      } catch (e) {\n        console.log(\"Error\", e);\n      }\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}