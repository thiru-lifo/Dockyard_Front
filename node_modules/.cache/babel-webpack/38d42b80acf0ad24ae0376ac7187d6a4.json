{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Series } from \"./Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * A universal legend control.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/} for more info\r\n */\n\nvar Legend =\n/** @class */\nfunction (_super) {\n  __extends(Legend, _super);\n\n  function Legend() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * List of all [[Container]] elements for legend items.\r\n     *\r\n     * @default new ListTemplate<Container>\r\n     */\n\n\n    Object.defineProperty(_this, \"itemContainers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Container._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\"]),\n          themeTagsSelf: $utils.mergeTags(_this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"]),\n          background: RoundedRectangle.new(_this._root, {\n            themeTags: $utils.mergeTags(_this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\", \"background\"]),\n            themeTagsSelf: $utils.mergeTags(_this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"])\n          })\n        }, [_this.itemContainers.template]);\n      })\n    });\n    /**\r\n     * List of legend marker elements.\r\n     *\r\n     * @default new ListTemplate<Container>\r\n     */\n\n    Object.defineProperty(_this, \"markers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Container._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.markers.template.get(\"themeTags\", []), [\"legend\", \"marker\"])\n        }, [_this.markers.template]);\n      })\n    });\n    /**\r\n     * List of legend label elements.\r\n     *\r\n     * @default new ListTemplate<Label>\r\n     */\n\n    Object.defineProperty(_this, \"labels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Label._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.labels.template.get(\"themeTags\", []), [\"legend\", \"label\"])\n        }, [_this.labels.template]);\n      })\n    });\n    /**\r\n     * List of legend value label elements.\r\n     *\r\n     * @default new ListTemplate<label>\r\n     */\n\n    Object.defineProperty(_this, \"valueLabels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Label._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.valueLabels.template.get(\"themeTags\", []), [\"legend\", \"label\", \"value\"])\n        }, [_this.valueLabels.template]);\n      })\n    });\n    /**\r\n     * List of rectangle elements used for default legend markers.\r\n     *\r\n     * @default new ListTemplate<RoundedRectangle>\r\n     */\n\n    Object.defineProperty(_this, \"markerRectangles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return RoundedRectangle._new(_this._root, {\n          themeTags: $utils.mergeTags(_this.markerRectangles.template.get(\"themeTags\", []), [\"legend\", \"marker\", \"rectangle\"])\n        }, [_this.markerRectangles.template]);\n      })\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Legend.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"legend\"]);\n      this.fields.push(\"name\", \"stroke\", \"fill\");\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Legend.prototype, \"makeItemContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var itemContainer = this.children.push(this.itemContainers.make());\n\n      itemContainer._setDataItem(dataItem);\n\n      this.itemContainers.push(itemContainer);\n      itemContainer.states.create(\"disabled\", {});\n      return itemContainer;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Legend.prototype, \"makeMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var marker = this.markers.make();\n      this.markers.push(marker);\n      marker.states.create(\"disabled\", {});\n      return marker;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Legend.prototype, \"makeLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var label = this.labels.make();\n      label.states.create(\"disabled\", {});\n      return label;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Legend.prototype, \"makeValueLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var valueLabel = this.valueLabels.make();\n      valueLabel.states.create(\"disabled\", {});\n      return valueLabel;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Legend.prototype, \"makeMarkerRectangle\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var markerRectangle = this.markerRectangles.make();\n      markerRectangle.states.create(\"disabled\", {});\n      return markerRectangle;\n    }\n  });\n  Object.defineProperty(Legend.prototype, \"processDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _this = this;\n\n      _super.prototype.processDataItem.call(this, dataItem);\n\n      var itemContainer = this.makeItemContainer(dataItem);\n      var nameField = this.get(\"nameField\");\n      var fillField = this.get(\"fillField\");\n      var strokeField = this.get(\"strokeField\");\n\n      if (itemContainer) {\n        var clickTarget = this.get(\"clickTarget\", \"itemContainer\");\n        var item_1 = dataItem.dataContext;\n\n        if (item_1 && item_1.set) {\n          item_1.set(\"legendDataItem\", dataItem);\n        }\n\n        itemContainer._setDataItem(dataItem);\n\n        dataItem.set(\"itemContainer\", itemContainer);\n        var marker = this.makeMarker();\n\n        if (marker) {\n          itemContainer.children.push(marker);\n\n          marker._setDataItem(dataItem);\n\n          dataItem.set(\"marker\", marker);\n          var useDefaultMarker = this.get(\"useDefaultMarker\");\n          var markerRectangle_1 = marker.children.push(this.makeMarkerRectangle());\n          var fill = dataItem.get(\"fill\");\n          var stroke = dataItem.get(\"stroke\");\n          dataItem.set(\"markerRectangle\", markerRectangle_1);\n\n          if (item_1 && item_1.get) {\n            fill = item_1.get(fillField, fill);\n            stroke = item_1.get(strokeField, stroke);\n          }\n\n          if (!stroke) {\n            stroke = fill;\n          }\n\n          if (!useDefaultMarker) {\n            if (item_1 && item_1.createLegendMarker) {\n              item_1.createLegendMarker();\n            }\n          } else {\n            if (item_1.on) {\n              item_1.on(fillField, function () {\n                markerRectangle_1.set(\"fill\", item_1.get(fillField));\n              });\n              item_1.on(strokeField, function () {\n                markerRectangle_1.set(\"stroke\", item_1.get(strokeField));\n              });\n            }\n          }\n\n          markerRectangle_1.setAll({\n            fill: fill,\n            stroke: stroke\n          }); // this solves if template field is set on slice\n\n          var component = item_1.component;\n\n          if (component && component.updateLegendMarker) {\n            component.updateLegendMarker(item_1);\n          }\n        }\n\n        var label_1 = this.makeLabel();\n\n        if (label_1) {\n          itemContainer.children.push(label_1);\n\n          label_1._setDataItem(dataItem);\n\n          dataItem.set(\"label\", label_1);\n          label_1.text.on(\"text\", function () {\n            itemContainer.set(\"ariaLabel\", label_1.text._getText() + \"; \" + _this._t(\"Press ENTER to toggle\"));\n          });\n\n          if (item_1 && item_1.get) {\n            dataItem.set(\"name\", item_1.get(nameField));\n          }\n\n          var name_1 = dataItem.get(\"name\");\n\n          if (name_1) {\n            label_1.set(\"text\", name_1);\n          }\n        }\n\n        var valueLabel = this.makeValueLabel();\n\n        if (valueLabel) {\n          itemContainer.children.push(valueLabel);\n\n          valueLabel._setDataItem(dataItem);\n\n          dataItem.set(\"valueLabel\", valueLabel);\n        }\n\n        if (item_1 && item_1.show) {\n          this._disposers.push(item_1.on(\"visible\", function (visible) {\n            itemContainer.set(\"disabled\", !visible);\n          }));\n\n          if (!item_1.get(\"visible\")) {\n            itemContainer.set(\"disabled\", true);\n          }\n\n          if (clickTarget != \"none\") {\n            var clickContainer = itemContainer;\n\n            if (clickTarget == \"marker\") {\n              clickContainer = marker;\n            }\n\n            this._addClickEvents(clickContainer, item_1, dataItem);\n          }\n        } // Sort children\n\n\n        this.children.values.sort(function (a, b) {\n          var targetA = a.dataItem.dataContext;\n          var targetB = b.dataItem.dataContext;\n\n          if (targetA && targetB) {\n            var indexA = _this.data.indexOf(targetA);\n\n            var indexB = _this.data.indexOf(targetB);\n\n            if (indexA > indexB) {\n              return 1;\n            } else if (indexA < indexB) {\n              return -1;\n            }\n          }\n\n          return 0;\n        });\n\n        if (item_1 && item_1.updateLegendValue) {\n          item_1.updateLegendValue();\n        }\n      }\n    }\n  });\n  Object.defineProperty(Legend.prototype, \"_addClickEvents\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container, item, dataItem) {\n      var _this = this;\n\n      container.set(\"cursorOverStyle\", \"pointer\");\n      container.events.on(\"pointerover\", function () {\n        var component = item.component;\n\n        if (component && component.hoverDataItem) {\n          component.hoverDataItem(item);\n        }\n      });\n      container.events.on(\"pointerout\", function () {\n        var component = item.component;\n\n        if (component && component.hoverDataItem) {\n          component.unhoverDataItem(item);\n        }\n      });\n      container.events.on(\"click\", function () {\n        var labelText = dataItem.get(\"label\").text._getText();\n\n        if (item.show && item.isHidden && (item.isHidden() || item.get(\"visible\") === false)) {\n          item.show();\n          container.set(\"disabled\", false);\n\n          _this._root.readerAlert(_this._t(\"%1 shown\", _this._root.locale, labelText));\n        } else if (item.hide) {\n          item.hide();\n          container.set(\"disabled\", true);\n\n          _this._root.readerAlert(_this._t(\"%1 hidden\", _this._root.locale, labelText));\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Legend.prototype, \"disposeDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype.disposeDataItem.call(this, dataItem);\n\n      var dataContext = dataItem.dataContext;\n\n      if (dataContext && dataContext.get) {\n        var di = dataContext.get(\"legendDataItem\");\n\n        if (di == dataItem) {\n          dataContext.set(\"legendDataItem\", undefined);\n        }\n      }\n\n      var itemContainer = dataItem.get(\"itemContainer\");\n\n      if (itemContainer) {\n        this.itemContainers.removeValue(itemContainer);\n        itemContainer.dispose();\n      }\n\n      var marker = dataItem.get(\"marker\");\n\n      if (marker) {\n        this.markers.removeValue(marker);\n        marker.dispose();\n      }\n\n      var markerRectangle = dataItem.get(\"markerRectangle\");\n\n      if (markerRectangle) {\n        this.markerRectangles.removeValue(markerRectangle);\n        markerRectangle.dispose();\n      }\n\n      var label = dataItem.get(\"label\");\n\n      if (label) {\n        this.labels.removeValue(label);\n        label.dispose();\n      }\n\n      var valueLabel = dataItem.get(\"valueLabel\");\n\n      if (valueLabel) {\n        this.valueLabels.removeValue(valueLabel);\n        valueLabel.dispose();\n      }\n    }\n  });\n  Object.defineProperty(Legend, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Legend\"\n  });\n  Object.defineProperty(Legend, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Series.classNames.concat([Legend.className])\n  });\n  return Legend;\n}(Series);\n\nexport { Legend }; //# sourceMappingURL=Legend.js.map","map":null,"metadata":{},"sourceType":"module"}