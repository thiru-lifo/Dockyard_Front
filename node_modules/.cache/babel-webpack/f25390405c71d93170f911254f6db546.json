{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A vertical children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar VerticalLayout =\n/** @class */\nfunction (_super) {\n  __extends(VerticalLayout, _super);\n\n  function VerticalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(VerticalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableHeight = container.innerHeight();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childHeight = child.get(\"height\");\n\n            if (childHeight instanceof Percent) {\n              totalPercent += childHeight.value;\n              var h = availableHeight * childHeight.value;\n              var minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n\n              if (minHeight > h) {\n                availableHeight -= minHeight;\n                totalPercent -= childHeight.value;\n              }\n\n              var maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n\n              if (h > maxHeight) {\n                availableHeight -= maxHeight;\n                totalPercent -= childHeight.value;\n              }\n            } else {\n              if (!$type.isNumber(childHeight)) {\n                childHeight = child.height();\n              }\n\n              availableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n            }\n          }\n        }\n      });\n\n      if (availableHeight < 0) {\n        availableHeight = 0.01;\n      } //if (availableHeight > 0) {\n\n\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childHeight = child.get(\"height\");\n\n            if (childHeight instanceof Percent) {\n              var privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n              var minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n              var maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n              privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n              child.setPrivate(\"height\", privateHeight);\n            }\n          }\n        }\n      }); //}\n\n      var prevY = paddingTop;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginTop = child.get(\"marginTop\", 0);\n            var top_1 = bounds.top;\n            var bottom = bounds.bottom;\n            var maxHeight = child.get(\"maxHeight\");\n\n            if (maxHeight) {\n              if (bottom - top_1 > maxHeight) {\n                bottom = top_1 + maxHeight;\n              }\n            }\n\n            var marginBottom = child.get(\"marginBottom\", 0);\n            var y = prevY + marginTop - top_1;\n            child.setPrivate(\"y\", y);\n            prevY = y + bottom + marginBottom;\n          } else {\n            child.setPrivate(\"y\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(VerticalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"VerticalLayout\"\n  });\n  Object.defineProperty(VerticalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([VerticalLayout.className])\n  });\n  return VerticalLayout;\n}(Layout);\n\nexport { VerticalLayout }; //# sourceMappingURL=VerticalLayout.js.map","map":null,"metadata":{},"sourceType":"module"}