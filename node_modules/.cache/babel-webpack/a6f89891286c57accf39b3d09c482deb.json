{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Linear gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\n\nvar LinearGradient =\n/** @class */\nfunction (_super) {\n  __extends(LinearGradient, _super);\n\n  function LinearGradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(LinearGradient.prototype, \"getFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      var rotation = this.get(\"rotation\", 0);\n      var bounds = this.getBounds(target);\n      var l = bounds.left || 0;\n      var r = bounds.right || 0;\n      var t = bounds.top || 0;\n      var b = bounds.bottom || 0;\n      var cos = $math.cos(rotation);\n      var sin = $math.sin(rotation);\n      var w = cos * (r - l);\n      var h = sin * (b - t);\n      var longer = Math.max(w, h);\n\n      var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);\n\n      var stops = this.get(\"stops\");\n\n      if (stops) {\n        var i_1 = 0;\n        $array.each(stops, function (stop) {\n          var offset = stop.offset;\n\n          if (!$type.isNumber(offset)) {\n            offset = i_1 / (stops.length - 1);\n          }\n\n          var opacity = stop.opacity;\n\n          if (!$type.isNumber(opacity)) {\n            opacity = 1;\n          }\n\n          var color = stop.color;\n\n          if (color) {\n            var lighten = stop.lighten;\n\n            if (lighten) {\n              color = Color.lighten(color, lighten);\n            }\n\n            var brighten = stop.brighten;\n\n            if (brighten) {\n              color = Color.brighten(color, brighten);\n            }\n\n            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n          }\n\n          i_1++;\n        });\n      }\n\n      return gradient;\n    }\n  });\n  Object.defineProperty(LinearGradient, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinearGradient\"\n  });\n  Object.defineProperty(LinearGradient, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Gradient.classNames.concat([LinearGradient.className])\n  });\n  return LinearGradient;\n}(Gradient);\n\nexport { LinearGradient }; //# sourceMappingURL=LinearGradient.js.map","map":null,"metadata":{},"sourceType":"module"}