{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Triangle =\n/** @class */\nfunction (_super) {\n  __extends(Triangle, _super);\n\n  function Triangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Triangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear && !this.get(\"draw\")) {\n        this._draw();\n      }\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var w = this.width();\n      var h = this.height();\n      var display = this._display;\n      display.moveTo(-w / 2, h / 2);\n      display.lineTo(0, -h / 2);\n      display.lineTo(w / 2, h / 2);\n      display.lineTo(-w / 2, h / 2);\n      display.closePath();\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.markDirty();\n      this._clear = true;\n    }\n  });\n  Object.defineProperty(Triangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Triangle\"\n  });\n  Object.defineProperty(Triangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Triangle.className])\n  });\n  return Triangle;\n}(Graphics);\n\nexport { Triangle }; //# sourceMappingURL=Triangle.js.map","map":null,"metadata":{},"sourceType":"module"}