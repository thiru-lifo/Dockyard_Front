{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Axis } from \"./Axis\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { populateString } from \"../../../core/util/PopulateString\";\n/**\r\n * Creates a category axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-axis/} for more info\r\n * @important\r\n */\n\nvar CategoryAxis =\n/** @class */\nfunction (_super) {\n  __extends(CategoryAxis, _super);\n\n  function CategoryAxis() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_frequency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_itemMap\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    return _this;\n  }\n\n  Object.defineProperty(CategoryAxis.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n      this.fields.push(\"category\");\n      this.setPrivateRaw(\"name\", \"category\");\n      this.addTag(\"category\");\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      var len = this.dataItems.length;\n      var i = 0;\n\n      if (this._valuesDirty) {\n        this._itemMap = {};\n        $array.each(this.dataItems, function (dataItem) {\n          dataItem.setRaw(\"index\", i);\n          _this._itemMap[dataItem.get(\"category\")] = dataItem;\n          i++;\n        });\n        this.setPrivateRaw(\"maxZoomFactor\", len);\n      }\n\n      this.setPrivateRaw(\"startIndex\", Math.max(Math.round(this.get(\"start\", 0) * len), 0));\n      this.setPrivateRaw(\"endIndex\", Math.min(Math.round(this.get(\"end\", 1) * len), len));\n\n      if (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"endIndex\") || this.isPrivateDirty(\"startIndex\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        if (this.dataItems.length > 0) {\n          this._handleRangeChange();\n\n          this._prepareAxisItems();\n\n          this._updateAxisRanges();\n        }\n      }\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"_handleRangeChange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $array.each(this.series, function (series) {\n        var startCategory = _this.dataItems[_this.startIndex()].get(\"category\");\n\n        var endCategory = _this.dataItems[_this.endIndex() - 1].get(\"category\");\n\n        var baseAxis = series.get(\"baseAxis\");\n        var xAxis = series.get(\"xAxis\");\n        var yAxis = series.get(\"yAxis\");\n\n        if (xAxis instanceof CategoryAxis && yAxis instanceof CategoryAxis) {\n          series._markDirtyAxes();\n        } else if (baseAxis === _this) {\n          var key = void 0;\n          var openKey = void 0;\n          var otherAxis = yAxis;\n\n          if (xAxis === baseAxis) {\n            if (series.get(\"categoryXField\")) {\n              key = \"categoryX\";\n            }\n\n            if (series.get(\"openCategoryXField\")) {\n              openKey = \"openCategoryX\";\n            }\n          } else if (yAxis === baseAxis) {\n            if (series.get(\"categoryYField\")) {\n              key = \"categoryY\";\n            }\n\n            if (series.get(\"openCategoryYField\")) {\n              openKey = \"openCategoryY\";\n            }\n\n            otherAxis = xAxis;\n          }\n\n          if (otherAxis.className == \"ValueAxis\") {\n            if (key || openKey) {\n              var startDataItem = void 0;\n              var endDataItem = void 0;\n\n              for (var i = 0, len = series.dataItems.length; i < len; i++) {\n                var dataItem = series.dataItems[i];\n\n                if (key) {\n                  if (dataItem.get(key) === startCategory) {\n                    startDataItem = dataItem;\n                    break;\n                  }\n                }\n\n                if (openKey) {\n                  if (dataItem.get(openKey) === startCategory) {\n                    startDataItem = dataItem;\n                    break;\n                  }\n                }\n              }\n\n              for (var i = series.dataItems.length - 1; i >= 0; i--) {\n                var dataItem = series.dataItems[i];\n\n                if (key) {\n                  if (dataItem.get(key) === endCategory) {\n                    endDataItem = dataItem;\n                    break;\n                  }\n                }\n\n                if (openKey) {\n                  if (dataItem.get(openKey) === endCategory) {\n                    endDataItem = dataItem;\n                    break;\n                  }\n                }\n              }\n\n              var startIndex = 0;\n              var endIndex = series.dataItems.length;\n\n              if (startDataItem) {\n                startIndex = series.dataItems.indexOf(startDataItem);\n              }\n\n              if (endDataItem) {\n                endIndex = series.dataItems.indexOf(endDataItem) + 1;\n              }\n\n              series.setPrivate(\"startIndex\", startIndex);\n              series.setPrivate(\"endIndex\", endIndex);\n              var hasValue_1 = false;\n\n              var _loop_1 = function (i) {\n                var dataItem = series.dataItems[i];\n                $array.each(series.__valueXShowFields, function (key) {\n                  var value = dataItem.get(key);\n\n                  if (value != null) {\n                    hasValue_1 = true;\n                  }\n                });\n                $array.each(series.__valueYShowFields, function (key) {\n                  var value = dataItem.get(key);\n\n                  if (value != null) {\n                    hasValue_1 = true;\n                  }\n                });\n\n                if (hasValue_1) {\n                  return \"break\";\n                }\n              };\n\n              for (var i = startIndex; i < endIndex; i++) {\n                var state_1 = _loop_1(i);\n\n                if (state_1 === \"break\") break;\n              }\n\n              series.setPrivate(\"outOfSelection\", !hasValue_1);\n            }\n          }\n\n          series._markDirtyAxes(); // must be outside\n\n        }\n      });\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"_prepareAxisItems\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var renderer = this.get(\"renderer\");\n      var len = this.dataItems.length;\n      var startIndex = this.startIndex();\n\n      if (startIndex > 0) {\n        startIndex--;\n      }\n\n      var endIndex = this.endIndex();\n\n      if (endIndex < len) {\n        endIndex++;\n      }\n\n      var maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\"), 1 / Number.MAX_SAFE_INTEGER);\n      var frequency = Math.max(1, Math.min(len, Math.ceil((endIndex - startIndex) / maxCount)));\n      startIndex = Math.floor(startIndex / frequency) * frequency;\n      this._frequency = frequency;\n\n      for (var j = 0; j < len; j++) {\n        this.dataItems[j].hide();\n      }\n\n      var f = this.dataItems[startIndex].get(\"index\", 0);\n\n      for (var i = startIndex; i < endIndex; i = i + frequency) {\n        var dataItem = this.dataItems[i];\n\n        this._createAssets(dataItem, []);\n\n        if (dataItem.isHidden()) {\n          dataItem.show();\n        }\n\n        this._prepareDataItem(dataItem, f, frequency);\n\n        f++;\n      }\n\n      this._updateGhost();\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"_prepareDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, fillIndex, count) {\n      var renderer = this.get(\"renderer\");\n      var categoryLocation = dataItem.get(\"categoryLocation\", 0);\n      var endCategoryLocation = dataItem.get(\"endCategoryLocation\", 1);\n      var index = dataItem.get(\"index\");\n\n      if (!$type.isNumber(index)) {\n        index = this.categoryToIndex(dataItem.get(\"category\"));\n      }\n\n      var position = this.indexToPosition(index, categoryLocation);\n      var endCategory = dataItem.get(\"endCategory\");\n      var endIndex;\n\n      if (endCategory) {\n        endIndex = this.categoryToIndex(endCategory);\n\n        if (!$type.isNumber(endIndex)) {\n          endIndex = index;\n        }\n      } else {\n        endIndex = index;\n      }\n\n      var endPosition = this.indexToPosition(endIndex, endCategoryLocation);\n      var fillEndIndex;\n      var fillEndPosition;\n\n      if (dataItem.get(\"isRange\")) {\n        fillEndIndex = endIndex;\n      } else {\n        fillEndIndex = index + this._frequency - 1;\n      }\n\n      fillEndPosition = this.indexToPosition(fillEndIndex, endCategoryLocation);\n      renderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n      renderer.updateGrid(dataItem.get(\"grid\"), position, endPosition);\n      renderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n      renderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\n      this._processBullet(dataItem);\n\n      renderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n      var fillRule = this.get(\"fillRule\");\n\n      if (fillRule) {\n        fillRule(dataItem, fillIndex);\n      }\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"startIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var len = this.dataItems.length;\n      return Math.min(Math.max(this.getPrivate(\"startIndex\", 0), 0), len - 1);\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"endIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var len = this.dataItems.length;\n      return Math.max(1, Math.min(this.getPrivate(\"endIndex\", len), len));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"baseValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"basePosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return 0;\n    }\n  });\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific category index.\r\n   *\r\n   * @param   value  Index\r\n   * @return         X coordinate\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var axisDataItem = this._itemMap[value];\n\n      if (axisDataItem) {\n        return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get(\"index\", 0)));\n      }\n\n      return NaN;\n    }\n  });\n  /**\r\n   * Returns Y coordinate in pixels corresponding to specific category index.\r\n   *\r\n   * @param   value  Index\r\n   * @return         Y coordinate\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var axisDataItem = this._itemMap[value];\n\n      if (axisDataItem) {\n        return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get(\"index\", 0)));\n      }\n\n      return NaN;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getDataItemPositionX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, cellLocation, _axisLocation) {\n      var category = dataItem.get(field);\n      var axisDataItem = this._itemMap[category];\n\n      if (axisDataItem) {\n        return this.indexToPosition(axisDataItem.get(\"index\", 0), cellLocation);\n      }\n\n      return NaN;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getDataItemCoordinateX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, cellLocation, _axisLocation) {\n      return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, _axisLocation));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getDataItemPositionY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, cellLocation, _axisLocation) {\n      var category = dataItem.get(field);\n      var axisDataItem = this._itemMap[category];\n\n      if (axisDataItem) {\n        return this.indexToPosition(axisDataItem.get(\"index\", 0), cellLocation);\n      }\n\n      return NaN;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getDataItemCoordinateY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, cellLocation, _axisLocation) {\n      return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, _axisLocation));\n    }\n  });\n  /**\r\n   * Converts category index to a relative position.\r\n   *\r\n   * `location` indicates relative position within category: 0 - start, 1 - end.\r\n   *\r\n   * If not set, will use middle (0.5) of the category.\r\n   *\r\n   * @param   index     Index\r\n   * @param   location  Location\r\n   * @return            Index\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"indexToPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, location) {\n      if (!$type.isNumber(location)) {\n        location = 0.5;\n      }\n\n      var len = this.dataItems.length;\n      var startLocation = this.get(\"startLocation\", 0);\n      var endLocation = this.get(\"endLocation\", 1);\n      len -= startLocation;\n      len -= 1 - endLocation;\n      var position = (index + location - startLocation) / len;\n      var dataItem = this.dataItems[index];\n\n      if (dataItem) {\n        position += dataItem.get(\"deltaPosition\", 0);\n      }\n\n      return position;\n    }\n  });\n  /**\r\n   * Returns an index of a category.\r\n   *\r\n   * @param   category  Category to look up\r\n   * @return            Index\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"categoryToIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (category) {\n      var dataItem = this._itemMap[category];\n\n      if (dataItem) {\n        return dataItem.get(\"index\");\n      }\n\n      return NaN;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"dataItemToPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      return this.indexToPosition(dataItem.get(\"index\"));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"roundAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position, location) {\n      position += (0.5 - location) / this.dataItems.length;\n      return this.indexToPosition(this.axisPositionToIndex(position), location);\n    }\n  });\n  /**\r\n   * Returns an index of the category that corresponds to specific pixel\r\n   * position within axis.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Category index\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"axisPositionToIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var len = this.dataItems.length;\n      return $math.fitToRange(Math.floor(position * len), 0, len - 1); //$math.fitToRange(Math.floor((end - start) * len * position + len * start), 0, len - 1);\n    }\n  });\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getTooltipText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      //@todo number formatter + tag\n      var dataItem = this.dataItems[this.axisPositionToIndex(position)];\n\n      if (dataItem) {\n        var label = dataItem.get(\"label\");\n\n        if (label) {\n          return populateString(label, this.get(\"tooltipText\", \"\"));\n        }\n      }\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"_updateTooltipText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tooltip, position) {\n      tooltip._setDataItem(this.dataItems[this.axisPositionToIndex(position)]);\n\n      tooltip.label.text.markDirtyText();\n    }\n  });\n  /**\r\n   * Returns a data item from series that is closest to the `position`.\r\n   *\r\n   * @param   series    Series\r\n   * @param   position  Relative position\r\n   * @return            Data item\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getSeriesItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series, position) {\n      if (this.dataItems.length > 0) {\n        var fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n        var index = this.axisPositionToIndex(position); // try simple first\n\n        var seriesDataItem = series.dataItems[index];\n        var axisDataItem = this.dataItems[index];\n        var category = axisDataItem.get(\"category\");\n\n        if (seriesDataItem && axisDataItem) {\n          if (seriesDataItem.get(fieldName) === category) {\n            return seriesDataItem;\n          }\n        } // if not found, try looking\n\n\n        for (var i = 0, len = series.dataItems.length; i < len; i++) {\n          var dataItem = series.dataItems[i];\n\n          if (dataItem.get(fieldName) === category) {\n            return dataItem;\n          }\n        }\n      }\n    }\n  });\n  /**\r\n   * Zooms the axis to specific `start` and `end` indexes.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start index\r\n   * @param  end       End index\r\n   * @param  duration  Duration in milliseconds\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"zoomToIndexes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (start, end, duration) {\n      var len = this.dataItems.length;\n      this.zoom(start / len, end / len, duration);\n    }\n  });\n  Object.defineProperty(CategoryAxis.prototype, \"zoomToCategories\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (startCategory, endCategory, duration) {\n      this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1, duration);\n    }\n  });\n  /**\r\n   * Returns position span between start and end of a single cell in axis.\r\n   *\r\n   * @since 5.2.30\r\n   * @return Position\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(CategoryAxis.prototype, \"getCellWidthPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return 1 / this.dataItems.length * (this.get(\"end\", 1) - this.get(\"start\", 0));\n    }\n  });\n  Object.defineProperty(CategoryAxis, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CategoryAxis\"\n  });\n  Object.defineProperty(CategoryAxis, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Axis.classNames.concat([CategoryAxis.className])\n  });\n  return CategoryAxis;\n}(Axis);\n\nexport { CategoryAxis }; //# sourceMappingURL=CategoryAxis.js.map","map":null,"metadata":{},"sourceType":"module"}