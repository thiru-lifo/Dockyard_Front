{"ast":null,"code":"/** @ignore */\n\n/** */\nimport * as $array from \"./Array\";\nimport * as $utils from \"./Utils\";\n/**\r\n * @ignore\r\n */\n\nvar Native =\n/** @class */\nfunction () {\n  function Native() {\n    var _this = this;\n\n    Object.defineProperty(this, \"_observer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_targets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    this._observer = new ResizeObserver(function (entries) {\n      $array.each(entries, function (entry) {\n        $array.each(_this._targets, function (x) {\n          if (x.target === entry.target) {\n            x.callback();\n          }\n        });\n      });\n    });\n  }\n\n  Object.defineProperty(Native.prototype, \"addTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target, callback) {\n      this._observer.observe(target, {\n        box: \"border-box\"\n      });\n\n      this._targets.push({\n        target: target,\n        callback: callback\n      });\n    }\n  });\n  Object.defineProperty(Native.prototype, \"removeTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      this._observer.unobserve(target);\n\n      $array.keepIf(this._targets, function (x) {\n        return x.target !== target;\n      });\n    }\n  });\n  return Native;\n}();\n/**\r\n * @ignore\r\n */\n\n\nvar Raf =\n/** @class */\nfunction () {\n  function Raf() {\n    Object.defineProperty(this, \"_timer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_targets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n\n  Object.defineProperty(Raf.prototype, \"addTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target, callback) {\n      var _this = this;\n\n      if (this._timer === null) {\n        var lastTime_1 = null;\n\n        var loop_1 = function () {\n          var currentTime = Date.now();\n\n          if (lastTime_1 === null || currentTime > lastTime_1 + Raf.delay) {\n            lastTime_1 = currentTime;\n            $array.each(_this._targets, function (x) {\n              var newSize = x.target.getBoundingClientRect();\n\n              if (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n                x.size = newSize;\n                x.callback();\n              }\n            });\n          }\n\n          if (_this._targets.length === 0) {\n            _this._timer = null;\n          } else {\n            _this._timer = requestAnimationFrame(loop_1);\n          }\n        };\n\n        this._timer = requestAnimationFrame(loop_1);\n      } // We start off with fake bounds so that sensor always kicks in\n\n\n      var size = {\n        width: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        x: 0,\n        y: 0\n      };\n\n      this._targets.push({\n        target: target,\n        callback: callback,\n        size: size\n      });\n    }\n  });\n  Object.defineProperty(Raf.prototype, \"removeTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      $array.keepIf(this._targets, function (x) {\n        return x.target !== target;\n      });\n\n      if (this._targets.length === 0) {\n        if (this._timer !== null) {\n          cancelAnimationFrame(this._timer);\n          this._timer = null;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Raf, \"delay\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 200\n  });\n  return Raf;\n}();\n/**\r\n * @ignore\r\n */\n\n\nvar observer = null;\n/**\r\n * @ignore\r\n */\n\nfunction makeSensor() {\n  if (observer === null) {\n    if (typeof ResizeObserver !== \"undefined\") {\n      observer = new Native();\n    } else {\n      observer = new Raf();\n    }\n  }\n\n  return observer;\n}\n/**\r\n * @ignore\r\n */\n\n\nvar ResizeSensor =\n/** @class */\nfunction () {\n  function ResizeSensor(element, callback) {\n    Object.defineProperty(this, \"_sensor\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_element\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_listener\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    this._sensor = makeSensor();\n    this._element = element; // This is needed because we need to know when the window is zoomed\n\n    this._listener = $utils.onZoom(callback);\n\n    this._sensor.addTarget(element, callback);\n  }\n\n  Object.defineProperty(ResizeSensor.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ResizeSensor.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._sensor.removeTarget(this._element);\n\n        this._listener.dispose();\n      }\n    }\n  });\n  Object.defineProperty(ResizeSensor.prototype, \"sensor\", {\n    get: function () {\n      return this._sensor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ResizeSensor;\n}();\n\nexport { ResizeSensor }; //# sourceMappingURL=ResizeSensor.js.map","map":null,"metadata":{},"sourceType":"module"}