{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Series } from \"../../../core/render/Series\";\nimport { List } from \"../../../core/util/List\";\nimport { Container } from \"../../../core/render/Container\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $object from \"../../../core/util/Object\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * @ignore\r\n */\n\nfunction min(left, right) {\n  if (left == null) {\n    return right;\n  } else if (right == null) {\n    return left;\n  } else if (right < left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction max(left, right) {\n  if (left == null) {\n    return right;\n  } else if (right == null) {\n    return left;\n  } else if (right > left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * A base class for all XY chart series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/} for more info\r\n */\n\n\nvar XYSeries =\n/** @class */\nfunction (_super) {\n  __extends(XYSeries, _super);\n\n  function XYSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_xField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_yField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_xOpenField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_yOpenField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_xLowField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_xHighField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_yLowField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_yHighField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_axesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_stackDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_selectionProcessed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_dataSets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_mainContainerMask\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_x\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_y\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * A [[Container]] that us used to put series' elements in.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"mainContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Container.new(_this._root, {}))\n    });\n    /**\r\n     * A list of axis ranges that affect the series.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n     */\n\n    Object.defineProperty(_this, \"axisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    Object.defineProperty(_this, \"_skipped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_couldStackTo\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_reallyStackedTo\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_stackedSeries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_aLocationX0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_aLocationX1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_aLocationY0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_aLocationY1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_showBullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"valueXFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"valueX\", \"openValueX\", \"lowValueX\", \"highValueX\"]\n    });\n    Object.defineProperty(_this, \"valueYFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"valueY\", \"openValueY\", \"lowValueY\", \"highValueY\"]\n    });\n    Object.defineProperty(_this, \"_valueXFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_valueYFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // used for full min/max\n\n    Object.defineProperty(_this, \"_valueXShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_valueYShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // used for selection (uses working)\n\n    Object.defineProperty(_this, \"__valueXShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"__valueYShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_emptyDataItem\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new DataItem(_this, undefined, {})\n    });\n    Object.defineProperty(_this, \"_dataSetId\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_tooltipFieldX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_tooltipFieldY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(XYSeries.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this.fields.push(\"categoryX\", \"categoryY\", \"openCategoryX\", \"openCategoryY\");\n      this.valueFields.push(\"valueX\", \"valueY\", \"openValueX\", \"openValueY\", \"lowValueX\", \"lowValueY\", \"highValueX\", \"highValueY\");\n\n      this._setRawDefault(\"vcx\", 1);\n\n      this._setRawDefault(\"vcy\", 1); // this can't go to themes, as data might be parsed before theme\n\n\n      this._setRawDefault(\"valueXShow\", \"valueXWorking\");\n\n      this._setRawDefault(\"valueYShow\", \"valueYWorking\");\n\n      this._setRawDefault(\"openValueXShow\", \"openValueXWorking\");\n\n      this._setRawDefault(\"openValueYShow\", \"openValueYWorking\");\n\n      this._setRawDefault(\"lowValueXShow\", \"lowValueXWorking\");\n\n      this._setRawDefault(\"lowValueYShow\", \"lowValueYWorking\");\n\n      this._setRawDefault(\"highValueXShow\", \"highValueXWorking\");\n\n      this._setRawDefault(\"highValueYShow\", \"highValueYWorking\");\n\n      this._setRawDefault(\"lowValueXGrouped\", \"low\");\n\n      this._setRawDefault(\"lowValueYGrouped\", \"low\");\n\n      this._setRawDefault(\"highValueXGrouped\", \"high\");\n\n      this._setRawDefault(\"highValueYGrouped\", \"high\");\n\n      _super.prototype._afterNew.call(this);\n\n      this._settings.xAxis.series.push(this);\n\n      this._settings.yAxis.series.push(this);\n\n      this.set(\"maskContent\", true);\n\n      this._disposers.push(this.axisRanges.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          $array.each(change.oldValues, function (axisRange) {\n            _this._removeAxisRange(axisRange);\n          });\n        } else if (change.type === \"push\") {\n          _this._processAxisRange(change.newValue);\n        } else if (change.type === \"setIndex\") {\n          _this._processAxisRange(change.newValue);\n        } else if (change.type === \"insertIndex\") {\n          _this._processAxisRange(change.newValue);\n        } else if (change.type === \"removeIndex\") {\n          _this._removeAxisRange(change.oldValue);\n        } else if (change.type === \"moveIndex\") {\n          _this._processAxisRange(change.value);\n        } else {\n          throw new Error(\"Unknown IStreamEvent type\");\n        }\n      }));\n\n      if (!this.get(\"baseAxis\")) {\n        var xAxis = this.get(\"xAxis\");\n        var yAxis = this.get(\"yAxis\");\n\n        if (yAxis.isType(\"CategoryAxis\") || yAxis.isType(\"DateAxis\")) {\n          this.set(\"baseAxis\", yAxis);\n        } else {\n          this.set(\"baseAxis\", xAxis);\n        }\n      }\n\n      this.states.create(\"hidden\", {\n        opacity: 1,\n        visible: false\n      });\n\n      this._makeFieldNames();\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_processAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axisRange) {\n      var container = Container.new(this._root, {});\n      axisRange.container = container;\n      this.children.push(container);\n      axisRange.series = this;\n      var axisDataItem = axisRange.axisDataItem;\n      axisDataItem.setRaw(\"isRange\", true);\n      var axis = axisDataItem.component;\n\n      if (axis) {\n        axis._processAxisRange(axisDataItem, [\"range\", \"series\"]);\n\n        var bullet = axisDataItem.get(\"bullet\");\n\n        if (bullet) {\n          var sprite = bullet.get(\"sprite\");\n\n          if (sprite) {\n            sprite.setPrivate(\"visible\", false);\n          }\n        }\n\n        var axisFill = axisDataItem.get(\"axisFill\");\n\n        if (axisFill) {\n          container.set(\"mask\", axisFill);\n        }\n\n        axis._seriesAxisRanges.push(axisDataItem);\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_removeAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axisRange) {\n      var axisDataItem = axisRange.axisDataItem;\n      var axis = axisDataItem.component;\n      axis.disposeDataItem(axisDataItem);\n      $array.remove(axis._seriesAxisRanges, axisDataItem);\n      var container = axisRange.container;\n\n      if (container) {\n        container.dispose();\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_updateFields\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._updateFields.call(this);\n\n      this._valueXFields = [];\n      this._valueYFields = [];\n      this._valueXShowFields = [];\n      this._valueYShowFields = [];\n      this.__valueXShowFields = [];\n      this.__valueYShowFields = [];\n\n      if (this.valueXFields) {\n        $array.each(this.valueXFields, function (key) {\n          var field = _this.get(key + \"Field\");\n\n          if (field) {\n            _this._valueXFields.push(key);\n\n            var field_1 = _this.get(key + \"Show\");\n\n            _this.__valueXShowFields.push(field_1);\n\n            if (field_1.indexOf(\"Working\") != -1) {\n              _this._valueXShowFields.push(field_1.split(\"Working\")[0]);\n            } else {\n              _this._valueYShowFields.push(field_1);\n            }\n          }\n        });\n      }\n\n      if (this.valueYFields) {\n        $array.each(this.valueYFields, function (key) {\n          var field = _this.get(key + \"Field\");\n\n          if (field) {\n            _this._valueYFields.push(key);\n\n            var field_2 = _this.get(key + \"Show\");\n\n            _this.__valueYShowFields.push(field_2);\n\n            if (field_2.indexOf(\"Working\") != -1) {\n              _this._valueYShowFields.push(field_2.split(\"Working\")[0]);\n            } else {\n              _this._valueYShowFields.push(field_2);\n            }\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._dispose.call(this);\n\n      var chart = this.chart;\n\n      if (chart) {\n        chart.series.removeValue(this);\n      }\n\n      $array.removeFirst(this.get(\"xAxis\").series, this);\n      $array.removeFirst(this.get(\"yAxis\").series, this);\n    }\n  }); // TODO use  SelectKeys<this[\"_privateSettings\"], number | undefined>\n\n  Object.defineProperty(XYSeries.prototype, \"_min\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var newValue = min(this.getPrivate(key), value);\n      this.setPrivate(key, newValue);\n    }\n  }); // TODO use  SelectKeys<this[\"_privateSettings\"], number | undefined>\n\n  Object.defineProperty(XYSeries.prototype, \"_max\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var newValue = max(this.getPrivate(key), value);\n      this.setPrivate(key, newValue);\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_shouldMakeBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      if (!this.get(\"xAxis\").inited || !this.get(\"yAxis\").inited) {\n        return false;\n      }\n\n      if (dataItem.get(this._xField) != null && dataItem.get(this._yField) != null) {\n        return true;\n      }\n\n      return false;\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_makeFieldNames\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var xName = xAxis.getPrivate(\"name\");\n      var xCapName = $utils.capitalizeFirst(xName);\n      var yName = yAxis.getPrivate(\"name\");\n      var yCapName = $utils.capitalizeFirst(yName);\n      var xLetter = xAxis.get(\"renderer\").getPrivate(\"letter\");\n      var yLetter = yAxis.get(\"renderer\").getPrivate(\"letter\");\n      var open = \"open\";\n      var low = \"low\";\n      var high = \"high\";\n      var show = \"Show\";\n\n      if (xAxis.className === \"ValueAxis\") {\n        this._xField = this.get(xName + xLetter + show);\n        this._xOpenField = this.get(open + xCapName + xLetter + show);\n        this._xLowField = this.get(low + xCapName + xLetter + show);\n        this._xHighField = this.get(high + xCapName + xLetter + show);\n      } else {\n        this._xField = xName + xLetter;\n        this._xOpenField = open + xCapName + xLetter;\n        this._xLowField = low + xCapName + xLetter;\n        this._xHighField = high + xCapName + xLetter;\n      }\n\n      if (yAxis.className === \"ValueAxis\") {\n        this._yField = this.get(yName + yLetter + show);\n        this._yOpenField = this.get(open + yCapName + yLetter + show);\n        this._yLowField = this.get(low + yCapName + yLetter + show);\n        this._yHighField = this.get(high + yCapName + yLetter + show);\n      } else {\n        this._yField = yName + yLetter;\n        this._yOpenField = open + yCapName + yLetter;\n        this._yLowField = low + yCapName + yLetter;\n        this._yHighField = high + yCapName + yLetter;\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_fixVC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var baseAxis = this.get(\"baseAxis\");\n      var hiddenState = this.states.lookup(\"hidden\");\n      var sequencedInterpolation = this.get(\"sequencedInterpolation\");\n\n      if (hiddenState) {\n        var value = 0;\n\n        if (sequencedInterpolation) {\n          value = 0.999999999999; // makes animate, good for stacked\n        }\n\n        if (xAxis === baseAxis) {\n          hiddenState.set(\"vcy\", value);\n        } else if (yAxis === baseAxis) {\n          hiddenState.set(\"vcx\", value);\n        } else {\n          hiddenState.set(\"vcy\", value);\n          hiddenState.set(\"vcx\", value);\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_handleMaskBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.isDirty(\"maskBullets\")) {\n        this.bulletsContainer.set(\"maskContent\", this.get(\"maskBullets\"));\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"valueYShow\") || this.isDirty(\"valueXShow\" || this.isDirty(\"openValueYShow\") || this.isDirty(\"openValueXShow\") || this.isDirty(\"lowValueYShow\") || this.isDirty(\"lowValueXShow\") || this.isDirty(\"highValueYShow\") || this.isDirty(\"highValueXShow\"))) {\n        this._updateFields();\n\n        this._makeFieldNames();\n\n        this._valuesDirty = true;\n      }\n\n      this.set(\"width\", this.get(\"xAxis\").width());\n      this.set(\"height\", this.get(\"yAxis\").height());\n\n      this._handleMaskBullets();\n\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var baseAxis = this.get(\"baseAxis\");\n      var tooltipPositionX = this.get(\"tooltipPositionX\");\n      var tooltipFieldX;\n\n      switch (tooltipPositionX) {\n        case \"open\":\n          tooltipFieldX = this._xOpenField;\n          break;\n\n        case \"low\":\n          tooltipFieldX = this._xLowField;\n          break;\n\n        case \"high\":\n          tooltipFieldX = this._xHighField;\n          break;\n\n        default:\n          tooltipFieldX = this._xField;\n      }\n\n      this._tooltipFieldX = tooltipFieldX;\n      var tooltipPositionY = this.get(\"tooltipPositionY\");\n      var tooltipFieldY;\n\n      switch (tooltipPositionY) {\n        case \"open\":\n          tooltipFieldY = this._yOpenField;\n          break;\n\n        case \"low\":\n          tooltipFieldY = this._yLowField;\n          break;\n\n        case \"high\":\n          tooltipFieldY = this._yHighField;\n          break;\n\n        default:\n          tooltipFieldY = this._yField;\n      }\n\n      this._tooltipFieldY = tooltipFieldY;\n\n      if (this.isDirty(\"baseAxis\")) {\n        this._fixVC();\n      }\n\n      this.set(\"x\", xAxis.x() - $utils.relativeToValue(xAxis.get(\"centerX\", 0), xAxis.width()) - xAxis.parent.get(\"paddingLeft\", 0));\n      this.set(\"y\", yAxis.y() - $utils.relativeToValue(yAxis.get(\"centerY\", 0), yAxis.height()) - yAxis.parent.get(\"paddingTop\", 0));\n      this.bulletsContainer.set(\"y\", this.y());\n      this.bulletsContainer.set(\"x\", this.x());\n      var stacked = this.get(\"stacked\");\n\n      if (this.isDirty(\"stacked\")) {\n        if (stacked) {\n          if (this._valuesDirty && !this._dataProcessed) {} else {\n            this._stack();\n          }\n        } else {\n          this._unstack();\n        }\n      }\n\n      if (this._valuesDirty && !this._dataProcessed) {\n        this._dataProcessed = true;\n\n        if (stacked) {\n          this._stack();\n        }\n\n        $array.each(this.dataItems, function (dataItem) {\n          $array.each(_this._valueXShowFields, function (key) {\n            var value = dataItem.get(key);\n\n            if (value != null) {\n              if (stacked) {\n                value += _this.getStackedXValue(dataItem, key);\n              }\n\n              _this._min(\"minX\", value);\n\n              _this._max(\"maxX\", value);\n            }\n          });\n          $array.each(_this._valueYShowFields, function (key) {\n            var value = dataItem.get(key);\n\n            if (value != null) {\n              if (stacked) {\n                value += _this.getStackedYValue(dataItem, key);\n              }\n\n              _this._min(\"minY\", value);\n\n              _this._max(\"maxY\", value);\n            }\n          });\n          xAxis.processSeriesDataItem(dataItem, _this._valueXFields);\n          yAxis.processSeriesDataItem(dataItem, _this._valueYFields);\n        });\n        xAxis._seriesValuesDirty = true;\n        yAxis._seriesValuesDirty = true;\n\n        if (!this.get(\"ignoreMinMax\")) {\n          if (this.isPrivateDirty(\"minX\") || this.isPrivateDirty(\"maxX\")) {\n            xAxis.markDirtyExtremes();\n          }\n\n          if (this.isPrivateDirty(\"minY\") || this.isPrivateDirty(\"maxY\")) {\n            yAxis.markDirtyExtremes();\n          }\n        }\n\n        this._markStakedDirtyStack(); //this.updateLegendMarker(undefined); // causes legend marker to change color instantly when on\n\n\n        if (!this.get(\"tooltipDataItem\")) {\n          this.updateLegendValue(undefined);\n        }\n      }\n\n      if (this.isDirty(\"vcx\") || this.isDirty(\"vcy\")) {\n        this._markStakedDirtyStack();\n      }\n\n      if (!this._dataGrouped) {\n        xAxis._groupSeriesData(this);\n\n        yAxis._groupSeriesData(this);\n\n        this._dataGrouped = true;\n      }\n\n      if (this._valuesDirty || this.isPrivateDirty(\"startIndex\") || this.isPrivateDirty(\"endIndex\") || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._stackDirty) {\n        var startIndex = this.startIndex();\n        var endIndex = this.endIndex();\n        var minBulletDistance = this.get(\"minBulletDistance\", 0);\n\n        if (minBulletDistance > 0 && baseAxis) {\n          if (baseAxis.get(\"renderer\").axisLength() / (endIndex - startIndex) > minBulletDistance) {\n            this._showBullets = true;\n          } else {\n            this._showBullets = false;\n          }\n        }\n\n        if ((this._psi != startIndex || this._pei != endIndex || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._stackDirty || this._valuesDirty) && !this._selectionProcessed) {\n          this._selectionProcessed = true;\n          var vcx = this.get(\"vcx\", 1);\n          var vcy = this.get(\"vcy\", 1);\n          var stacked_1 = this.get(\"stacked\", false);\n          var outOfSelection = this.getPrivate(\"outOfSelection\");\n\n          if (baseAxis === xAxis) {\n            yAxis._calculateTotals();\n\n            this.setPrivateRaw(\"selectionMinY\", undefined);\n            this.setPrivateRaw(\"selectionMaxY\", undefined);\n\n            if (!outOfSelection) {\n              for (var i = startIndex; i < endIndex; i++) {\n                this.processYSelectionDataItem(this.dataItems[i], vcy, stacked_1);\n              }\n            } else {\n              yAxis.markDirtySelectionExtremes();\n            }\n          } else if (baseAxis === yAxis) {\n            xAxis._calculateTotals();\n\n            this.setPrivateRaw(\"selectionMinX\", undefined);\n            this.setPrivateRaw(\"selectionMaxX\", undefined);\n\n            if (!outOfSelection) {\n              for (var i = startIndex; i < endIndex; i++) {\n                this.processXSelectionDataItem(this.dataItems[i], vcx, stacked_1);\n              }\n            } else {\n              yAxis.markDirtySelectionExtremes();\n            }\n          }\n\n          if (baseAxis === xAxis) {\n            if (this.get(\"valueYShow\") !== \"valueYWorking\") {\n              var selectionMinY = this.getPrivate(\"selectionMinY\");\n\n              if (selectionMinY != null) {\n                this.setPrivateRaw(\"minY\", selectionMinY);\n                yAxis.markDirtyExtremes();\n              }\n\n              var selectionMaxY = this.getPrivate(\"selectionMaxY\");\n\n              if (selectionMaxY != null) {\n                this.setPrivateRaw(\"maxY\", selectionMaxY);\n                yAxis.markDirtyExtremes();\n              }\n            }\n          } else if (baseAxis === yAxis) {\n            if (this.get(\"valueXShow\") !== \"valueXWorking\") {\n              var selectionMinX = this.getPrivate(\"selectionMinX\");\n\n              if (selectionMinX != null) {\n                this.setPrivateRaw(\"minX\", selectionMinX);\n                yAxis.markDirtyExtremes();\n              }\n\n              var selectionMaxX = this.getPrivate(\"selectionMaxX\");\n\n              if (selectionMaxX != null) {\n                this.setPrivateRaw(\"maxX\", selectionMaxX);\n                xAxis.markDirtyExtremes();\n              }\n            }\n          }\n\n          if (this.isPrivateDirty(\"selectionMinX\") || this.isPrivateDirty(\"selectionMaxX\")) {\n            xAxis.markDirtySelectionExtremes();\n          }\n\n          if (this.isPrivateDirty(\"selectionMinY\") || this.isPrivateDirty(\"selectionMaxY\")) {\n            yAxis.markDirtySelectionExtremes();\n          } // this.updateLegendValue(undefined); flickers while panning\n\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_makeRangeMask\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      if (this.axisRanges.length > 0) {\n        var mainContainerMask_1 = this._mainContainerMask;\n\n        if (mainContainerMask_1 == null) {\n          mainContainerMask_1 = this.children.push(Graphics.new(this._root, {}));\n          this._mainContainerMask = mainContainerMask_1;\n          mainContainerMask_1.set(\"draw\", function (display, target) {\n            var parent = _this.parent;\n\n            if (parent) {\n              var w = _this._root.container.width();\n\n              var h = _this._root.container.height();\n\n              display.moveTo(-w, -h);\n              display.lineTo(-w, h * 2);\n              display.lineTo(w * 2, h * 2);\n              display.lineTo(w * 2, -h);\n              display.lineTo(-w, -h);\n\n              _this.axisRanges.each(function (axisRange) {\n                var fill = axisRange.axisDataItem.get(\"axisFill\");\n\n                if (parent) {\n                  if (fill) {\n                    var draw = fill.get(\"draw\");\n\n                    if (draw) {\n                      draw(display, target);\n                    }\n                  }\n                }\n              });\n            }\n\n            _this.mainContainer._display.mask = mainContainerMask_1._display;\n          });\n        }\n\n        mainContainerMask_1.markDirty();\n\n        mainContainerMask_1._markDirtyKey(\"fill\");\n      } else {\n        this.mainContainer._display.mask = null;\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this); // save for performance\n\n\n      this._x = this.x();\n      this._y = this.y();\n\n      this._makeRangeMask();\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_stack\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var chart = this.chart;\n\n      if (chart) {\n        var seriesIndex = chart.series.indexOf(this);\n        this._couldStackTo = [];\n\n        if (seriesIndex > 0) {\n          var series = void 0;\n\n          for (var i = seriesIndex - 1; i >= 0; i--) {\n            series = chart.series.getIndex(i);\n\n            if (series.get(\"xAxis\") === this.get(\"xAxis\") && series.get(\"yAxis\") === this.get(\"yAxis\") && series.className === this.className) {\n              this._couldStackTo.push(series);\n\n              if (!series.get(\"stacked\")) {\n                break;\n              }\n            }\n          }\n        }\n\n        this._stackDataItems();\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_unstack\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $object.each(this._reallyStackedTo, function (_key, value) {\n        delete value._stackedSeries[_this.uid];\n      });\n      this._reallyStackedTo = {};\n      $array.each(this.dataItems, function (dataItem) {\n        dataItem.setRaw(\"stackToItemY\", undefined);\n        dataItem.setRaw(\"stackToItemX\", undefined);\n      });\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_stackDataItems\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this; // this works only with the same number of data @todo: search by date/category?\n\n\n      var baseAxis = this.get(\"baseAxis\");\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var field;\n      var stackToItemKey;\n\n      if (baseAxis === xAxis) {\n        field = \"valueY\";\n        stackToItemKey = \"stackToItemY\";\n      } else if (baseAxis === yAxis) {\n        field = \"valueX\";\n        stackToItemKey = \"stackToItemX\";\n      }\n\n      var len = this._couldStackTo.length;\n      var index = 0;\n      var stackToNegative = this.get(\"stackToNegative\");\n      this._reallyStackedTo = {};\n      $array.each(this.dataItems, function (dataItem) {\n        for (var s = 0; s < len; s++) {\n          var stackToSeries = _this._couldStackTo[s];\n          var stackToItem = stackToSeries.dataItems[index];\n          var value = dataItem.get(field);\n\n          if (stackToItem) {\n            var stackValue = stackToItem.get(field);\n\n            if (stackToNegative) {\n              if ($type.isNumber(value)) {\n                if ($type.isNumber(stackValue)) {\n                  if (value >= 0 && stackValue >= 0) {\n                    dataItem.setRaw(stackToItemKey, stackToItem);\n                    _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;\n                    stackToSeries._stackedSeries[_this.uid] = _this;\n                    break;\n                  }\n\n                  if (value < 0 && stackValue < 0) {\n                    dataItem.setRaw(stackToItemKey, stackToItem);\n                    _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;\n                    stackToSeries._stackedSeries[_this.uid] = _this;\n                    break;\n                  }\n                }\n              } else {\n                break;\n              }\n            } else {\n              if ($type.isNumber(value) && $type.isNumber(stackValue)) {\n                dataItem.setRaw(stackToItemKey, stackToItem);\n                _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;\n                stackToSeries._stackedSeries[_this.uid] = _this;\n                break;\n              }\n            }\n          }\n        }\n\n        index++;\n      });\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"processXSelectionDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, vcx, stacked) {\n      var _this = this;\n\n      $array.each(this.__valueXShowFields, function (key) {\n        var value = dataItem.get(key);\n\n        if (value != null) {\n          if (stacked) {\n            value += _this.getStackedXValueWorking(dataItem, key);\n          }\n\n          _this._min(\"selectionMinX\", value);\n\n          _this._max(\"selectionMaxX\", value * vcx);\n        }\n      });\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"processYSelectionDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, vcy, stacked) {\n      var _this = this;\n\n      $array.each(this.__valueYShowFields, function (key) {\n        var value = dataItem.get(key);\n\n        if (value != null) {\n          if (stacked) {\n            value += _this.getStackedYValueWorking(dataItem, key);\n          }\n\n          _this._min(\"selectionMinY\", value);\n\n          _this._max(\"selectionMaxY\", value * vcy);\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"getStackedYValueWorking\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, key) {\n      var stackToItem = dataItem.get(\"stackToItemY\");\n\n      if (stackToItem) {\n        var stackedToSeries = stackToItem.component;\n        return stackToItem.get(key, 0) * stackedToSeries.get(\"vcy\", 1) + this.getStackedYValueWorking(stackToItem, key);\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"getStackedXValueWorking\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, key) {\n      var stackToItem = dataItem.get(\"stackToItemX\");\n\n      if (stackToItem) {\n        var stackedToSeries = stackToItem.component;\n        return stackToItem.get(key, 0) * stackedToSeries.get(\"vcx\", 1) + this.getStackedXValueWorking(stackToItem, key);\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"getStackedYValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, key) {\n      var stackToItem = dataItem.get(\"stackToItemY\");\n\n      if (stackToItem) {\n        return stackToItem.get(key, 0) + this.getStackedYValue(stackToItem, key);\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"getStackedXValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, key) {\n      var stackToItem = dataItem.get(\"stackToItemX\");\n\n      if (stackToItem) {\n        return stackToItem.get(key, 0) + this.getStackedXValue(stackToItem, key);\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"createLegendMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_dataItem) {\n      this.updateLegendMarker();\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_markDirtyAxes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._axesDirty = true;\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_markDataSetDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._afterDataChange();\n\n      this._valuesDirty = true;\n      this._dataProcessed = false;\n      this._aggregatesCalculated = false;\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_clearDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._clearDirty.call(this);\n\n      this._axesDirty = false;\n      this._selectionProcessed = false;\n      this._stackDirty = false;\n      this._dataProcessed = false;\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_positionBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (bullet) {\n      var sprite = bullet.get(\"sprite\");\n\n      if (sprite) {\n        var dataItem = sprite.dataItem;\n        var locationX = bullet.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n        var locationY = bullet.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n        var xAxis = this.get(\"xAxis\");\n        var yAxis = this.get(\"yAxis\");\n        var positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get(\"vcx\", 1));\n        var positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get(\"vcy\", 1));\n        var point = this.getPoint(positionX, positionY);\n        var left = dataItem.get(\"left\", point.x);\n        var right = dataItem.get(\"right\", point.x);\n        var top_1 = dataItem.get(\"top\", point.y);\n        var bottom = dataItem.get(\"bottom\", point.y);\n\n        if (this._shouldShowBullet(positionX, positionY)) {\n          if (!bullet.getPrivate(\"hidden\")) {\n            sprite.setPrivate(\"visible\", true);\n          } else {\n            sprite.setPrivate(\"visible\", false);\n          }\n\n          var w = right - left;\n          var h = bottom - top_1;\n\n          if (sprite.isType(\"Label\")) {\n            sprite.setPrivate(\"maxWidth\", Math.abs(w));\n            sprite.setPrivate(\"maxHeight\", Math.abs(h));\n          }\n\n          var x = left + w * locationX;\n          var y = bottom - h * locationY;\n          sprite.set(\"x\", x);\n          sprite.set(\"y\", y);\n        } else {\n          sprite.setPrivate(\"visible\", false);\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_shouldShowBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_positionX, _positionY) {\n      return this._showBullets;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"setDataSet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (id) {\n      if (this._dataSets[id]) {\n        this._handleDataSetChange();\n\n        this._dataItems = this._dataSets[id];\n\n        this._markDataSetDirty();\n\n        this._dataSetId = id;\n        var type = \"datasetchanged\";\n\n        if (this.events.isEnabled(type)) {\n          this.events.dispatch(type, {\n            type: type,\n            target: this,\n            id: id\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_handleDataSetChange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.bullets.length > 0) {\n        $array.each(this._dataItems, function (dataItem) {\n          var bullets = dataItem.bullets;\n\n          if (bullets) {\n            $array.each(bullets, function (bullet) {\n              var sprite = bullet.get(\"sprite\");\n\n              if (sprite) {\n                sprite.setPrivate(\"visible\", false);\n              }\n            });\n          }\n        });\n      }\n\n      this._selectionProcessed = false; // for totals to be calculated\n    }\n  });\n  /**\r\n   * Shows hidden series.\r\n   *\r\n   * @param   duration  Duration of animation in milliseconds\r\n   * @return            Animation promise\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"show\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this._fixVC();\n\n              promises = [];\n              promises.push(_super.prototype.show.call(this, duration).then(function () {\n                _this._isShowing = false;\n\n                var xAxis = _this.get(\"xAxis\");\n\n                var yAxis = _this.get(\"yAxis\");\n\n                var baseAxis = _this.get(\"baseAxis\");\n\n                if (yAxis !== baseAxis) {\n                  yAxis.markDirtySelectionExtremes();\n                }\n\n                if (xAxis !== baseAxis) {\n                  xAxis.markDirtySelectionExtremes();\n                }\n              }));\n              promises.push(this.bulletsContainer.show(duration));\n              promises.push(this._sequencedShowHide(true, duration));\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param   duration  Duration of animation in milliseconds\r\n   * @return            Animation promise\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"hide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this._fixVC();\n\n              promises = [];\n              promises.push(_super.prototype.hide.call(this, duration).then(function () {\n                _this._isHiding = false;\n              }));\n              promises.push(this.bulletsContainer.hide(duration));\n              promises.push(this._sequencedShowHide(false, duration));\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"showDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, easing;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];\n\n              if (!$type.isNumber(duration)) {\n                duration = this.get(\"stateAnimationDuration\", 0);\n              }\n\n              easing = this.get(\"stateAnimationEasing\");\n              $array.each(this._valueFields, function (key) {\n                promises.push(dataItem.animate({\n                  key: key + \"Working\",\n                  to: dataItem.get(key),\n                  duration: duration,\n                  easing: easing\n                }).waitForStop());\n              });\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"hideDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, hiddenState, easing, xAxis, yAxis, baseAxis, stacked, min_1, baseValue_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];\n              hiddenState = this.states.create(\"hidden\", {});\n\n              if (!$type.isNumber(duration)) {\n                duration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n              }\n\n              easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n              xAxis = this.get(\"xAxis\");\n              yAxis = this.get(\"yAxis\");\n              baseAxis = this.get(\"baseAxis\");\n              stacked = this.get(\"stacked\");\n\n              if (baseAxis === xAxis || !baseAxis) {\n                $array.each(this._valueYFields, function (key) {\n                  var min = yAxis.getPrivate(\"min\");\n                  var baseValue = yAxis.baseValue();\n\n                  if ($type.isNumber(min) && min > baseValue) {\n                    baseValue = min;\n                  }\n\n                  if (stacked) {\n                    baseValue = 0;\n                  }\n\n                  var value = dataItem.get(key);\n\n                  if (value != null) {\n                    promises.push(dataItem.animate({\n                      key: key + \"Working\",\n                      to: baseValue,\n                      duration: duration,\n                      easing: easing\n                    }).waitForStop());\n                  }\n                });\n              }\n\n              if (baseAxis === yAxis || !baseAxis) {\n                min_1 = xAxis.getPrivate(\"min\");\n                baseValue_1 = xAxis.baseValue();\n\n                if ($type.isNumber(min_1) && min_1 > baseValue_1) {\n                  baseValue_1 = min_1;\n                }\n\n                if (stacked) {\n                  baseValue_1 = 0;\n                }\n\n                $array.each(this._valueXFields, function (key) {\n                  var value = dataItem.get(key);\n\n                  if (value != null) {\n                    promises.push(dataItem.animate({\n                      key: key + \"Working\",\n                      to: baseValue_1,\n                      duration: duration,\n                      easing: easing\n                    }).waitForStop());\n                  }\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_markDirtyStack\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._stackDirty = true;\n      this.markDirty();\n\n      this._markStakedDirtyStack();\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_markStakedDirtyStack\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var stackedSeries = this._stackedSeries;\n\n      if (stackedSeries) {\n        $object.each(stackedSeries, function (_key, value) {\n          if (!value._stackDirty) {\n            value._markDirtyStack();\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_afterChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterChanged.call(this);\n\n      if (this._skipped) {\n        this._markDirtyAxes();\n\n        this._skipped = false;\n      }\n    }\n  });\n  /**\r\n   * Shows a tooltip for specific data item.\r\n   *\r\n   * @param  dataItem  Data item\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"showDataItemTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      this.updateLegendMarker(dataItem);\n      this.updateLegendValue(dataItem);\n      var tooltip = this.get(\"tooltip\");\n\n      if (tooltip) {\n        if (!this.isHidden()) {\n          tooltip._setDataItem(dataItem);\n\n          if (dataItem) {\n            var locationX = this.get(\"locationX\", 0);\n            var locationY = this.get(\"locationY\", 1);\n            var itemLocationX = dataItem.get(\"locationX\", locationX);\n            var itemLocationY = dataItem.get(\"locationY\", locationY);\n            var xAxis = this.get(\"xAxis\");\n            var yAxis = this.get(\"yAxis\");\n            var vcx = this.get(\"vcx\", 1);\n            var vcy = this.get(\"vcy\", 1);\n            var xPos = xAxis.getDataItemPositionX(dataItem, this._tooltipFieldX, this._aLocationX0 + (this._aLocationX1 - this._aLocationX0) * itemLocationX, vcx);\n            var yPos = yAxis.getDataItemPositionY(dataItem, this._tooltipFieldY, this._aLocationY0 + (this._aLocationY1 - this._aLocationY0) * itemLocationY, vcy);\n            var point = this.getPoint(xPos, yPos);\n            var show_1 = true;\n            $array.each(this._valueFields, function (field) {\n              if (dataItem.get(field) == null) {\n                show_1 = false;\n              }\n            });\n\n            if (show_1) {\n              var chart = this.chart;\n\n              if (chart && chart.inPlot(point)) {\n                tooltip.label.text.markDirtyText();\n                tooltip.set(\"tooltipTarget\", this._getTooltipTarget(dataItem));\n                tooltip.set(\"pointTo\", this._display.toGlobal({\n                  x: point.x,\n                  y: point.y\n                }));\n              } else {\n                tooltip._setDataItem(undefined);\n              }\n            } else {\n              tooltip._setDataItem(undefined);\n            }\n          }\n        } else {\n          this.hideTooltip();\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"hideTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var tooltip = this.get(\"tooltip\");\n\n      if (tooltip) {\n        tooltip.set(\"tooltipTarget\", this);\n      }\n\n      return _super.prototype.hideTooltip.call(this);\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_getTooltipTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      if (this.get(\"seriesTooltipTarget\") == \"bullet\") {\n        var bullets = dataItem.bullets;\n\n        if (bullets && bullets.length > 0) {\n          var bullet = bullets[0];\n          var sprite = bullet.get(\"sprite\");\n\n          if (sprite) {\n            return sprite;\n          }\n        }\n      }\n\n      return this;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"updateLegendValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var legendDataItem = this.get(\"legendDataItem\");\n\n      if (legendDataItem) {\n        var label = legendDataItem.get(\"label\");\n\n        if (label) {\n          var txt = \"\";\n\n          if (dataItem) {\n            label._setDataItem(dataItem);\n\n            txt = this.get(\"legendLabelText\", label.get(\"text\", this.get(\"name\", \"\")));\n          } else {\n            label._setDataItem(this._emptyDataItem);\n\n            txt = this.get(\"legendRangeLabelText\", this.get(\"legendLabelText\", label.get(\"text\", this.get(\"name\", \"\"))));\n          }\n\n          label.set(\"text\", txt);\n        }\n\n        var valueLabel = legendDataItem.get(\"valueLabel\");\n\n        if (valueLabel) {\n          var txt = \"\";\n\n          if (dataItem) {\n            valueLabel._setDataItem(dataItem);\n\n            txt = this.get(\"legendValueText\", valueLabel.get(\"text\", \"\"));\n          } else {\n            valueLabel._setDataItem(this._emptyDataItem);\n\n            txt = this.get(\"legendRangeValueText\", valueLabel.get(\"text\", \"\"));\n          }\n\n          valueLabel.set(\"text\", txt);\n        }\n      }\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_getItemReaderLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var text = \"X: {\" + this._xField;\n\n      if (this.get(\"xAxis\").isType(\"DateAxis\")) {\n        text += \".formatDate()\";\n      }\n\n      text += \"}; Y: {\" + this._yField;\n\n      if (this.get(\"yAxis\").isType(\"DateAxis\")) {\n        text += \".formatDate()\";\n      }\n\n      text += \"}\";\n      return text;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"getPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (positionX, positionY) {\n      var x = this.get(\"xAxis\").get(\"renderer\").positionToCoordinate(positionX);\n      var y = this.get(\"yAxis\").get(\"renderer\").positionToCoordinate(positionY); // if coordinate is super big, canvas fails to draw line, capping to some big number (won't make any visual difference)\n\n      var max = 999999999;\n\n      if (y < -max) {\n        y = -max;\n      }\n\n      if (y > max) {\n        y = max;\n      }\n\n      if (x < -max) {\n        x = -max;\n      }\n\n      if (x > max) {\n        x = max;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_shouldInclude\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_position) {\n      return true;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"handleCursorHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.hideTooltip();\n      this.updateLegendValue(undefined);\n      this.updateLegendMarker(undefined);\n    }\n  });\n  Object.defineProperty(XYSeries.prototype, \"_afterDataChange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterDataChange.call(this);\n\n      this.get(\"xAxis\")._markDirtyKey(\"start\");\n\n      this.get(\"yAxis\")._markDirtyKey(\"start\");\n\n      this.resetExtremes();\n    }\n  }); // todo description\n\n  Object.defineProperty(XYSeries.prototype, \"resetExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.setPrivate(\"selectionMinX\", undefined);\n      this.setPrivate(\"selectionMaxX\", undefined);\n      this.setPrivate(\"selectionMinY\", undefined);\n      this.setPrivate(\"selectionMaxY\", undefined);\n      this.setPrivate(\"minX\", undefined);\n      this.setPrivate(\"minY\", undefined);\n      this.setPrivate(\"maxX\", undefined);\n      this.setPrivate(\"maxY\", undefined);\n    }\n  });\n  /**\r\n   * Creates and returns an axis range object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n   * @param   axisDataItem  Axis data item\r\n   * @return                Axis range\r\n   */\n\n  Object.defineProperty(XYSeries.prototype, \"createAxisRange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (axisDataItem) {\n      return this.axisRanges.push({\n        axisDataItem: axisDataItem\n      });\n    }\n  });\n  Object.defineProperty(XYSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"XYSeries\"\n  });\n  Object.defineProperty(XYSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Series.classNames.concat([XYSeries.className])\n  });\n  return XYSeries;\n}(Series);\n\nexport { XYSeries }; //# sourceMappingURL=XYSeries.js.map","map":null,"metadata":{},"sourceType":"module"}