{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { XYSeries } from \"./XYSeries\";\nimport { Percent } from \"../../../core/util/Percent\";\nimport { visualSettings } from \"../../../core/render/Graphics\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\n/**\r\n * Base class for all \"column-based\" series\r\n */\n\nvar BaseColumnSeries =\n/** @class */\nfunction (_super) {\n  __extends(BaseColumnSeries, _super);\n\n  function BaseColumnSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_ph\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_pw\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(BaseColumnSeries.prototype, \"_makeGraphics\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (listTemplate, dataItem) {\n      return this.makeColumn(dataItem, listTemplate);\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_makeFieldNames\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._makeFieldNames.call(this);\n\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var categoryAxis = \"CategoryAxis\";\n      var valueAxis = \"ValueAxis\";\n\n      if (xAxis.isType(categoryAxis)) {\n        if (!this.get(\"openCategoryXField\")) {\n          this._xOpenField = this._xField;\n        }\n      }\n\n      if (xAxis.isType(valueAxis)) {\n        if (!this.get(\"openValueXField\")) {\n          this._xOpenField = this._xField;\n        }\n      }\n\n      if (yAxis.isType(categoryAxis)) {\n        if (!this.get(\"openCategoryYField\")) {\n          this._yOpenField = this._yField;\n        }\n      }\n\n      if (yAxis.isType(valueAxis)) {\n        if (!this.get(\"openValueYField\")) {\n          this._yOpenField = this._yField;\n        }\n      }\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var len = this.dataItems.length;\n      var startIndex = Math.max(0, this.startIndex() - 2);\n      var endIndex = Math.min(this.endIndex() + 2, len - 1);\n\n      if (xAxis.inited && yAxis.inited) {\n        for (var i = startIndex; i <= endIndex; i++) {\n          var dataItem = this.dataItems[i];\n\n          this._createGraphics(dataItem);\n        }\n      }\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var chart = this.chart;\n\n      if (chart) {\n        this._ph = chart.plotContainer.height();\n        this._pw = chart.plotContainer.width();\n      }\n\n      var xAxis = this.get(\"xAxis\");\n      var yAxis = this.get(\"yAxis\");\n      var baseAxis = this.get(\"baseAxis\");\n      var columnsTemplate = this.columns.template;\n\n      if (this.isDirty(\"fill\")) {\n        if (columnsTemplate.get(\"fill\") == null) {\n          columnsTemplate.set(\"fill\", this.get(\"fill\"));\n        }\n      }\n\n      if (this.isDirty(\"stroke\")) {\n        if (columnsTemplate.get(\"stroke\") == null) {\n          columnsTemplate.set(\"stroke\", this.get(\"stroke\"));\n        }\n      }\n\n      var index = 0;\n      var clusterCount = 0;\n      var i = 0;\n      $array.each(baseAxis.series, function (series) {\n        if (series instanceof BaseColumnSeries) {\n          var stacked = series.get(\"stacked\");\n\n          if (stacked && i == 0) {\n            clusterCount++;\n          }\n\n          if (!stacked && series.get(\"clustered\")) {\n            clusterCount++;\n          }\n        }\n\n        if (series === _this) {\n          index = clusterCount - 1;\n        }\n\n        i++;\n      });\n\n      if (!this.get(\"clustered\")) {\n        index = 0;\n        clusterCount = 1;\n      }\n\n      if (clusterCount === 0) {\n        clusterCount = 1;\n        index = 0;\n      }\n\n      var xRenderer = xAxis.get(\"renderer\");\n      var yRenderer = yAxis.get(\"renderer\");\n      var cellStartLocation = \"cellStartLocation\";\n      var cellEndLocation = \"cellEndLocation\";\n      var cellLocationX0 = xRenderer.get(cellStartLocation, 0);\n      var cellLocationX1 = xRenderer.get(cellEndLocation, 1);\n      var cellLocationY0 = yRenderer.get(cellStartLocation, 0);\n      var cellLocationY1 = yRenderer.get(cellEndLocation, 1);\n      this._aLocationX0 = cellLocationX0 + index / clusterCount * (cellLocationX1 - cellLocationX0);\n      this._aLocationX1 = cellLocationX0 + (index + 1) / clusterCount * (cellLocationX1 - cellLocationX0);\n      ;\n      this._aLocationY0 = cellLocationY0 + index / clusterCount * (cellLocationY1 - cellLocationY0);\n      this._aLocationY1 = cellLocationY0 + (index + 1) / clusterCount * (cellLocationY1 - cellLocationY0);\n\n      if (xAxis.inited && yAxis.inited) {\n        if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty) {\n          var len = this.dataItems.length;\n          var startIndex = Math.max(0, this.startIndex() - 2);\n          var endIndex = Math.min(this.endIndex() + 2, len - 1);\n\n          for (var i_1 = 0; i_1 < startIndex; i_1++) {\n            this._toggleColumn(this.dataItems[i_1], false);\n          }\n\n          var previous = this.dataItems[startIndex];\n\n          for (var i_2 = startIndex; i_2 <= endIndex; i_2++) {\n            var dataItem = this.dataItems[i_2];\n\n            if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n              previous = dataItem;\n\n              if (i_2 > 0 && startIndex > 0) {\n                for (var j = i_2 - 1; j >= 0; j--) {\n                  var dataItem_1 = this.dataItems[j];\n\n                  if (dataItem_1.get(\"valueX\") != null && dataItem_1.get(\"valueY\") != null) {\n                    previous = dataItem_1;\n                    break;\n                  }\n                }\n              }\n\n              break;\n            }\n          }\n\n          for (var i_3 = startIndex; i_3 <= endIndex; i_3++) {\n            var dataItem = this.dataItems[i_3];\n\n            this._updateGraphics(dataItem, previous);\n\n            if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n              previous = dataItem;\n            }\n          }\n\n          for (var i_4 = endIndex + 1; i_4 < len; i_4++) {\n            this._toggleColumn(this.dataItems[i_4], false);\n          }\n        }\n      } else {\n        this._skipped = true;\n      }\n\n      this.updateLegendMarker(this.get(\"tooltipDataItem\"));\n\n      _super.prototype._updateChildren.call(this);\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_createGraphics\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _this = this;\n\n      var graphics = dataItem.get(\"graphics\");\n\n      if (!graphics) {\n        graphics = this._makeGraphics(this.columns, dataItem);\n        dataItem.set(\"graphics\", graphics);\n\n        graphics._setDataItem(dataItem);\n\n        var legendDataItem = dataItem.get(\"legendDataItem\");\n\n        if (legendDataItem) {\n          var markerRectangle = legendDataItem.get(\"markerRectangle\");\n\n          if (markerRectangle) {\n            markerRectangle.setAll({\n              fill: graphics.get(\"fill\"),\n              stroke: graphics.get(\"stroke\")\n            });\n          }\n        }\n\n        this.axisRanges.each(function (axisRange) {\n          var container = axisRange.container;\n          var graphicsArray = dataItem.get(\"rangeGraphics\", []);\n          dataItem.set(\"rangeGraphics\", graphicsArray);\n\n          var rangeGraphics = _this._makeGraphics(axisRange.columns, dataItem);\n\n          graphicsArray.push(rangeGraphics);\n          rangeGraphics.setPrivate(\"list\", axisRange.columns);\n          container.children.push(rangeGraphics);\n        });\n      }\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_updateGraphics\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, previousDataItem) {\n      var _this = this;\n\n      var graphics = dataItem.get(\"graphics\"); //if (!graphics) {\n      //\tthis._createGraphics(dataItem);\n      //\tgraphics = dataItem.get(\"graphics\")!;\n      //}\n\n      var xField = this._xField;\n      var yField = this._yField;\n      var valueX = dataItem.get(xField);\n      var valueY = dataItem.get(yField);\n\n      if (valueX != null && valueY != null) {\n        var xOpenField = this._xOpenField;\n        var yOpenField = this._yOpenField;\n        var locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n        var locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n        var openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n        var openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n        var width = graphics.get(\"width\");\n        var height = graphics.get(\"height\");\n        var stacked = this.get(\"stacked\");\n        var xAxis = this.get(\"xAxis\");\n        var yAxis = this.get(\"yAxis\");\n        var baseAxis = this.get(\"baseAxis\");\n        var xStart = xAxis.get(\"start\");\n        var xEnd = xAxis.get(\"end\");\n        var yStart = yAxis.get(\"start\");\n        var yEnd = yAxis.get(\"end\");\n        var l_1;\n        var r_1;\n        var t_1;\n        var b_1;\n        var vcy = this.get(\"vcy\", 1);\n        var vcx = this.get(\"vcx\", 1);\n        var fitW_1 = false;\n        var fitH_1 = false;\n\n        if (yAxis.isType(\"CategoryAxis\") && xAxis.isType(\"CategoryAxis\")) {\n          var startLocation = this._aLocationX0 + openLocationX - 0.5;\n          var endLocation = this._aLocationX1 + locationX - 0.5;\n\n          if (width instanceof Percent) {\n            var offset = (endLocation - startLocation) * (1 - width.value) / 2;\n            startLocation += offset;\n            endLocation -= offset;\n          }\n\n          l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n          r_1 = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n          startLocation = this._aLocationY0 + openLocationY - 0.5;\n          endLocation = this._aLocationY1 + locationY - 0.5;\n\n          if (height instanceof Percent) {\n            var offset = (endLocation - startLocation) * (1 - height.value) / 2;\n            startLocation += offset;\n            endLocation -= offset;\n          }\n\n          t_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n          b_1 = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n          dataItem.setRaw(\"point\", {\n            x: l_1 + (r_1 - l_1) / 2,\n            y: t_1 + (b_1 - t_1) / 2\n          });\n        } else if (xAxis === baseAxis) {\n          var startLocation = this._aLocationX0 + openLocationX - 0.5;\n          var endLocation = this._aLocationX1 + locationX - 0.5;\n\n          if (width instanceof Percent) {\n            var offset = (endLocation - startLocation) * (1 - width.value) / 2;\n            startLocation += offset;\n            endLocation -= offset;\n          }\n\n          l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n          r_1 = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n          t_1 = yAxis.getDataItemPositionY(dataItem, yField, locationY, vcy);\n\n          if (this._yOpenField !== this._yField) {\n            b_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, openLocationY, vcy);\n          } else {\n            if (stacked) {\n              var stackToItemY = dataItem.get(\"stackToItemY\");\n\n              if (stackToItemY) {\n                b_1 = yAxis.getDataItemPositionY(stackToItemY, yField, openLocationY, stackToItemY.component.get(\"vcy\"));\n              } else {\n                b_1 = yAxis.basePosition();\n              }\n            } else {\n              b_1 = yAxis.basePosition();\n            }\n          }\n\n          dataItem.setRaw(\"point\", {\n            x: l_1 + (r_1 - l_1) / 2,\n            y: t_1\n          });\n          fitH_1 = true;\n        } else if (yAxis === baseAxis) {\n          var startLocation = this._aLocationY0 + openLocationY - 0.5;\n          var endLocation = this._aLocationY1 + locationY - 0.5;\n\n          if (height instanceof Percent) {\n            var offset = (endLocation - startLocation) * (1 - height.value) / 2;\n            startLocation += offset;\n            endLocation -= offset;\n          }\n\n          t_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n          b_1 = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n          r_1 = xAxis.getDataItemPositionX(dataItem, xField, locationX, vcx);\n\n          if (this._xOpenField !== this._xField) {\n            l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, openLocationX, vcx);\n          } else {\n            if (stacked) {\n              var stackToItemX = dataItem.get(\"stackToItemX\");\n\n              if (stackToItemX) {\n                l_1 = xAxis.getDataItemPositionX(stackToItemX, xField, openLocationX, stackToItemX.component.get(\"vcx\"));\n              } else {\n                l_1 = xAxis.basePosition();\n              }\n            } else {\n              l_1 = xAxis.basePosition();\n            }\n          }\n\n          fitW_1 = true;\n          dataItem.setRaw(\"point\", {\n            x: r_1,\n            y: t_1 + (b_1 - t_1) / 2\n          });\n        }\n\n        this._updateSeriesGraphics(dataItem, graphics, l_1, r_1, t_1, b_1, fitW_1, fitH_1);\n\n        if (l_1 < xStart && r_1 < xStart || l_1 > xEnd && r_1 > xEnd || t_1 < yStart && b_1 < yStart || t_1 > yEnd && b_1 > yEnd || $type.isNaN(l_1) || $type.isNaN(t_1)) {\n          this._toggleColumn(dataItem, false);\n        } else {\n          this._toggleColumn(dataItem, true);\n        }\n\n        var rangeGraphics = dataItem.get(\"rangeGraphics\");\n\n        if (rangeGraphics) {\n          $array.each(rangeGraphics, function (graphics) {\n            _this._updateSeriesGraphics(dataItem, graphics, l_1, r_1, t_1, b_1, fitW_1, fitH_1);\n          });\n        }\n\n        this._applyGraphicsStates(dataItem, previousDataItem);\n      }\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_updateSeriesGraphics\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, graphics, l, r, t, b, fitW, fitH) {\n      var width = graphics.get(\"width\");\n      var height = graphics.get(\"height\");\n      var maxWidth = graphics.get(\"maxWidth\");\n      var maxHeight = graphics.get(\"maxHeight\");\n      var ptl = this.getPoint(l, t);\n      var pbr = this.getPoint(r, b);\n      var tooltipPoint = dataItem.get(\"point\");\n\n      if (tooltipPoint) {\n        var point = this.getPoint(tooltipPoint.x, tooltipPoint.y);\n        tooltipPoint.x = point.x + this._x;\n        tooltipPoint.y = point.y + this._y;\n      }\n\n      l = ptl.x;\n      r = pbr.x;\n      t = ptl.y;\n      b = pbr.y;\n\n      if ($type.isNumber(width)) {\n        var offset = (r - l - width) / 2;\n        l += offset;\n        r -= offset;\n      }\n\n      if ($type.isNumber(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n\n      if ($type.isNumber(height)) {\n        var offset = (b - t - height) / 2;\n        t += offset;\n        b -= offset;\n      }\n\n      if ($type.isNumber(maxHeight) && maxHeight < Math.abs(b - t)) {\n        var offset = (b - t - maxHeight) / 2;\n        t += offset;\n        b -= offset;\n      }\n\n      if (this.get(\"adjustBulletPosition\")) {\n        if (fitW) {\n          r = Math.min(Math.max(0, r), this._pw);\n          l = Math.min(Math.max(0, l), this._pw);\n        }\n\n        if (fitH) {\n          t = Math.min(Math.max(0, t), this._ph);\n          b = Math.min(Math.max(0, b), this._ph);\n        }\n      }\n\n      dataItem.setRaw(\"left\", l);\n      dataItem.setRaw(\"right\", r);\n      dataItem.setRaw(\"top\", t);\n      dataItem.setRaw(\"bottom\", b);\n      graphics.setPrivate(\"width\", r - l);\n      graphics.setPrivate(\"height\", b - t);\n      graphics.set(\"x\", l);\n      graphics.set(\"y\", b - (b - t));\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_handleDataSetChange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._handleDataSetChange.call(this);\n\n      $array.each(this._dataItems, function (dataItem) {\n        _this._toggleColumn(dataItem, false);\n      });\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_applyGraphicsStates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, previousDataItem) {\n      var graphics = dataItem.get(\"graphics\");\n      var dropFromOpen = graphics.states.lookup(\"dropFromOpen\");\n      var riseFromOpen = graphics.states.lookup(\"riseFromOpen\");\n      var dropFromPrevious = graphics.states.lookup(\"dropFromPrevious\");\n      var riseFromPrevious = graphics.states.lookup(\"riseFromPrevious\");\n\n      if (dropFromOpen || dropFromPrevious || riseFromOpen || riseFromPrevious) {\n        var xAxis = this.get(\"xAxis\");\n        var yAxis = this.get(\"yAxis\");\n        var baseAxis = this.get(\"baseAxis\");\n        var open_1;\n        var close_1;\n        var previousClose = void 0;\n\n        if (baseAxis === xAxis && yAxis.isType(\"ValueAxis\")) {\n          open_1 = dataItem.get(this._yOpenField);\n          close_1 = dataItem.get(this._yField);\n          previousClose = previousDataItem.get(this._yField);\n        } else if (baseAxis === yAxis && xAxis.isType(\"ValueAxis\")) {\n          open_1 = dataItem.get(this._xOpenField);\n          close_1 = dataItem.get(this._xField);\n          previousClose = previousDataItem.get(this._xField);\n        }\n\n        if ($type.isNumber(open_1) && $type.isNumber(close_1)) {\n          if (close_1 < open_1) {\n            if (dropFromOpen) {\n              dropFromOpen.apply();\n            }\n          } else {\n            if (riseFromOpen) {\n              riseFromOpen.apply();\n            }\n          }\n\n          if ($type.isNumber(previousClose)) {\n            if (close_1 < previousClose) {\n              if (dropFromPrevious) {\n                dropFromPrevious.apply();\n              }\n            } else {\n              if (riseFromPrevious) {\n                riseFromPrevious.apply();\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(BaseColumnSeries.prototype, \"disposeDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype.disposeDataItem.call(this, dataItem);\n\n      var graphics = dataItem.get(\"graphics\");\n\n      if (graphics) {\n        this.columns.removeValue(graphics);\n        graphics.dispose();\n      }\n\n      var rangeGraphics = dataItem.get(\"rangeGraphics\");\n\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, function (graphics) {\n          var list = graphics.getPrivate(\"list\");\n\n          if (list) {\n            list.removeValue(graphics);\n          }\n\n          graphics.dispose();\n        });\n      }\n    }\n  });\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(BaseColumnSeries.prototype, \"hideDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, graphics, rangeGraphics;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];\n              graphics = dataItem.get(\"graphics\");\n\n              if (graphics) {\n                promises.push(graphics.hide(duration));\n              }\n\n              rangeGraphics = dataItem.get(\"rangeGraphics\");\n\n              if (rangeGraphics) {\n                $array.each(rangeGraphics, function (graphics) {\n                  promises.push(graphics.hide(duration));\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_toggleColumn\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, visible) {\n      var graphics = dataItem.get(\"graphics\");\n\n      if (graphics) {\n        graphics.setPrivate(\"visible\", visible);\n      }\n\n      var rangeGraphics = dataItem.get(\"rangeGraphics\");\n\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, function (graphics) {\n          graphics.setPrivate(\"visible\", visible);\n        });\n      }\n\n      var bullets = dataItem.bullets;\n\n      if (bullets) {\n        $array.each(bullets, function (bullet) {\n          bullet.setPrivate(\"hidden\", !visible);\n        });\n      }\n    }\n  });\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(BaseColumnSeries.prototype, \"showDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, graphics, rangeGraphics;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];\n              graphics = dataItem.get(\"graphics\");\n\n              if (graphics) {\n                promises.push(graphics.show(duration));\n              }\n\n              rangeGraphics = dataItem.get(\"rangeGraphics\");\n\n              if (rangeGraphics) {\n                $array.each(rangeGraphics, function (graphics) {\n                  promises.push(graphics.show(duration));\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(BaseColumnSeries.prototype, \"updateLegendMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _this = this;\n\n      var legendDataItem = this.get(\"legendDataItem\");\n\n      if (this.get(\"useLastColorForLegendMarker\")) {\n        if (!dataItem) {\n          var lastDataItem = this.dataItems[this.endIndex() - 1];\n\n          if (lastDataItem) {\n            dataItem = lastDataItem;\n          }\n        }\n      }\n\n      if (legendDataItem) {\n        var graphics_1 = this.columns.template;\n\n        if (dataItem) {\n          var column = dataItem.get(\"graphics\");\n\n          if (column) {\n            graphics_1 = column;\n          }\n        }\n\n        var markerRectangle_1 = legendDataItem.get(\"markerRectangle\");\n\n        if (markerRectangle_1) {\n          if (!legendDataItem.get(\"itemContainer\").get(\"disabled\")) {\n            $array.each(visualSettings, function (setting) {\n              markerRectangle_1.set(setting, graphics_1.get(setting, _this.get(setting)));\n            });\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(BaseColumnSeries.prototype, \"_getTooltipTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      if (this.get(\"seriesTooltipTarget\") == \"bullet\") {\n        return _super.prototype._getTooltipTarget.call(this, dataItem);\n      }\n\n      var column = dataItem.get(\"graphics\");\n\n      if (column) {\n        return column;\n      }\n\n      return this;\n    }\n  });\n  Object.defineProperty(BaseColumnSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"BaseColumnSeries\"\n  });\n  Object.defineProperty(BaseColumnSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: XYSeries.classNames.concat([BaseColumnSeries.className])\n  });\n  return BaseColumnSeries;\n}(XYSeries);\n\nexport { BaseColumnSeries }; //# sourceMappingURL=BaseColumnSeries.js.map","map":null,"metadata":{},"sourceType":"module"}