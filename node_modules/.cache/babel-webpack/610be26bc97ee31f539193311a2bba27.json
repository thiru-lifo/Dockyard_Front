{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RoundedRectangle } from \"../render/RoundedRectangle\";\nimport { Container } from \"./Container\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Draws an interactive button.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/buttons/} for more info\r\n * @important\r\n */\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n\n  function Button() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Button.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"button\"]);\n\n      _super.prototype._afterNew.call(this);\n\n      if (!this._settings.background) {\n        this.set(\"background\", RoundedRectangle.new(this._root, {\n          themeTags: $utils.mergeTags(this._settings.themeTags, [\"background\"])\n        }));\n      }\n    }\n  });\n  Object.defineProperty(Button.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"icon\")) {\n        var previous = this._prevSettings.icon;\n        var icon = this.get(\"icon\");\n\n        if (icon !== previous) {\n          this._disposeProperty(\"icon\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (icon) {\n            this.children.push(icon);\n          }\n\n          this._prevSettings.icon = icon;\n        }\n      }\n\n      if (this.isDirty(\"label\")) {\n        var previous = this._prevSettings.label;\n        var label = this.get(\"label\");\n\n        if (label !== previous) {\n          this._disposeProperty(\"label\");\n\n          if (previous) {\n            previous.dispose();\n          }\n\n          if (label) {\n            this.children.push(label);\n          }\n\n          this._prevSettings.label = label;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Button, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Button\"\n  });\n  Object.defineProperty(Button, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([Button.className])\n  });\n  return Button;\n}(Container);\n\nexport { Button }; //# sourceMappingURL=Button.js.map","map":null,"metadata":{},"sourceType":"module"}