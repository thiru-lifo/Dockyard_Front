{"ast":null,"code":"import { range } from \"./Animation\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * @ignore\r\n */\n\nfunction string2hex(string) {\n  //string = cssColorNames[string.toLowerCase()] || string;\n  if (string[0] === \"#\") {\n    string = string.substr(1);\n  }\n\n  if (string.length == 3) {\n    string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);\n  }\n\n  return parseInt(string, 16);\n}\n/**\r\n * @ignore\r\n */\n\n\nexport function rgba2hex(color) {\n  color = color.replace(/[ ]/g, \"\"); // Init\n\n  var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i); // Try rgb() format\n\n  if (matches) {\n    matches.push(\"1\");\n  } else {\n    matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n\n    if (!matches) {\n      return 0x000000;\n    }\n  }\n\n  var hex = \"\";\n\n  for (var i = 1; i <= 3; i++) {\n    var val = parseInt(matches[i]).toString(16);\n\n    if (val.length == 1) {\n      val = \"0\" + val;\n    }\n\n    hex += val;\n  }\n\n  return string2hex(hex);\n}\n/**\r\n * Returns a new [[Color]] object base on input.\r\n *\r\n * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.\r\n *\r\n * * `\"#f00\"`\r\n * * `\"#ff0000\"`\r\n * * `\"rgb(255, 0, 0)\"`\r\n * * `\"rgba(255, 0, 0, 1)\"`\r\n * * `0xff0000`\r\n *\r\n * @param   input  Input color\r\n * @return         Color\r\n */\n\nexport function color(input) {\n  return Color.fromAny(input);\n}\n/**\r\n * Wherever color needs to be specified in amCharts 5, `Color` object needs to\r\n * be used.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info\r\n * @important\r\n */\n\nvar Color =\n/** @class */\nfunction () {\n  function Color(hex) {\n    Object.defineProperty(this, \"_hex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._hex = hex | 0;\n  }\n\n  Object.defineProperty(Color.prototype, \"hex\", {\n    /**\r\n     * Color numeric value.\r\n     */\n    get: function () {\n      return this._hex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"r\", {\n    /**\r\n     * Value of color's R channel.\r\n     * @return R value\r\n     */\n    get: function () {\n      return this._hex >>> 16;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"g\", {\n    /**\r\n     * Value of color's G channel.\r\n     * @return G value\r\n     */\n    get: function () {\n      return this._hex >> 8 & 0xFF;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"b\", {\n    /**\r\n     * Value of color's B channel.\r\n     * @return B value\r\n     */\n    get: function () {\n      return this._hex & 0xFF;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns color CSS representation in form of `rgba(r, g, b, a)` string.\r\n   *\r\n   * @param   alpha  Opacity\r\n   * @return         CSS string\r\n   */\n\n  Object.defineProperty(Color.prototype, \"toCSS\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (alpha) {\n      if (alpha === void 0) {\n        alpha = 1;\n      }\n\n      return \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + alpha + \")\";\n    }\n  });\n  /**\r\n   * Returns color CSS representation in form of `#rgb` string.\r\n   *\r\n   * @return         CSS string\r\n   */\n\n  Object.defineProperty(Color.prototype, \"toCSSHex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return \"#\" + $utils.padString(this.r.toString(16), 2) + $utils.padString(this.g.toString(16), 2) + $utils.padString(this.b.toString(16), 2);\n    }\n  });\n  /**\r\n   * Returns color's HSL info.\r\n   * @param   alpha Opacity\r\n   * @return        HSL info\r\n   */\n\n  Object.defineProperty(Color.prototype, \"toHSL\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (alpha) {\n      if (alpha === void 0) {\n        alpha = 1;\n      }\n\n      return $utils.rgbToHsl({\n        r: this.r,\n        g: this.g,\n        b: this.b,\n        a: alpha\n      });\n    }\n  });\n  /**\r\n   * Converts HSL values into a new [[Color]] object.\r\n   *\r\n   * @param   h H value\r\n   * @param   s S value\r\n   * @param   l L value\r\n   * @return    Color object\r\n   */\n\n  Object.defineProperty(Color, \"fromHSL\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (h, s, l) {\n      var rgb = $utils.hslToRgb({\n        h: h,\n        s: s,\n        l: l\n      });\n      return this.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  Object.defineProperty(Color.prototype, \"toString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.toCSSHex();\n    }\n  });\n  /**\r\n   * Converts hex number into a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromHex(0xff0000) // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromHex(0xff0000) // red\r\n   * ```\r\n   *\r\n   * @param   hex  Hex color\r\n   * @return       Color\r\n   */\n\n  Object.defineProperty(Color, \"fromHex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (hex) {\n      return new Color(hex);\n    }\n  });\n  /**\r\n   * Converts RGB values to a new [[Color]] object.\r\n   *\r\n   * @param   r  R value\r\n   * @param   g  G value\r\n   * @param   b  B value\r\n   * @return     Color\r\n   */\n\n  Object.defineProperty(Color, \"fromRGB\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (r, g, b) {\n      return new Color((b | 0) + (g << 8) + (r << 16));\n    }\n  });\n  /**\r\n   * Converts RGB string to a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromString(\"#ff0000\") // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromString(\"#ff0000\") // red\r\n   * ```\r\n   *\r\n   * @param   s  RGB string\r\n   * @return     Color\r\n   */\n\n  Object.defineProperty(Color, \"fromString\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      return new Color(string2hex(s));\n    }\n  });\n  /**\r\n   * Converts CSS rgba() syntax to a new [[Color]] object.\r\n   *\r\n   * ```TypeScript\r\n   * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\r\n   * ```\r\n   * ```JavaScript\r\n   * Color.fromCSS(\"rgba(255, 0, 0, 1)\") // red\r\n   * ```\r\n   *\r\n   * @param  {string} s [description]\r\n   * @return {Color}    [description]\r\n   */\n\n  Object.defineProperty(Color, \"fromCSS\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      return new Color(rgba2hex(s));\n    }\n  });\n  /**\r\n   * Convert to color from virtually anything.\r\n   *\r\n   * Will throw an exception if unable to resolve the color.\r\n   *\r\n   * @param   s  Source\r\n   * @return     Color\r\n   */\n\n  Object.defineProperty(Color, \"fromAny\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (s) {\n      if ($type.isString(s)) {\n        if (s[0] == \"#\") {\n          return Color.fromString(s);\n        } else if (s.substr(0, 3) == \"rgb\") {\n          return Color.fromCSS(s);\n        }\n      } else if ($type.isNumber(s)) {\n        return Color.fromHex(s);\n      } else if (s instanceof Color) {\n        return Color.fromHex(s.hex);\n      }\n\n      throw new Error(\"Unknown color syntax: \" + s);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] object based on either `lightAlternative` or\r\n   * `darkAlternative` depending on which one is more contrasting with\r\n   * the `color`.\r\n   *\r\n   * @param   color             Reference color\r\n   * @param   lightAlternative  Light color\r\n   * @param   darkAlternative   Dark color\r\n   * @return                    Alternative color\r\n   */\n\n  Object.defineProperty(Color, \"alternative\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, lightAlternative, darkAlternative) {\n      var rgb = $utils.alternativeColor({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, lightAlternative ? {\n        r: lightAlternative.r,\n        g: lightAlternative.g,\n        b: lightAlternative.b\n      } : undefined, darkAlternative ? {\n        r: darkAlternative.r,\n        g: darkAlternative.g,\n        b: darkAlternative.b\n      } : undefined);\n      return this.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns an intermediate Color between two reference colors depending on\r\n   * the progress (`diff`) between the two.\r\n   *\r\n   * @param   diff  Progress\r\n   * @param   from  Source color\r\n   * @param   to    Target color\r\n   * @param   mode  Interpolation mode\r\n   * @return        Color\r\n   */\n\n  Object.defineProperty(Color, \"interpolate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (diff, from, to, mode) {\n      if (mode === void 0) {\n        mode = \"rgb\";\n      }\n\n      if (mode == \"hsl\") {\n        var fromHSL = from.toHSL();\n        var toHSL = to.toHSL();\n        return Color.fromHSL(range(diff, fromHSL.h, toHSL.h), range(diff, fromHSL.s, toHSL.s), range(diff, fromHSL.l, toHSL.l));\n      } else {\n        return Color.fromRGB(range(diff, from.r, to.r), range(diff, from.g, to.g), range(diff, from.b, to.b));\n      }\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] lightened by `percent` value.\r\n   *\r\n   * Use negative value to darken the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n\n  Object.defineProperty(Color, \"lighten\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.lighten({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] brightened by `percent` value.\r\n   *\r\n   * Use negative value to dim the color.\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n\n  Object.defineProperty(Color, \"brighten\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.brighten({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  /**\r\n   * Returns a new [[Color]] saturated by `percent` value.\r\n   *\r\n   * Value range is between `0` (fully desaturated), to `1` (full color).\r\n   *\r\n   * @param   color    Source color\r\n   * @param   percent  Percent\r\n   * @return           New color\r\n   */\n\n  Object.defineProperty(Color, \"saturate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (color, percent) {\n      var rgb = $utils.saturate({\n        r: color.r,\n        g: color.g,\n        b: color.b\n      }, percent);\n      return Color.fromRGB(rgb.r, rgb.g, rgb.b);\n    }\n  });\n  return Color;\n}();\n\nexport { Color }; //# sourceMappingURL=Color.js.map","map":null,"metadata":{},"sourceType":"module"}