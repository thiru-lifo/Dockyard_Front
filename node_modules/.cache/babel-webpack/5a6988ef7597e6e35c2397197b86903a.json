{"ast":null,"code":"import { EventDispatcher } from \"./EventDispatcher\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $object from \"./Object\";\n\nvar TemplateState =\n/** @class */\nfunction () {\n  function TemplateState(name, template, settings) {\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._name = name;\n    this._template = template;\n    this._settings = settings;\n  }\n\n  Object.defineProperty(TemplateState.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value; // TODO maybe only do this if the value changed ?\n\n      this._template._stateChanged(this._name);\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._settings[key]; // TODO maybe only do this if the value changed ?\n\n      this._template._stateChanged(this._name);\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      var _this = this;\n\n      $object.keys(settings).forEach(function (key) {\n        _this._settings[key] = settings[key];\n      });\n\n      this._template._stateChanged(this._name);\n    }\n  });\n  Object.defineProperty(TemplateState.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (other, seen) {\n      $object.each(this._settings, function (key, value) {\n        if (!seen[key] && !other._userSettings[key]) {\n          seen[key] = true;\n          other.setRaw(key, value);\n        }\n      });\n    }\n  });\n  return TemplateState;\n}();\n\nexport { TemplateState };\n\nvar TemplateStates =\n/** @class */\nfunction () {\n  function TemplateStates(template) {\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._template = template;\n  }\n\n  Object.defineProperty(TemplateStates.prototype, \"lookup\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      return this._states[name];\n    }\n  });\n  Object.defineProperty(TemplateStates.prototype, \"create\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name, settings) {\n      var state = this._states[name];\n\n      if (state) {\n        state.setAll(settings);\n        return state;\n      } else {\n        var state_1 = new TemplateState(name, this._template, settings);\n        this._states[name] = state_1;\n\n        this._template._stateChanged(name);\n\n        return state_1;\n      }\n    }\n  });\n  Object.defineProperty(TemplateStates.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      delete this._states[name];\n\n      this._template._stateChanged(name);\n    }\n  });\n  Object.defineProperty(TemplateStates.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity, state) {\n      $object.each(this._states, function (key, value) {\n        var seen = state.states[key];\n\n        if (seen == null) {\n          seen = state.states[key] = {};\n        }\n\n        var other = entity.states.create(key, {});\n\n        value._apply(other, seen);\n      });\n    }\n  });\n  return TemplateStates;\n}();\n\nexport { TemplateStates };\n\nvar TemplateAdapters =\n/** @class */\nfunction () {\n  function TemplateAdapters() {\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n\n  Object.defineProperty(TemplateAdapters.prototype, \"add\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var callbacks = this._callbacks[key];\n\n      if (callbacks === undefined) {\n        callbacks = this._callbacks[key] = [];\n      }\n\n      callbacks.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(callbacks, callback);\n\n        if (callbacks.length === 0) {\n          delete _this._callbacks[key];\n        }\n      });\n    }\n  });\n  Object.defineProperty(TemplateAdapters.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      var callbacks = this._callbacks[key];\n\n      if (callbacks !== undefined) {\n        delete this._callbacks[key];\n      }\n    }\n  });\n  Object.defineProperty(TemplateAdapters.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity) {\n      var disposers = [];\n      $object.each(this._callbacks, function (key, callbacks) {\n        $array.each(callbacks, function (callback) {\n          disposers.push(entity.adapters.add(key, callback));\n        });\n      });\n      return new MultiDisposer(disposers);\n    }\n  });\n  return TemplateAdapters;\n}();\n\nexport { TemplateAdapters }; // TODO maybe extend from Properties ?\n\nvar Template =\n/** @class */\nfunction () {\n  function Template(settings, isReal) {\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    }); // TODO code duplication with Properties\n\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entities\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateStates(this)\n    });\n    Object.defineProperty(this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateAdapters()\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"setup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    this._settings = settings;\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Template, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      return new Template(settings, true);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value;\n    }\n  });\n  Object.defineProperty(Template.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var _this = this;\n\n      if (this._settings[key] !== value) {\n        this.setRaw(key, value);\n\n        this._entities.forEach(function (entity) {\n          entity._setTemplateProperty(_this, key, value);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (key in this._settings) {\n        delete this._settings[key];\n\n        this._entities.forEach(function (entity) {\n          entity._removeTemplateProperty(key);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"removeAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $object.each(this._settings, function (key, _value) {\n        _this.remove(key);\n      });\n    }\n  });\n  Object.defineProperty(Template.prototype, \"getPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._privateSettings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._privateSettings[key] = value;\n      return value;\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var _this = this;\n\n      if (this._privateSettings[key] !== value) {\n        this.setPrivateRaw(key, value);\n\n        this._entities.forEach(function (entity) {\n          entity._setTemplatePrivateProperty(_this, key, value);\n        });\n      }\n\n      return value;\n    }\n  });\n  Object.defineProperty(Template.prototype, \"removePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (key in this._privateSettings) {\n        delete this._privateSettings[key];\n\n        this._entities.forEach(function (entity) {\n          entity._removeTemplatePrivateProperty(key);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Template.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var _this = this;\n\n      $object.each(value, function (key, value) {\n        _this.set(key, value);\n      });\n    }\n  }); // TODO code duplication with Properties\n\n  Object.defineProperty(Template.prototype, \"on\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var events = this._settingEvents[key];\n\n      if (events === undefined) {\n        events = this._settingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._settingEvents[key];\n        }\n      });\n    }\n  }); // TODO code duplication with Properties\n\n  Object.defineProperty(Template.prototype, \"onPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var events = this._privateSettingEvents[key];\n\n      if (events === undefined) {\n        events = this._privateSettingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._privateSettingEvents[key];\n        }\n      });\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity, state) {\n      var disposers = [];\n      $object.each(this._settingEvents, function (key, events) {\n        $array.each(events, function (event) {\n          disposers.push(entity.on(key, event));\n        });\n      });\n      $object.each(this._privateSettingEvents, function (key, events) {\n        $array.each(events, function (event) {\n          disposers.push(entity.onPrivate(key, event));\n        });\n      });\n\n      this.states._apply(entity, state);\n\n      disposers.push(this.adapters._apply(entity));\n      disposers.push(entity.events.copyFrom(this.events));\n      return new MultiDisposer(disposers);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_setObjectTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity) {\n      this._entities.push(entity);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_removeObjectTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (entity) {\n      $array.remove(this._entities, entity);\n    }\n  });\n  Object.defineProperty(Template.prototype, \"_stateChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      this._entities.forEach(function (entity) {\n        entity._applyStateByKey(name);\n      });\n    }\n  });\n  return Template;\n}();\n\nexport { Template }; //# sourceMappingURL=Template.js.map","map":null,"metadata":{},"sourceType":"module"}