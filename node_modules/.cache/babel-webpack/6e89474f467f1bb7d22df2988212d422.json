{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Text } from \"../render/Text\";\nimport { p50, p100 } from \"../util/Percent\";\nimport { Container } from \"./Container\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n/**\r\n * Creates a label with support for in-line styling and data bindings.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info\r\n */\n\nvar Label =\n/** @class */\nfunction (_super) {\n  __extends(Label, _super);\n\n  function Label() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_text\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_textKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"text\", \"fill\", \"fillOpacity\", \"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"textDecoration\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\", // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\", //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\", \"populateText\", \"role\", \"ignoreFormatting\"]\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Label.prototype, \"text\", {\n    /**\r\n     * @ignore Text is not to be used directly\r\n     */\n    get: function () {\n      return this._text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Label.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this._makeText();\n\n      $array.each(this._textKeys, function (property) {\n        var propValue = _this.get(property);\n\n        if (propValue != undefined) {\n          _this._text.set(property, propValue);\n        }\n      });\n\n      if (this.get(\"html\", \"\") !== \"\") {\n        this._text.set(\"text\", \"\");\n      }\n\n      this.onPrivate(\"maxWidth\", function () {\n        _this._setMaxDimentions();\n      });\n      this.onPrivate(\"maxHeight\", function () {\n        _this._setMaxDimentions();\n      });\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_makeText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._text = this.children.push(Text.new(this._root, {}));\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._updateChildren.call(this);\n\n      $array.each(this._textKeys, function (property) {\n        _this._text.set(property, _this.get(property));\n      });\n\n      if (this.isDirty(\"maxWidth\")) {\n        this._setMaxDimentions();\n      }\n\n      if (this.isDirty(\"maxHeight\")) {\n        this._setMaxDimentions();\n      }\n\n      if (this.isDirty(\"rotation\")) {\n        this._setMaxDimentions();\n      } // Do not show regular text if HTML is used\n\n\n      if (this.get(\"html\", \"\") !== \"\") {\n        this._text.set(\"text\", \"\");\n      } else {\n        this._text.set(\"text\", this.get(\"text\"));\n      }\n\n      if (this.isDirty(\"textAlign\") || this.isDirty(\"width\")) {\n        var textAlign = this.get(\"textAlign\");\n        var x = void 0;\n\n        if (this.get(\"width\") != null) {\n          if (textAlign == \"right\") {\n            x = p100;\n          } else if (textAlign == \"center\") {\n            x = p50;\n          } else {\n            x = 0;\n          }\n        } else {\n          if (textAlign == \"left\" || textAlign == \"start\") {\n            x = this.get(\"paddingLeft\");\n          } else if (textAlign == \"right\" || textAlign == \"end\") {\n            x = -this.get(\"paddingRight\");\n          }\n        }\n\n        this.text.set(\"x\", x);\n      }\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_setMaxDimentions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var rotation = this.get(\"rotation\");\n      var vertical = rotation == 90 || rotation == 270 || rotation == -90;\n      var maxWidth = this.get(\"maxWidth\", this.getPrivate(\"maxWidth\", Infinity));\n\n      if ($type.isNumber(maxWidth)) {\n        this.text.set(vertical ? \"maxHeight\" : \"maxWidth\", maxWidth - this.get(\"paddingLeft\", 0) - this.get(\"paddingRight\", 0));\n      } else {\n        this.text.set(vertical ? \"maxHeight\" : \"maxWidth\", undefined);\n      }\n\n      var maxHeight = this.get(\"maxHeight\", this.getPrivate(\"maxHeight\", Infinity));\n\n      if ($type.isNumber(maxHeight)) {\n        this.text.set(vertical ? \"maxWidth\" : \"maxHeight\", maxHeight - this.get(\"paddingTop\", 0) - this.get(\"paddingBottom\", 0));\n      } else {\n        this.text.set(vertical ? \"maxWidth\" : \"maxHeight\", undefined);\n      }\n    }\n  });\n  Object.defineProperty(Label.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n\n      this._markDirtyKey(\"text\");\n\n      if (this.text.get(\"populateText\")) {\n        this.text.markDirtyText();\n      }\n    }\n  });\n  /**\r\n   * Returns text with populated placeholders and formatting if `populateText` is\r\n   * set to `true`.\r\n   *\r\n   * @return Populated text\r\n   */\n\n  Object.defineProperty(Label.prototype, \"getText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._text._getText();\n    }\n  });\n  Object.defineProperty(Label, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Label\"\n  });\n  Object.defineProperty(Label, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([Label.className])\n  });\n  return Label;\n}(Container);\n\nexport { Label }; //# sourceMappingURL=Label.js.map","map":null,"metadata":{},"sourceType":"module"}