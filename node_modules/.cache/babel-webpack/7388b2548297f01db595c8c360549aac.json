{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RoundedRectangle } from \"../render/RoundedRectangle\";\nimport { Container } from \"./Container\";\nimport { Graphics } from \"./Graphics\";\nimport { Button } from \"./Button\";\nimport * as $type from \"../util/Type\";\nimport * as $utils from \"../util/Utils\";\n/**\r\n * A control that allows zooming chart's axes, or other uses requiring range\r\n * selection.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/} for more info\r\n */\n\nvar Scrollbar =\n/** @class */\nfunction (_super) {\n  __extends(Scrollbar, _super);\n\n  function Scrollbar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A thumb elment - a draggable square between the grips, used for panning\r\n     * the selection.\r\n     */\n\n\n    Object.defineProperty(_this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._makeThumb()\n    });\n    /**\r\n     * Start grip button.\r\n     */\n\n    Object.defineProperty(_this, \"startGrip\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._makeButton()\n    });\n    /**\r\n     * End grip button.\r\n     */\n\n    Object.defineProperty(_this, \"endGrip\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._makeButton()\n    });\n    Object.defineProperty(_this, \"_thumbBusy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_startDown\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_endDown\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_thumbDown\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_gripDown\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Scrollbar.prototype, \"_addOrientationClass\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"scrollbar\", this._settings.orientation]);\n\n      if (!this._settings.background) {\n        this._settings.background = RoundedRectangle.new(this._root, {\n          themeTags: $utils.mergeTags(this._settings.themeTags, [\"main\", \"background\"])\n        });\n      }\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_makeButton\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.children.push(Button.new(this._root, {\n        themeTags: [\"resize\", \"button\", this.get(\"orientation\")],\n        icon: Graphics.new(this._root, {\n          themeTags: [\"icon\"]\n        })\n      }));\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_makeThumb\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.children.push(RoundedRectangle.new(this._root, {\n        themeTags: [\"thumb\", this.get(\"orientation\")]\n      }));\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_handleAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (animation) {\n      var _this = this;\n\n      if (animation) {\n        this._disposers.push(animation.events.on(\"stopped\", function () {\n          _this.setPrivateRaw(\"isBusy\", false);\n\n          _this._thumbBusy = false;\n        }));\n      }\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this._addOrientationClass();\n\n      _super.prototype._afterNew.call(this);\n\n      var startGrip = this.startGrip;\n      var endGrip = this.endGrip;\n      var thumb = this.thumb;\n      var background = this.get(\"background\");\n\n      if (background) {\n        this._disposers.push(background.events.on(\"click\", function (event) {\n          _this.setPrivateRaw(\"isBusy\", true);\n\n          var point = _this._display.toLocal(event.point);\n\n          var w = _this.width();\n\n          var h = _this.height();\n\n          var orientation = _this.get(\"orientation\");\n\n          var newMiddle;\n\n          if (orientation == \"vertical\") {\n            newMiddle = (point.y - thumb.height() / 2) / h;\n          } else {\n            newMiddle = (point.x - thumb.width() / 2) / w;\n          }\n\n          var newCoordinate;\n          var key;\n\n          if (orientation == \"vertical\") {\n            newCoordinate = newMiddle * h;\n            key = \"y\";\n          } else {\n            newCoordinate = newMiddle * w;\n            key = \"x\";\n          }\n\n          var duration = _this.get(\"animationDuration\", 0);\n\n          if (duration > 0) {\n            _this._thumbBusy = true;\n\n            _this._handleAnimation(_this.thumb.animate({\n              key: key,\n              to: newCoordinate,\n              duration: duration,\n              easing: _this.get(\"animationEasing\")\n            }));\n          } else {\n            _this.thumb.set(key, newCoordinate);\n\n            _this._root.events.once(\"frameended\", function () {\n              _this.setPrivateRaw(\"isBusy\", false);\n            });\n          }\n        }));\n      }\n\n      this._disposers.push(thumb.events.on(\"dblclick\", function (event) {\n        if (!$utils.isLocalEvent(event.originalEvent, _this)) {\n          return;\n        }\n\n        var duration = _this.get(\"animationDuration\", 0);\n\n        var easing = _this.get(\"animationEasing\");\n\n        _this.animate({\n          key: \"start\",\n          to: 0,\n          duration: duration,\n          easing: easing\n        });\n\n        _this.animate({\n          key: \"end\",\n          to: 1,\n          duration: duration,\n          easing: easing\n        });\n      }));\n\n      this._disposers.push(startGrip.events.on(\"pointerdown\", function () {\n        _this.setPrivateRaw(\"isBusy\", true);\n\n        _this._startDown = true;\n        _this._gripDown = \"start\";\n      }));\n\n      this._disposers.push(endGrip.events.on(\"pointerdown\", function () {\n        _this.setPrivateRaw(\"isBusy\", true);\n\n        _this._endDown = true;\n        _this._gripDown = \"end\";\n      }));\n\n      this._disposers.push(thumb.events.on(\"pointerdown\", function () {\n        _this.setPrivateRaw(\"isBusy\", true);\n\n        _this._thumbDown = true;\n        _this._gripDown = undefined;\n      }));\n\n      this._disposers.push(startGrip.events.on(\"globalpointerup\", function () {\n        if (_this._startDown) {\n          _this.setPrivateRaw(\"isBusy\", false);\n        }\n\n        _this._startDown = false;\n      }));\n\n      this._disposers.push(endGrip.events.on(\"globalpointerup\", function () {\n        if (_this._endDown) {\n          _this.setPrivateRaw(\"isBusy\", false);\n        }\n\n        _this._endDown = false;\n      }));\n\n      this._disposers.push(thumb.events.on(\"globalpointerup\", function () {\n        if (_this._thumbDown) {\n          _this.setPrivateRaw(\"isBusy\", false);\n        }\n\n        _this._thumbDown = false;\n      }));\n\n      this._disposers.push(startGrip.on(\"x\", function () {\n        _this._updateThumb();\n      }));\n\n      this._disposers.push(endGrip.on(\"x\", function () {\n        _this._updateThumb();\n      }));\n\n      this._disposers.push(startGrip.on(\"y\", function () {\n        _this._updateThumb();\n      }));\n\n      this._disposers.push(endGrip.on(\"y\", function () {\n        _this._updateThumb();\n      }));\n\n      this._disposers.push(thumb.events.on(\"positionchanged\", function () {\n        _this._updateGripsByThumb();\n      }));\n\n      if (this.get(\"orientation\") == \"vertical\") {\n        startGrip.set(\"x\", 0);\n        endGrip.set(\"x\", 0);\n\n        this._disposers.push(thumb.adapters.add(\"y\", function (value) {\n          return Math.max(Math.min(Number(value), _this.height() - thumb.height()), 0);\n        }));\n\n        this._disposers.push(thumb.adapters.add(\"x\", function (_value) {\n          return _this.width() / 2;\n        }));\n\n        this._disposers.push(startGrip.adapters.add(\"x\", function (_value) {\n          return _this.width() / 2;\n        }));\n\n        this._disposers.push(endGrip.adapters.add(\"x\", function (_value) {\n          return _this.width() / 2;\n        }));\n\n        this._disposers.push(startGrip.adapters.add(\"y\", function (value) {\n          return Math.max(Math.min(Number(value), _this.height()), 0);\n        }));\n\n        this._disposers.push(endGrip.adapters.add(\"y\", function (value) {\n          return Math.max(Math.min(Number(value), _this.height()), 0);\n        }));\n      } else {\n        startGrip.set(\"y\", 0);\n        endGrip.set(\"y\", 0);\n\n        this._disposers.push(thumb.adapters.add(\"x\", function (value) {\n          return Math.max(Math.min(Number(value), _this.width() - thumb.width()), 0);\n        }));\n\n        this._disposers.push(thumb.adapters.add(\"y\", function (_value) {\n          return _this.height() / 2;\n        }));\n\n        this._disposers.push(startGrip.adapters.add(\"y\", function (_value) {\n          return _this.height() / 2;\n        }));\n\n        this._disposers.push(endGrip.adapters.add(\"y\", function (_value) {\n          return _this.height() / 2;\n        }));\n\n        this._disposers.push(startGrip.adapters.add(\"x\", function (value) {\n          return Math.max(Math.min(Number(value), _this.width()), 0);\n        }));\n\n        this._disposers.push(endGrip.adapters.add(\"x\", function (value) {\n          return Math.max(Math.min(Number(value), _this.width()), 0);\n        }));\n      }\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this);\n\n      if (this.isDirty(\"end\") || this.isDirty(\"start\") || this._sizeDirty) {\n        this.updateGrips();\n      }\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n        var eventType = \"rangechanged\";\n\n        if (this.events.isEnabled(eventType)) {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this,\n            start: this.get(\"start\", 0),\n            end: this.get(\"end\", 1),\n            grip: this._gripDown\n          });\n        }\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Scrollbar.prototype, \"updateGrips\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var startGrip = this.startGrip;\n      var endGrip = this.endGrip;\n      var orientation = this.get(\"orientation\");\n      var height = this.height();\n      var width = this.width();\n\n      if (orientation == \"vertical\") {\n        startGrip.set(\"y\", height * this.get(\"start\", 0));\n        endGrip.set(\"y\", height * this.get(\"end\", 1));\n      } else {\n        startGrip.set(\"x\", width * this.get(\"start\", 0));\n        endGrip.set(\"x\", width * this.get(\"end\", 1));\n      }\n\n      var valueFunction = this.getPrivate(\"positionTextFunction\");\n      var from = Math.round(this.get(\"start\", 0) * 100);\n      var to = Math.round(this.get(\"end\", 0) * 100);\n      var fromValue;\n      var toValue;\n\n      if (valueFunction) {\n        fromValue = valueFunction.call(this, this.get(\"start\", 0));\n        toValue = valueFunction.call(this, this.get(\"end\", 0));\n      } else {\n        fromValue = from + \"%\";\n        toValue = to + \"%\";\n      }\n\n      startGrip.set(\"ariaLabel\", this._t(\"From %1\", undefined, fromValue));\n      startGrip.set(\"ariaValueNow\", \"\" + from);\n      startGrip.set(\"ariaValueText\", from + \"%\");\n      startGrip.set(\"ariaValueMin\", \"0\");\n      startGrip.set(\"ariaValueMax\", \"100\");\n      endGrip.set(\"ariaLabel\", this._t(\"To %1\", undefined, toValue));\n      endGrip.set(\"ariaValueNow\", \"\" + to);\n      endGrip.set(\"ariaValueText\", to + \"%\");\n      endGrip.set(\"ariaValueMin\", \"0\");\n      endGrip.set(\"ariaValueMax\", \"100\");\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_updateThumb\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var thumb = this.thumb;\n      var startGrip = this.startGrip;\n      var endGrip = this.endGrip;\n      var height = this.height();\n      var width = this.width();\n      var x0 = startGrip.x();\n      var x1 = endGrip.x();\n      var y0 = startGrip.y();\n      var y1 = endGrip.y();\n      var start = 0;\n      var end = 1;\n\n      if (this.get(\"orientation\") == \"vertical\") {\n        if ($type.isNumber(y0) && $type.isNumber(y1)) {\n          if (!this._thumbBusy && !thumb.isDragging()) {\n            thumb.set(\"height\", y1 - y0);\n            thumb.set(\"y\", y0);\n          }\n\n          start = y0 / height;\n          end = y1 / height;\n        }\n      } else {\n        if ($type.isNumber(x0) && $type.isNumber(x1)) {\n          if (!this._thumbBusy && !thumb.isDragging()) {\n            thumb.set(\"width\", x1 - x0);\n            thumb.set(\"x\", x0);\n          }\n\n          start = x0 / width;\n          end = x1 / width;\n        }\n      }\n\n      if (this.getPrivate(\"isBusy\") && (this.get(\"start\") != start || this.get(\"end\") != end)) {\n        this.set(\"start\", start);\n        this.set(\"end\", end);\n      }\n\n      var valueFunction = this.getPrivate(\"positionTextFunction\");\n      var from = Math.round(this.get(\"start\", 0) * 100);\n      var to = Math.round(this.get(\"end\", 0) * 100);\n      var fromValue;\n      var toValue;\n\n      if (valueFunction) {\n        fromValue = valueFunction.call(this, this.get(\"start\", 0));\n        toValue = valueFunction.call(this, this.get(\"end\", 0));\n      } else {\n        fromValue = from + \"%\";\n        toValue = to + \"%\";\n      }\n\n      thumb.set(\"ariaLabel\", this._t(\"From %1 to %2\", undefined, fromValue, toValue));\n      thumb.set(\"ariaValueNow\", \"\" + from);\n      thumb.set(\"ariaValueText\", from + \"%\");\n    }\n  });\n  Object.defineProperty(Scrollbar.prototype, \"_updateGripsByThumb\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var thumb = this.thumb;\n      var startGrip = this.startGrip;\n      var endGrip = this.endGrip;\n\n      if (this.get(\"orientation\") == \"vertical\") {\n        var thumbSize = thumb.height();\n        startGrip.set(\"y\", thumb.y());\n        endGrip.set(\"y\", thumb.y() + thumbSize);\n      } else {\n        var thumbSize = thumb.width();\n        startGrip.set(\"x\", thumb.x());\n        endGrip.set(\"x\", thumb.x() + thumbSize);\n      }\n    }\n  });\n  Object.defineProperty(Scrollbar, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Scrollbar\"\n  });\n  Object.defineProperty(Scrollbar, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([Scrollbar.className])\n  });\n  return Scrollbar;\n}(Container);\n\nexport { Scrollbar }; //# sourceMappingURL=Scrollbar.js.map","map":null,"metadata":{},"sourceType":"module"}