{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport { FormGroup, FormControl, Validators, FormGroupDirective } from \"@angular/forms\";\nimport { language } from \"src/environments/language\";\nimport { userDetail } from 'src/environments/userDetail';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/api.service\";\nimport * as i2 from \"src/app/service/notification.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"src/app/service/console.service\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/checkbox\";\nimport * as i11 from \"@angular/material/button\";\n\nfunction LoginComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(api, notification, dialog, router, logger) {\n      this.api = api;\n      this.notification = notification;\n      this.dialog = dialog;\n      this.router = router;\n      this.logger = logger;\n      this.loginForm = new FormGroup({\n        username: new FormControl(\"\", [Validators.required]),\n        password: new FormControl(\"\", [Validators.required]),\n        remember: new FormControl(\"\")\n      });\n      this.loginButton = 'Sign in';\n      this.signinDisable = false;\n\n      this.Error = (controlName, errorName) => {\n        return this.loginForm.controls[controlName].hasError(errorName);\n      };\n    }\n\n    ngOnInit() {\n      localStorage.removeItem('userDetail');\n      localStorage.removeItem('fp-detail');\n      localStorage.removeItem('log-detail'); // localStorage.removeItem('tmsToken');\n      // localStorage.removeItem('liveCounter');\n\n      localStorage.removeItem('token-detail');\n      localStorage.removeItem('applicant-details');\n      let userInfo = localStorage.getItem('userInfo');\n\n      if (userInfo) {\n        let getUser = this.api.decryptData(userInfo);\n        this.logger.info(getUser);\n        this.populate(getUser);\n      } // var element = <HTMLInputElement> document.getElementById(\"exampleCheck1\");\n      //    element.checked=true;\n\n    }\n\n    onSubmit() {\n      if (this.loginForm.valid) {\n        this.loginButton = 'Please wait...';\n        this.signinDisable = true;\n        this.api.getToken(this.loginForm.value.username, this.api.encrypt(this.loginForm.value.password, environment.SECRET_KEY)).subscribe(res => {\n          console.log('resresres', res);\n          this.loginButton = 'Sign in';\n          this.signinDisable = false;\n\n          if (res.status == 'success') {\n            userDetail.loginname = this.loginForm.value.username;\n            userDetail.password = this.loginForm.value.password;\n            localStorage.setItem('APPLOGO', 'assets/images/logo.png');\n            localStorage.setItem('LOGINPAGE', '/authenticate/login');\n            this.api.setUserLoggedIn(true);\n\n            if (this.loginForm.value.remember) {\n              localStorage.setItem('userInfo', this.api.encryptData(this.loginForm.value));\n            }\n\n            localStorage.setItem('userDetail', this.api.encryptData(userDetail));\n            localStorage.setItem('token-detail', this.api.encryptData(res)); // this.router.navigateByUrl('/locations/countries');\n\n            if (res.role_center.length > 1) {\n              this.router.navigateByUrl('/authenticate/role-selection');\n            } else {\n              console.log(res.role_center[0].user_role.id);\n              this.api.getAPI(environment.API_URL + \"access/permissions?user_role_id=\" + res.role_center[0].user_role.id + '&process_id=' + res.process_id).subscribe(res1 => {\n                if (res1.status == environment.SUCCESS_CODE) {\n                  if (res1.data.length == 1) {\n                    let data = this.api.decryptData(localStorage.getItem('token-detail'));\n                    data.permissions = res1.data[0].permissions;\n                    data.role_code = res.role_center[0].user_role.code;\n                    data.role_id = res.role_center[0].user_role.id;\n                    data.center = res.role_center[0].center ? res.role_center[0].center.id : '';\n                    data.center_name = res.role_center[0].center ? res.role_center[0].center.name : '';\n                    data.role_name = res.role_center[0].user_role.name;\n                    this.api.postAPI(environment.API_URL + \"api/auth/authentications\", {\n                      user_id: res.user_id,\n                      user_role_id: res.role_center[0].user_role.id,\n                      center_id: res.role_center[0].center ? res.role_center[0].center.id : ''\n                    }).subscribe(res2 => {\n                      data.token_user = res2.authentication.token_user;\n                      localStorage.setItem('token-detail', this.api.encryptData(data));\n\n                      if (res2.authentication.biometric) {\n                        if (res2.authentication.fpdata.length < 3) {\n                          this.router.navigateByUrl('/authenticate/biometrics-log');\n                        } else {\n                          this.router.navigateByUrl('/authenticate/biometrics-verify');\n                        }\n                      } else if (res2.authentication.twofactor) {\n                        this.router.navigateByUrl('/authenticate/twofactor');\n                      } else {\n                        //this.router.navigateByUrl('dashboard/admin');\n                        this.router.navigateByUrl('project-list/list');\n                      }\n                    });\n                  }\n                }\n              });\n            }\n            /*if(res.biometric) {\n              if(res.fpdata.length<3 ) {\n               this.router.navigateByUrl('/authenticate/biometrics-log');\n               } else {\n                this.router.navigateByUrl('/authenticate/biometrics-verify');\n               }\n            }\n            else if(res.twofactor) {\n              this.router.navigateByUrl('/authenticate/twofactor');\n            }\n            else  {\n              if(res.role.length>1){\n                this.router.navigateByUrl('/authenticate/role-selection');\n              } else {\n                switch(res.role[0].code)\n                {\n                           case 'admin':\n                    this.router.navigateByUrl('dashboard/admin');\n                  break;\n                  case 'gro':\n                    this.router.navigateByUrl('/gro/dashboard');\n                  break;\n                  case 'nurse':\n                    this.router.navigateByUrl('/nurse/dashboard-nurse');\n                  break;\n                  default:\n                    this.router.navigateByUrl('');\n                  break;\n                }\n              }\n                     }*/\n\n          } else {\n            console.log('res', res);\n            this.notification.displayMessage(res.message);\n          }\n        });\n      }\n    }\n\n    Forgot() {\n      this.notification.displayMessage(language[environment.DEFAULT_LANG].contactAdmin);\n    }\n\n    populate(user) {\n      this.logger.info(user);\n\n      if (user) {\n        this.loginForm.patchValue({\n          username: user.username\n        });\n        this.loginForm.patchValue({\n          password: user.password\n        });\n        this.loginForm.patchValue({\n          remember: user.remember\n        });\n      }\n    }\n\n    rememberMe(evt) {\n      if (!evt.checked) {\n        localStorage.removeItem('userInfo');\n        /*this.loginForm.patchValue({username:''});\n        this.loginForm.patchValue({password:''});*/\n\n        this.loginForm.patchValue({\n          remember: ''\n        });\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.ConsoleService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    viewQuery: function LoginComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(FormGroupDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formGroupDirective = _t.first);\n      }\n    },\n    decls: 35,\n    vars: 5,\n    consts: [[1, \"login-page\"], [1, \"container-fluid\"], [1, \"login-cover\"], [1, \"row\", \"no-gutters\", \"d-flex\", \"align-items-center\"], [1, \"col-md-12\", \"col-12\"], [1, \"login-leftbg\"], [1, \"login-box\"], [1, \"logo\", \"text-center\"], [\"src\", \"assets/images/login-logo.png\"], [1, \"login-form\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group-label\"], [1, \"star\"], [\"appearance\", \"legacy\"], [\"matInput\", \"\", \"placeholder\", \"\", \"formControlName\", \"username\", \"autocomplete\", \"off\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"\", \"type\", \"password\", \"formControlName\", \"password\"], [1, \"remember-link\"], [\"id\", \"exampleCheck1\", \"formControlName\", \"remember\", 1, \"example-margin\", 3, \"change\"], [\"href\", \"javascript:void(0);\", 1, \"float-right\", 3, \"click\"], [1, \"mt-2\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"w-100\", 3, \"disabled\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵelement(8, \"img\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 9);\n        i0.ɵɵelementStart(10, \"form\", 10);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(11, \"div\", 11);\n        i0.ɵɵelementStart(12, \"mat-label\");\n        i0.ɵɵtext(13, \"Username \");\n        i0.ɵɵelementStart(14, \"b\", 12);\n        i0.ɵɵtext(15, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-form-field\", 13);\n        i0.ɵɵelement(17, \"input\", 14);\n        i0.ɵɵtemplate(18, LoginComponent_mat_error_18_Template, 2, 0, \"mat-error\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 11);\n        i0.ɵɵelementStart(20, \"mat-label\");\n        i0.ɵɵtext(21, \"Password \");\n        i0.ɵɵelementStart(22, \"b\", 12);\n        i0.ɵɵtext(23, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-form-field\", 13);\n        i0.ɵɵelement(25, \"input\", 16);\n        i0.ɵɵtemplate(26, LoginComponent_mat_error_26_Template, 2, 0, \"mat-error\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 17);\n        i0.ɵɵelementStart(28, \"mat-checkbox\", 18);\n        i0.ɵɵlistener(\"change\", function LoginComponent_Template_mat_checkbox_change_28_listener($event) {\n          return ctx.rememberMe($event);\n        });\n        i0.ɵɵtext(29, \"Remember me\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"a\", 19);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_a_click_30_listener() {\n          return ctx.Forgot();\n        });\n        i0.ɵɵtext(31, \"Forgot Password?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 20);\n        i0.ɵɵelementStart(33, \"button\", 21);\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.Error(\"username\", \"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.Error(\"password\", \"required\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"disabled\", ctx.signinDisable);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.loginButton);\n      }\n    },\n    directives: [i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.MatLabel, i7.MatFormField, i8.MatInput, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i9.NgIf, i10.MatCheckbox, i11.MatButton, i7.MatError],\n    styles: [\"a[_ngcontent-%COMP%]{text-decoration:none}.login-page[_ngcontent-%COMP%]{background:url(loginbg.ab2d1e683e1646e0260d.jpg) no-repeat center;background-size:cover;-webkit-background-size:cover;-moz-background-size:cover;-o-background-size:cover}.logo[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:28px;font-weight:500;color:#332f31;margin:15px 0 20px}.w-100[_ngcontent-%COMP%]{width:100%}.image-right[_ngcontent-%COMP%]{padding-left:50px}.login-leftbg[_ngcontent-%COMP%]{padding:100px 50px 80px;position:relative;border-radius:16px;overflow:hidden;width:500px;margin:0 auto}.login-leftbg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:300px}.login-box[_ngcontent-%COMP%]{box-shadow:0 16px 32px #1f1c1d08,0 6px 24px #1f1c1d0d;border-radius:16px;background:#fff;padding:20px 48px}.login-box[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%]{font-size:16px;font-weight:600;color:#736d70;margin-bottom:10px;display:block}.login-box[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%]   .star[_ngcontent-%COMP%]{color:#f01414}.login-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:8px 10px;font-size:18px;box-shadow:none;border-radius:50px}.mat-raised-button.mat-primary[_ngcontent-%COMP%]{background:#0B014A;border-radius:50px}.login-form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-bottom:0}.remember-link[_ngcontent-%COMP%]   mat-checkbox[_ngcontent-%COMP%], .remember-link[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{font-size:14px;color:#736d70}.remember-link[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, .remember-link[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:focus{color:#736d70}body[_ngcontent-%COMP%]{background:url(loginbg.ab2d1e683e1646e0260d.jpg) no-repeat center/cover #651137}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}