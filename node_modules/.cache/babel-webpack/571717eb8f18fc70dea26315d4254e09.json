{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { Percent } from \"./Percent\";\nimport { Color } from \"./Color\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\n/**\r\n * @ignore\r\n */\n\nexport function waitForAnimations(animations) {\n  return __awaiter(this, void 0, void 0, function () {\n    var promises_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(animations !== undefined)) return [3\n          /*break*/\n          , 2];\n          promises_1 = [];\n          $object.each(animations, function (_, animation) {\n            promises_1.push(animation.waitForStop());\n          });\n          return [4\n          /*yield*/\n          , Promise.all(promises_1)];\n\n        case 1:\n          _a.sent();\n\n          _a.label = 2;\n\n        case 2:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @ignore\r\n */\n\nexport function normalize(value, min, max) {\n  if (min === max) {\n    return 0;\n  } else {\n    return Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function range(diff, from, to) {\n  return from + diff * (to - from);\n}\n/**\r\n * @ignore\r\n */\n\nexport function defaultInterpolate(diff, from, to) {\n  if (diff >= 1) {\n    return to;\n  } else {\n    return from;\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function percentInterpolate(diff, from, to) {\n  return new Percent(range(diff, from.percent, to.percent));\n}\n/**\r\n * @ignore\r\n */\n\nexport function colorInterpolate(diff, from, to) {\n  return Color.interpolate(diff, from, to);\n}\n/**\r\n * @ignore\r\n */\n\nexport function getInterpolate(from, to) {\n  if (typeof from === \"number\" && typeof to === \"number\") {\n    return range;\n  }\n\n  if (from instanceof Percent && to instanceof Percent) {\n    return percentInterpolate;\n  }\n\n  if (from instanceof Color && to instanceof Color) {\n    return colorInterpolate;\n  }\n\n  return defaultInterpolate;\n}\n/**\r\n * @ignore\r\n */\n\nvar AnimationTime =\n/** @class */\nfunction () {\n  function AnimationTime(entity, duration) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_duration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_playingDuration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_startingTime\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_current\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_from\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_to\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"easing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._entity = entity;\n    this._duration = duration;\n  }\n\n  Object.defineProperty(AnimationTime.prototype, \"_stopEvent\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var type = \"stopped\";\n\n      if (this.events.isEnabled(type)) {\n        this.events.dispatch(type, {\n          type: type,\n          target: this\n        });\n      }\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"_runAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (currentTime) {\n      if (this._playingDuration !== null) {\n        if (this._startingTime === null) {\n          this._startingTime = currentTime;\n          return true;\n        } else {\n          var diff = (currentTime - this._startingTime) / this._playingDuration;\n\n          if (diff >= 1) {\n            this._playingDuration = null;\n            this._startingTime = null;\n            this._from = this._to;\n            this._current = this._to;\n\n            this._entity.markDirty();\n\n            this._stopEvent();\n\n            var type = \"ended\";\n\n            if (this.events.isEnabled(type)) {\n              this.events.dispatch(type, {\n                type: type,\n                target: this\n              });\n            }\n\n            return false;\n          } else {\n            this._current = range(diff, this._from, this._to);\n\n            this._entity.markDirty();\n\n            var type = \"progress\";\n\n            if (this.events.isEnabled(type)) {\n              this.events.dispatch(type, {\n                type: type,\n                target: this,\n                progress: diff\n              });\n            }\n\n            return true;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"_play\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._from = this._current;\n\n      if (this._playingDuration === null) {\n        this._entity._root._addAnimation(this);\n\n        var type = \"started\";\n\n        if (this.events.isEnabled(type)) {\n          this.events.dispatch(type, {\n            type: type,\n            target: this\n          });\n        }\n      } else {\n        this._startingTime = null;\n      }\n\n      this._playingDuration = Math.abs(this._to - this._from) * this._duration;\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"duration\", {\n    get: function () {\n      return this._duration;\n    },\n    set: function (value) {\n      if (this._duration !== value) {\n        this._duration = value;\n\n        if (value === 0) {\n          this.jumpTo(this._to);\n        } else if (this._current !== this._to) {\n          this._play();\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimationTime.prototype, \"current\", {\n    get: function () {\n      if (this.easing) {\n        return this.easing(this._current);\n      } else {\n        return this._current;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimationTime.prototype, \"stop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.jumpTo(this._current);\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"jumpTo\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      if (this._current !== value) {\n        this._entity.markDirty();\n      }\n\n      if (this._playingDuration !== null) {\n        this._stopEvent();\n      }\n\n      this._playingDuration = null;\n      this._startingTime = null;\n      this._current = value;\n      this._from = value;\n      this._to = value;\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"tweenTo\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      if (this._current === value || this._duration === 0) {\n        this.jumpTo(value);\n      } else {\n        if (this._to !== value) {\n          this._to = value;\n\n          this._play();\n        }\n      }\n    }\n  });\n  return AnimationTime;\n}();\n\nexport { AnimationTime };\n/*export class AnimationValue extends AnimationTime {\r\n    public _min: number;\r\n    public _max: number;\r\n\r\n    constructor(entity: Entity, duration: number, min: number, max: number) {\r\n        super(entity, duration);\r\n        this._min = min;\r\n        this._max = max;\r\n    }\r\n\r\n    public get min(): number {\r\n        return this._min;\r\n    }\r\n\r\n    public set min(value: number) {\r\n        if (this._min !== value) {\r\n            this._min = value;\r\n            this._entity.markDirty();\r\n        }\r\n    }\r\n\r\n    public get max(): number {\r\n        return this._max;\r\n    }\r\n\r\n    public set max(value: number) {\r\n        if (this._max !== value) {\r\n            this._max = value;\r\n            this._entity.markDirty();\r\n        }\r\n    }\r\n\r\n    public currentValue(): number {\r\n        return range(super.currentTime(), this._min, this._max);\r\n    }\r\n\r\n    public jumpToValue(value: number) {\r\n        super.jumpToTime(normalize(value, this._min, this._max));\r\n    }\r\n\r\n    public tweenToValue(value: number) {\r\n        super.tweenToTime(normalize(value, this._min, this._max));\r\n    }\r\n}\r\n*/\n//# sourceMappingURL=Animation.js.map","map":null,"metadata":{},"sourceType":"module"}