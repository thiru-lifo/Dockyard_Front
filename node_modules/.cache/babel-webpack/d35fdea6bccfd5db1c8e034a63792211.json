{"ast":null,"code":"import { __extends } from \"tslib\"; // import * as $object from \"../util/Object\";\n\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\nvar RadialLabel =\n/** @class */\nfunction (_super) {\n  __extends(RadialLabel, _super);\n\n  function RadialLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_flipped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(RadialLabel.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._textKeys.push(\"textType\", \"kerning\");\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_makeText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._text = this.children.push(RadialText.new(this._root, {}));\n    }\n  });\n  /**\r\n   * Returns base radius in pixels.\r\n   *\r\n   * @return Base radius\r\n   */\n\n  Object.defineProperty(RadialLabel.prototype, \"baseRadius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var radiusPrivate = this.getPrivate(\"radius\", 0);\n      var innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n      var baseRadius = this.get(\"baseRadius\", 0);\n      return innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n    }\n  });\n  /**\r\n   * Returns radius adjustment in pixels.\r\n   *\r\n   * @return Radius\r\n   */\n\n  Object.defineProperty(RadialLabel.prototype, \"radius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var inside = this.get(\"inside\", false);\n      return this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this);\n\n      if (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n        var textType = this.get(\"textType\", \"adjusted\");\n        var inside = this.get(\"inside\", false);\n        var orientation_1 = this.get(\"orientation\");\n        var labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n        this._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\n        this._text.set(\"inside\", inside);\n\n        var sin = $math.sin(labelAngle);\n        var cos = $math.cos(labelAngle);\n        var baseRadius = this.baseRadius();\n        var radius = this.radius();\n        this._display.angle = 0;\n\n        if (textType == \"circular\") {\n          this.setAll({\n            paddingTop: 0,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0\n          }); // Circular labels are handled and positioned differently\n\n          this._text.set(\"orientation\", orientation_1);\n\n          this._text.set(\"radius\", radius);\n        } else {\n          if (baseRadius == 0) {\n            labelAngle = 0;\n            radius = 0;\n          } // Positioning of radial/regular labels are teh same\n\n\n          var x = radius * cos;\n          var y = radius * sin;\n\n          if (textType == \"radial\") {\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n\n            if (labelAngle < 90 || labelAngle > 270 || orientation_1 != \"auto\") {\n              this._display.angle = labelAngle; // + 90;\n\n              this._flipped = false;\n            } else {\n              this._display.angle = labelAngle + 180;\n              this._flipped = true;\n            }\n\n            this._dirty.rotation = false;\n          } else if (textType == \"adjusted\") {\n            this.setRaw(\"centerX\", p50);\n            this.setRaw(\"centerY\", p50);\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n          } else if (textType == \"regular\") {\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n          }\n        }\n\n        this.markDirtyPosition();\n        this.markDirtyBounds();\n      }\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_updatePosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var textType = this.get(\"textType\", \"regular\");\n      var inside = this.get(\"inside\", false);\n      var dx = 0;\n      var dy = 0;\n      var labelAngle = this.get(\"labelAngle\", 0);\n      var bounds = this.localBounds();\n      var w = bounds.right - bounds.left;\n      var h = bounds.bottom - bounds.top;\n\n      if (textType == \"radial\") {\n        if (this._flipped) {\n          var centerX = this.get(\"centerX\");\n\n          if (centerX instanceof Percent) {\n            w = w * (1 - centerX.value * 2);\n          }\n\n          dx = w * $math.cos(labelAngle);\n          dy = w * $math.sin(labelAngle);\n        }\n      } else if (!inside && textType == \"adjusted\") {\n        dx = w / 2 * $math.cos(labelAngle);\n        dy = h / 2 * $math.sin(labelAngle);\n      }\n\n      this.setRaw(\"dx\", dx);\n      this.setRaw(\"dy\", dy);\n\n      _super.prototype._updatePosition.call(this);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"text\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RadialLabel, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialLabel\"\n  });\n  Object.defineProperty(RadialLabel, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Label.classNames.concat([RadialLabel.className])\n  });\n  return RadialLabel;\n}(Label);\n\nexport { RadialLabel }; //# sourceMappingURL=RadialLabel.js.map","map":null,"metadata":{},"sourceType":"module"}