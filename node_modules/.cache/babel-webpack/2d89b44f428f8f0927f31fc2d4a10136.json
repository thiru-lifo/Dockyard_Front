{"ast":null,"code":"function parseDate(timezone, date) {\n  var year = 0;\n  var month = 0;\n  var day = 1;\n  var hour = 0;\n  var minute = 0;\n  var second = 0;\n  var millisecond = 0;\n  var weekday = 0;\n  timezone.formatToParts(date).forEach(function (x) {\n    switch (x.type) {\n      case \"year\":\n        year = +x.value;\n        break;\n\n      case \"month\":\n        month = +x.value - 1;\n        break;\n\n      case \"day\":\n        day = +x.value;\n        break;\n\n      case \"hour\":\n        hour = +x.value;\n        break;\n\n      case \"minute\":\n        minute = +x.value;\n        break;\n\n      case \"second\":\n        second = +x.value;\n        break;\n\n      case \"fractionalSecond\":\n        millisecond = +x.value;\n        break;\n\n      case \"weekday\":\n        switch (x.value) {\n          case \"Sun\":\n            weekday = 0;\n            break;\n\n          case \"Mon\":\n            weekday = 1;\n            break;\n\n          case \"Tue\":\n            weekday = 2;\n            break;\n\n          case \"Wed\":\n            weekday = 3;\n            break;\n\n          case \"Thu\":\n            weekday = 4;\n            break;\n\n          case \"Fri\":\n            weekday = 5;\n            break;\n\n          case \"Sat\":\n            weekday = 6;\n            break;\n        }\n\n    }\n  });\n\n  if (hour === 24) {\n    hour = 0;\n  }\n\n  return {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond,\n    weekday: weekday\n  };\n}\n\nfunction toUTCDate(timezone, date) {\n  var _a = parseDate(timezone, date),\n      year = _a.year,\n      month = _a.month,\n      day = _a.day,\n      hour = _a.hour,\n      minute = _a.minute,\n      second = _a.second,\n      millisecond = _a.millisecond;\n\n  return Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\n\nvar Timezone =\n/** @class */\nfunction () {\n  function Timezone(timezone, isReal) {\n    Object.defineProperty(this, \"_utc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_dtf\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    this.name = timezone;\n    this._utc = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: \"UTC\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      weekday: \"short\",\n      fractionalSecondDigits: 3\n    });\n    this._dtf = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: timezone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      weekday: \"short\",\n      fractionalSecondDigits: 3\n    });\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   timezone  IANA timezone\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Timezone, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (timezone) {\n      return new this(timezone, true);\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"convertLocal\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      var offset = this.offsetUTC(date);\n      var userOffset = date.getTimezoneOffset();\n      var output = new Date(date);\n      output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n      var newUserOffset = output.getTimezoneOffset();\n\n      if (userOffset != newUserOffset) {\n        output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);\n      }\n\n      return output;\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"offsetUTC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      var utc = toUTCDate(this._utc, date);\n      var dtf = toUTCDate(this._dtf, date);\n      return (utc - dtf) / 60000;\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"parseDate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      return parseDate(this._dtf, date);\n    }\n  });\n  return Timezone;\n}();\n\nexport { Timezone }; //# sourceMappingURL=Timezone.js.map","map":null,"metadata":{},"sourceType":"module"}