{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { List } from \"./List\";\nimport * as $array from \"./Array\";\n/**\r\n * A version of [[List]] to hold children of the [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n */\n\nvar Children =\n/** @class */\nfunction (_super) {\n  __extends(Children, _super);\n\n  function Children(container) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_container\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this._container = container;\n    _this._events = _this.events.onAll(function (change) {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, function (x) {\n          _this._onRemoved(x);\n        });\n      } else if (change.type === \"push\") {\n        _this._onInserted(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        _this._onRemoved(change.oldValue);\n\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"insertIndex\") {\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"removeIndex\") {\n        _this._onRemoved(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        _this._onRemoved(change.value);\n\n        _this._onInserted(change.value, change.newIndex);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Children.prototype, \"_onInserted\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child, index) {\n      child._setParent(this._container, true);\n\n      var childrenDisplay = this._container._childrenDisplay;\n\n      if (index === undefined) {\n        childrenDisplay.addChild(child._display);\n      } else {\n        childrenDisplay.addChildAt(child._display, index);\n      }\n    }\n  });\n  Object.defineProperty(Children.prototype, \"_onRemoved\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child) {\n      this._container._childrenDisplay.removeChild(child._display);\n\n      this._container.markDirtyBounds();\n\n      this._container.markDirty();\n    }\n  });\n  /**\r\n   * Returns `true` if obejct is disposed.\r\n   */\n\n  Object.defineProperty(Children.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Permanently dispose this object.\r\n   */\n\n  Object.defineProperty(Children.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._events.dispose();\n\n        $array.each(this.values, function (child) {\n          child.dispose();\n        });\n      }\n    }\n  });\n  return Children;\n}(List);\n\nexport { Children }; //# sourceMappingURL=Children.js.map","map":null,"metadata":{},"sourceType":"module"}