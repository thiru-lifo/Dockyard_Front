{"ast":null,"code":"import { __read } from \"tslib\";\n/**\r\n * @ignore\r\n */\n\nvar MonotoneYTension =\n/** @class */\nfunction () {\n  function MonotoneYTension(context, tension) {\n    Object.defineProperty(this, \"_line\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_point\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_context\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_x0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_x1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_t0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_tension\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    this._context = context;\n    this._tension = tension;\n  }\n\n  Object.defineProperty(MonotoneYTension.prototype, \"areaStart\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._line = 0;\n    }\n  });\n  Object.defineProperty(MonotoneYTension.prototype, \"areaEnd\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._line = NaN;\n    }\n  });\n  Object.defineProperty(MonotoneYTension.prototype, \"lineStart\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n      this._point = 0;\n    }\n  });\n  Object.defineProperty(MonotoneYTension.prototype, \"lineEnd\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x1, this._y1);\n\n          break;\n\n        case 3:\n          point(this, this._t0, slope2(this, this._t0));\n          break;\n      }\n\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    }\n  });\n  Object.defineProperty(MonotoneYTension.prototype, \"point\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (x, y) {\n      var _a;\n\n      _a = __read([y, x], 2), x = _a[0], y = _a[1];\n      var t1 = NaN;\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(y, x) : this._context.moveTo(y, x);\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n          point(this, slope2(this, t1 = slope3(this, x, y)), t1);\n          break;\n\n        default:\n          point(this, this._t0, t1 = slope3(this, x, y));\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  });\n  return MonotoneYTension;\n}();\n\nexport { MonotoneYTension };\n/**\r\n * @ignore\r\n */\n\nexport function curveMonotoneYTension(tension) {\n  function monotoneYTension(context) {\n    return new MonotoneYTension(context, tension);\n  }\n\n  monotoneYTension.tension = function (tension) {\n    return curveMonotoneYTension(+tension);\n  };\n\n  return monotoneYTension;\n}\n/**\r\n * @ignore\r\n */\n\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0;\n  var h1 = x2 - that._x1;\n  var s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\n  var s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\n  var p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 1.5 * (1 - that._tension);\n\n  that._context.bezierCurveTo(y0 + dx * t0, x0 + dx, y1 - dx * t1, x1 - dx, y1, x1);\n} //# sourceMappingURL=MonotoneYTension.js.map","map":null,"metadata":{},"sourceType":"module"}