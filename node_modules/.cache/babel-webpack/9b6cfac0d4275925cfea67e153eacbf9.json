{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a slice shape.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n */\n\nvar Slice =\n/** @class */\nfunction (_super) {\n  __extends(Slice, _super);\n\n  function Slice() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * @ignore\r\n     */\n\n\n    Object.defineProperty(_this, \"ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * @ignore\r\n     */\n\n    Object.defineProperty(_this, \"iy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_generator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: arc()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Slice.prototype, \"_getTooltipPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var tooltipX = this.get(\"tooltipX\");\n      var tooltipY = this.get(\"tooltipY\");\n      var x = 0;\n      var y = 0;\n\n      if ($type.isNumber(tooltipX)) {\n        x = tooltipX;\n      }\n\n      if ($type.isNumber(tooltipY)) {\n        y = tooltipY;\n      }\n\n      var radius = this.get(\"radius\", 0);\n      var innerRadius = this.get(\"innerRadius\", 0);\n      var dRadius = this.get(\"dRadius\", 0);\n      var dInnerRadius = this.get(\"dInnerRadius\", 0);\n      radius += dRadius;\n      innerRadius += dInnerRadius;\n\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n\n      if (tooltipX instanceof Percent) {\n        x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);\n      }\n\n      if (tooltipY instanceof Percent) {\n        y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);\n      }\n\n      if (this.get(\"arc\") >= 360 && innerRadius == 0) {\n        x = 0;\n        y = 0;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var startAngle = this.get(\"startAngle\", 0);\n        var arc_1 = this.get(\"arc\", 0);\n        var generator = this._generator;\n\n        if (arc_1 < 0) {\n          startAngle = startAngle + arc_1;\n          arc_1 = arc_1 * -1;\n        }\n\n        if (arc_1 > 0.1) {\n          // this fixes bug with full circle when arc is very small\n          generator.cornerRadius(this.get(\"cornerRadius\", 0));\n        }\n\n        generator.context(this._display);\n        var radius = this.get(\"radius\", 0);\n        var innerRadius = this.get(\"innerRadius\", 0);\n        var dRadius = this.get(\"dRadius\", 0);\n        var dInnerRadius = this.get(\"dInnerRadius\", 0);\n        radius += dRadius;\n        innerRadius += dInnerRadius;\n\n        if (innerRadius < 0) {\n          innerRadius = radius + innerRadius;\n        }\n\n        generator({\n          innerRadius: innerRadius,\n          outerRadius: radius,\n          startAngle: (startAngle + 90) * $math.RADIANS,\n          endAngle: (startAngle + arc_1 + 90) * $math.RADIANS\n        });\n        var middleAngle = startAngle + arc_1 / 2;\n        this.ix = $math.cos(middleAngle);\n        this.iy = $math.sin(middleAngle);\n      }\n\n      if (this.isDirty(\"shiftRadius\")) {\n        var shiftRadius = this.get(\"shiftRadius\", 0);\n        this.setRaw(\"dx\", this.ix * shiftRadius);\n        this.setRaw(\"dy\", this.iy * shiftRadius);\n        this.markDirtyPosition();\n      }\n    }\n  });\n  Object.defineProperty(Slice, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Slice\"\n  });\n  Object.defineProperty(Slice, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Slice.className])\n  });\n  return Slice;\n}(Graphics);\n\nexport { Slice }; //# sourceMappingURL=Slice.js.map","map":null,"metadata":{},"sourceType":"module"}