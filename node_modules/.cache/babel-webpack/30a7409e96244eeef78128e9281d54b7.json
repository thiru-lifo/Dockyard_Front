{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n/**\r\n * Line pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar LinePattern =\n/** @class */\nfunction (_super) {\n  __extends(LinePattern, _super);\n\n  function LinePattern() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(LinePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"gap\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(LinePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n\n      var w = this.get(\"width\", 100);\n      var h = this.get(\"height\", 100);\n      var gap = this.get(\"gap\", 0);\n      var strokeWidth = this.get(\"strokeWidth\", 1);\n\n      if (!gap) {\n        this._display.moveTo(0, 0);\n\n        this._display.lineTo(w, 0);\n      } else {\n        var step = gap + strokeWidth;\n        var count = h / step;\n\n        for (var i = -count; i < count * 2; i++) {\n          var y = Math.round(i * step - step / 2) + 0.5;\n\n          this._display.moveTo(-w, y);\n\n          this._display.lineTo(w * 2, y);\n        }\n      }\n\n      this._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n      var strokeDasharray = this.get(\"strokeDasharray\");\n\n      if ($type.isNumber(strokeDasharray)) {\n        if (strokeDasharray < 0.5) {\n          strokeDasharray = [0];\n        } else {\n          strokeDasharray = [strokeDasharray];\n        }\n      }\n\n      this._display.setLineDash(strokeDasharray);\n\n      var strokeDashoffset = this.get(\"strokeDashoffset\");\n\n      if (strokeDashoffset) {\n        this._display.setLineDashOffset(strokeDashoffset);\n      }\n\n      this._display.endStroke();\n    }\n  });\n  Object.defineProperty(LinePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinePattern\"\n  });\n  Object.defineProperty(LinePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([LinePattern.className])\n  });\n  return LinePattern;\n}(Pattern);\n\nexport { LinePattern }; //# sourceMappingURL=LinePattern.js.map","map":null,"metadata":{},"sourceType":"module"}