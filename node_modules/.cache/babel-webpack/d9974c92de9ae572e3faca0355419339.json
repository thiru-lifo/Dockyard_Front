{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle } from \"./Rectangle\";\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar RoundedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(RoundedRectangle, _super);\n\n  function RoundedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(RoundedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var width = this.width();\n      var height = this.height();\n      var w = width;\n      var h = height;\n      var wSign = w / Math.abs(width);\n      var hSign = h / Math.abs(height);\n\n      if ($type.isNumber(w) && $type.isNumber(h)) {\n        var minSide = Math.min(w, h) / 2;\n        var crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n        var crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n        var crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n        var crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n        var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n        crtl = $math.fitToRange(crtl, 0, maxcr);\n        crtr = $math.fitToRange(crtr, 0, maxcr);\n        crbr = $math.fitToRange(crbr, 0, maxcr);\n        crbl = $math.fitToRange(crbl, 0, maxcr);\n        var display = this._display;\n        display.moveTo(crtl * wSign, 0);\n        display.lineTo(w - crtr * wSign, 0);\n\n        if (crtr > 0) {\n          display.arcTo(w, 0, w, crtr * hSign, crtr);\n        }\n\n        display.lineTo(w, h - crbr * hSign);\n\n        if (crbr > 0) {\n          display.arcTo(w, h, w - crbr * wSign, h, crbr);\n        }\n\n        display.lineTo(crbl * wSign, h);\n\n        if (crbl > 0) {\n          display.arcTo(0, h, 0, h - crbl * hSign, crbl);\n        }\n\n        display.lineTo(0, crtl * hSign);\n\n        if (crtl > 0) {\n          display.arcTo(0, 0, crtl * wSign, 0, crtl);\n        }\n\n        display.closePath();\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RoundedRectangle\"\n  });\n  Object.defineProperty(RoundedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Rectangle.classNames.concat([RoundedRectangle.className])\n  });\n  return RoundedRectangle;\n}(Rectangle);\n\nexport { RoundedRectangle }; //# sourceMappingURL=RoundedRectangle.js.map","map":null,"metadata":{},"sourceType":"module"}