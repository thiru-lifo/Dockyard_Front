{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n/**\r\n * Used to render horizontal axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n * @important\r\n */\n\nvar AxisRendererX =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX, _super);\n\n  function AxisRendererX() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Rectangle.new(_this._root, {\n        width: p100,\n        isMeasured: false,\n        themeTags: [\"axis\", \"x\", \"thumb\"]\n      })\n    });\n    return _this;\n  }\n\n  Object.defineProperty(AxisRendererX.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n\n      _super.prototype._afterNew.call(this);\n\n      this.setPrivateRaw(\"letter\", \"X\");\n      var gridTemplate = this.grid.template;\n      gridTemplate.set(\"height\", p100);\n      gridTemplate.set(\"width\", 0);\n      gridTemplate.set(\"draw\", function (display, graphics) {\n        display.moveTo(0, 0);\n        display.lineTo(0, graphics.height());\n      });\n      this.set(\"draw\", function (display, graphics) {\n        display.moveTo(0, 0);\n        display.lineTo(graphics.width(), 0);\n      });\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      var axis = this.axis;\n      axis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n      var opposite = \"opposite\";\n      var inside = \"inside\";\n\n      if (this.isDirty(opposite) || this.isDirty(inside)) {\n        var chart = this.chart;\n        var axisChildren = axis.children;\n\n        if (this.get(inside)) {\n          axis.addTag(inside);\n        } else {\n          axis.removeTag(inside);\n        }\n\n        if (chart) {\n          if (this.get(opposite)) {\n            var children = chart.topAxesContainer.children;\n\n            if (children.indexOf(axis) == -1) {\n              children.insertIndex(0, axis);\n            }\n\n            axis.addTag(opposite);\n            axisChildren.moveValue(this);\n          } else {\n            var children = chart.bottomAxesContainer.children;\n\n            if (children.indexOf(axis) == -1) {\n              children.moveValue(axis);\n            }\n\n            axis.removeTag(opposite);\n            axisChildren.moveValue(this, 0);\n          }\n\n          axis.ghostLabel._applyThemes();\n\n          this.labels.each(function (label) {\n            label._applyThemes();\n          });\n\n          this.root._markDirtyRedraw();\n        }\n\n        axis.markDirtySize();\n      }\n\n      this.thumb.setPrivate(\"height\", axis.labelsContainer.height());\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_getPan\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (point1, point2) {\n      return (point2.x - point1.x) / this.width();\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"toAxisPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var start = this._start || 0;\n      var end = this._end || 1;\n      position -= this._ls;\n      position = position * (end - start) / this._lc;\n\n      if (!this.get(\"inversed\")) {\n        position = start + position;\n      } else {\n        position = end - position;\n      }\n\n      return position;\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_updateLC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var axis = this.axis;\n      var parent = axis.parent;\n\n      if (parent) {\n        var w = parent.innerWidth();\n        this._lc = this.axisLength() / w;\n        this._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n      }\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"_updatePositions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var axis = this.axis;\n      axis.gridContainer.set(\"x\", axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent.get(\"paddingLeft\", 0));\n      axis.bulletsContainer.set(\"y\", this.y());\n      var chart = axis.chart;\n\n      if (chart) {\n        var plotContainer = chart.plotContainer;\n        var axisHeader = axis.axisHeader;\n        var width = axis.get(\"marginLeft\", 0);\n        var x = axis.x() - width;\n        var parent_1 = axis.parent;\n\n        if (parent_1) {\n          x -= parent_1.get(\"paddingLeft\", 0);\n        }\n\n        if (axisHeader.children.length > 0) {\n          width = axis.axisHeader.width();\n          axis.set(\"marginLeft\", width);\n        } else {\n          axisHeader.set(\"width\", width);\n        }\n\n        axisHeader.setAll({\n          x: x,\n          y: -1,\n          height: plotContainer.height() + 2\n        });\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"processAxis\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype.processAxis.call(this);\n\n      var axis = this.axis;\n      axis.set(\"width\", p100);\n      var verticalLayout = this._root.verticalLayout;\n      axis.set(\"layout\", verticalLayout);\n      axis.labelsContainer.set(\"width\", p100);\n      axis.axisHeader.setAll({\n        layout: verticalLayout\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.axis.width();\n    }\n  });\n  /**\r\n   * Converts axis relative position to actual coordinate in pixels.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Point\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"positionToPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      return {\n        x: this.positionToCoordinate(position),\n        y: 0\n      };\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateTick\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tick, position, endPosition, count) {\n      if (tick) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        var location_1 = 0.5;\n\n        if ($type.isNumber(count) && count > 1) {\n          location_1 = tick.get(\"multiLocation\", location_1);\n        } else {\n          location_1 = tick.get(\"location\", location_1);\n        }\n\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location_1;\n        }\n\n        tick.set(\"x\", Math.round(this.positionToCoordinate(position) - this.axis._crispX + 0.5));\n        var length_1 = tick.get(\"length\", 0);\n        var inside = tick.get(\"inside\", this.get(\"inside\", false));\n\n        if (this.get(\"opposite\")) {\n          tick.set(\"y\", p100);\n\n          if (!inside) {\n            length_1 *= -1;\n          }\n        } else {\n          tick.set(\"y\", 0);\n\n          if (inside) {\n            length_1 *= -1;\n          }\n        }\n\n        tick.set(\"draw\", function (display) {\n          display.moveTo(0, 0);\n          display.lineTo(0, length_1);\n        });\n        this.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (label, position, endPosition, count) {\n      if (label) {\n        var location_2 = 0.5;\n\n        if ($type.isNumber(count) && count > 1) {\n          location_2 = label.get(\"multiLocation\", location_2);\n        } else {\n          location_2 = label.get(\"location\", location_2);\n        }\n\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        var inside = label.get(\"inside\", this.get(\"inside\", false));\n        var opposite = this.get(\"opposite\");\n\n        if (opposite) {\n          if (!inside) {\n            label.set(\"position\", \"relative\");\n            label.set(\"y\", p100);\n          } else {\n            label.set(\"position\", \"absolute\");\n            label.set(\"y\", 0);\n          }\n        } else {\n          if (!inside) {\n            label.set(\"y\", undefined);\n            label.set(\"position\", \"relative\");\n          } else {\n            label.set(\"y\", 0);\n            label.set(\"position\", \"absolute\");\n          }\n        }\n\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location_2;\n        }\n\n        label.set(\"x\", this.positionToCoordinate(position));\n        this.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateGrid\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (grid, position, endPosition) {\n      if (grid) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        var location_3 = grid.get(\"location\", 0.5);\n\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location_3;\n        }\n\n        grid.set(\"x\", Math.round(this.positionToCoordinate(position) - this.axis._crispX + 0.5));\n        this.toggleVisibility(grid, position, 0, 1);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (bullet, position, endPosition) {\n      if (bullet) {\n        var sprite = bullet.get(\"sprite\");\n\n        if (sprite) {\n          if (!$type.isNumber(position)) {\n            position = 0;\n          }\n\n          var location_4 = bullet.get(\"location\", 0.5);\n\n          if ($type.isNumber(endPosition) && endPosition != position) {\n            position = position + (endPosition - position) * location_4;\n          }\n\n          var bulletPosition = this.axis.roundAxisPosition(position, location_4);\n          var previousBullet = this.axis._bullets[bulletPosition];\n          var d = -1;\n\n          if (this.get(\"opposite\")) {\n            d = 1;\n          }\n\n          if (bullet.get(\"stacked\")) {\n            if (previousBullet) {\n              var previousSprite = previousBullet.get(\"sprite\");\n\n              if (previousSprite) {\n                sprite.set(\"y\", previousSprite.y() + previousSprite.height() * d);\n              }\n            } else {\n              sprite.set(\"y\", 0);\n            }\n          }\n\n          this.axis._bullets[bulletPosition] = bullet;\n          sprite.set(\"x\", this.positionToCoordinate(position));\n          this.toggleVisibility(sprite, position, 0, 1);\n        }\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (fill, position, endPosition) {\n      if (fill) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n\n        if (!$type.isNumber(endPosition)) {\n          endPosition = 1;\n        }\n\n        var x0 = this.positionToCoordinate(position);\n        var x1 = this.positionToCoordinate(endPosition);\n        this.fillDrawMethod(fill, x0, x1);\n      }\n    }\n  });\n  Object.defineProperty(AxisRendererX.prototype, \"fillDrawMethod\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (fill, x0, x1) {\n      var _this = this;\n\n      fill.set(\"draw\", function (display) {\n        var _a; //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n        // using for holes, so can not be rectangle\n\n\n        var h = _this.axis.gridContainer.height();\n\n        var w = _this.width();\n\n        if (x1 < x0) {\n          _a = __read([x0, x1], 2), x1 = _a[0], x0 = _a[1];\n        }\n\n        if (x0 > w || x1 < 0) {\n          return;\n        }\n        /*\r\n        const limit = 10000;\r\n              x0 = Math.max(-limit, x0);\r\n        x1 = Math.min(limit, x1);\r\n        */\n\n\n        display.moveTo(x0, 0);\n        display.lineTo(x1, 0);\n        display.lineTo(x1, h);\n        display.lineTo(x0, h);\n        display.lineTo(x0, 0);\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"positionTooltip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tooltip, position) {\n      this._positionTooltip(tooltip, {\n        x: this.positionToCoordinate(position),\n        y: 0\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(AxisRendererX.prototype, \"updateTooltipBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tooltip) {\n      var inside = this.get(\"inside\");\n      var num = 100000;\n\n      var global = this._display.toGlobal({\n        x: 0,\n        y: 0\n      });\n\n      var x = global.x;\n      var y = 0;\n      var w = this.axisLength();\n      var h = num;\n      var pointerOrientation = \"up\";\n\n      if (this.get(\"opposite\")) {\n        if (inside) {\n          pointerOrientation = \"up\";\n          y = global.y;\n          h = num;\n        } else {\n          pointerOrientation = \"down\";\n          y = global.y - num;\n          h = num;\n        }\n      } else {\n        if (inside) {\n          pointerOrientation = \"down\";\n          y = global.y - num;\n          h = num;\n        } else {\n          pointerOrientation = \"up\";\n          y = global.y;\n          h = num;\n        }\n      }\n\n      var bounds = {\n        left: x,\n        right: x + w,\n        top: y,\n        bottom: y + h\n      };\n      var oldBounds = tooltip.get(\"bounds\");\n\n      if (!$utils.sameBounds(bounds, oldBounds)) {\n        tooltip.set(\"bounds\", bounds);\n        tooltip.set(\"pointerOrientation\", pointerOrientation);\n      }\n    }\n  });\n  Object.defineProperty(AxisRendererX, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"AxisRendererX\"\n  });\n  Object.defineProperty(AxisRendererX, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: AxisRenderer.classNames.concat([AxisRendererX.className])\n  });\n  return AxisRendererX;\n}(AxisRenderer);\n\nexport { AxisRendererX }; //# sourceMappingURL=AxisRendererX.js.map","map":null,"metadata":{},"sourceType":"module"}