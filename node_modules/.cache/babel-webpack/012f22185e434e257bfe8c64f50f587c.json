{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $array from \"../util/Array\";\nimport * as $math from \"../util/Math\";\n/**\r\n * A grid children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar GridLayout =\n/** @class */\nfunction (_super) {\n  __extends(GridLayout, _super);\n\n  function GridLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(GridLayout.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._setRawDefault(\"maxColumns\", Number.MAX_VALUE);\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(GridLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var paddingRight = container.get(\"paddingRight\", 0);\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableWidth = container.maxWidth() - paddingLeft - paddingRight;\n      var minCellWidth = availableWidth;\n      var maxCellWidth = 1;\n      eachChildren(container, function (child) {\n        if (child.get(\"visible\") && child.getPrivate(\"visible\") && !child.get(\"forceHidden\")) {\n          if (child.get(\"position\") != \"absolute\") {\n            var childWidth = child.width();\n\n            if (childWidth < minCellWidth) {\n              minCellWidth = childWidth;\n            }\n\n            if (childWidth > maxCellWidth) {\n              maxCellWidth = childWidth;\n            }\n          }\n        }\n      });\n      minCellWidth = $math.fitToRange(minCellWidth, 1, availableWidth);\n      maxCellWidth = $math.fitToRange(maxCellWidth, 1, availableWidth);\n      var columnCount = 1;\n\n      if (this.get(\"fixedWidthGrid\")) {\n        columnCount = availableWidth / maxCellWidth;\n      } else {\n        columnCount = availableWidth / minCellWidth;\n      }\n\n      columnCount = Math.max(1, Math.floor(columnCount));\n      columnCount = Math.min(this.get(\"maxColumns\", Number.MAX_VALUE), columnCount);\n      var columnWidths = this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);\n      var prevY = paddingTop;\n      var column = 0;\n      var maxColumnHeight = 0;\n      columnCount = columnWidths.length;\n      var prevX = paddingLeft;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\" && child.isVisible()) {\n          var marginTop = child.get(\"marginTop\", 0);\n          var marginBottom = child.get(\"marginBottom\", 0);\n          var bounds = child.adjustedLocalBounds();\n          var marginLeft = child.get(\"marginLeft\", 0);\n          var marginRight = child.get(\"marginRight\", 0);\n          var x = prevX + marginLeft - bounds.left;\n          var y = prevY + marginTop - bounds.top;\n          child.setPrivate(\"x\", x);\n          child.setPrivate(\"y\", y);\n          prevX += columnWidths[column] + marginRight;\n          maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);\n          column++;\n\n          if (column >= columnCount) {\n            column = 0;\n            prevX = paddingLeft;\n            prevY += maxColumnHeight;\n          }\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(GridLayout.prototype, \"getColumnWidths\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container, columnCount, maxCellWidth, availableWidth) {\n      var _this = this;\n\n      var totalWidth = 0;\n      var columnWidths = [];\n      var column = 0;\n      eachChildren(container, function (child) {\n        var bounds = child.adjustedLocalBounds();\n\n        if (child.get(\"position\") != \"absolute\" && child.isVisible()) {\n          if (_this.get(\"fixedWidthGrid\")) {\n            columnWidths[column] = maxCellWidth;\n          } else {\n            columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0));\n          }\n\n          if (column < container.children.length - 1) {\n            column++;\n\n            if (column == columnCount) {\n              column = 0;\n            }\n          }\n        }\n      });\n      $array.each(columnWidths, function (w) {\n        totalWidth += w;\n      });\n\n      if (totalWidth > availableWidth) {\n        if (columnCount > 2) {\n          columnCount -= 1;\n          return this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);\n        } else {\n          return [availableWidth];\n        }\n      }\n\n      return columnWidths;\n    }\n  });\n  Object.defineProperty(GridLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"GridLayout\"\n  });\n  Object.defineProperty(GridLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([GridLayout.className])\n  });\n  return GridLayout;\n}(Layout);\n\nexport { GridLayout }; //# sourceMappingURL=GridLayout.js.map","map":null,"metadata":{},"sourceType":"module"}