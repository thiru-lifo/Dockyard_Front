{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar PointedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(PointedRectangle, _super);\n\n  function PointedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(PointedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        this.markDirtyBounds();\n        var w = this.width();\n        var h = this.height();\n\n        if (w > 0 && h > 0) {\n          var cr = this.get(\"cornerRadius\", 8);\n          cr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n          var x = this.get(\"pointerX\", 0);\n          var y = this.get(\"pointerY\", 0);\n          var bwh = this.get(\"pointerBaseWidth\", 15) / 2; // corner coordinates\n          // top left\n\n          var xtl = 0;\n          var ytl = 0; // top right\n\n          var xtr = w;\n          var ytr = 0; // bottom right\n\n          var xbr = w;\n          var ybr = h; // bottom left\n\n          var xbl = 0;\n          var ybl = h; // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n          // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\n          var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n          var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n          var display = this._display; // top\n\n          display.moveTo(cr, 0);\n\n          if (d1 > 0 && d2 > 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, -Infinity, 0);\n            display.lineTo(stemX - bwh, 0);\n            display.lineTo(x, y);\n            display.lineTo(stemX + bwh, 0);\n          }\n\n          display.lineTo(w - cr, 0);\n          display.arcTo(w, 0, w, cr, cr); // right\n\n          if (d1 > 0 && d2 < 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n            x = $math.fitToRange(x, w, Infinity);\n            display.lineTo(w, cr);\n            display.lineTo(w, Math.max(stemY - bwh, cr));\n            display.lineTo(x, y);\n            display.lineTo(w, stemY + bwh);\n          }\n\n          display.lineTo(w, h - cr);\n          display.arcTo(w, h, w - cr, h, cr); // bottom\n\n          if (d1 < 0 && d2 < 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, h, Infinity);\n            display.lineTo(w - cr, h);\n            display.lineTo(stemX + bwh, h);\n            display.lineTo(x, y);\n            display.lineTo(stemX - bwh, h);\n          }\n\n          display.lineTo(cr, h);\n          display.arcTo(0, h, 0, h - cr, cr); // left\n\n          if (d1 < 0 && d2 > 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n            x = $math.fitToRange(x, -Infinity, 0);\n            display.lineTo(0, h - cr);\n            display.lineTo(0, stemY + bwh);\n            display.lineTo(x, y);\n            display.lineTo(0, Math.max(stemY - bwh, cr));\n          }\n\n          display.lineTo(0, cr);\n          display.arcTo(0, 0, cr, 0, cr);\n          display.closePath();\n        }\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PointedRectangle\"\n  });\n  Object.defineProperty(PointedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([PointedRectangle.className])\n  });\n  return PointedRectangle;\n}(Graphics);\n\nexport { PointedRectangle }; //# sourceMappingURL=PointedRectangle.js.map","map":null,"metadata":{},"sourceType":"module"}