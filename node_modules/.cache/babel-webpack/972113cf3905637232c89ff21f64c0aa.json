{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { Component } from \"../../core/render/Component\";\nimport { List } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { percentInterpolate } from \"../../core/util/Animation\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $time from \"../../core/util/Time\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\n/**\r\n * A base class for all series.\r\n */\n\nvar Series =\n/** @class */\nfunction (_super) {\n  __extends(Series, _super);\n\n  function Series() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_aggregatesCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_selectionAggregatesCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_dataProcessed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_psi\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_pei\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A chart series belongs to.\r\n     */\n\n    Object.defineProperty(_this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * List of bullets to use for the series.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\r\n     */\n\n    Object.defineProperty(_this, \"bullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    /**\r\n     * A [[Container]] series' bullets are stored in.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n    Object.defineProperty(_this, \"bulletsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        position: \"absolute\"\n      })\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Series.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this.valueFields.push(\"value\");\n\n      _super.prototype._afterNew.call(this);\n\n      this.setPrivate(\"customData\", {});\n\n      this._disposers.push(this.bullets.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"push\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"setIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"insertIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"removeIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else if (change.type === \"moveIndex\") {\n          _this._handleBullets(_this.dataItems);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      }));\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.bulletsContainer.dispose(); // can be in a different parent\n\n      _super.prototype._dispose.call(this);\n    }\n  });\n  Object.defineProperty(Series.prototype, \"startIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var len = this.dataItems.length;\n      return Math.min(this.getPrivate(\"startIndex\", 0), len);\n    }\n  });\n  Object.defineProperty(Series.prototype, \"endIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var len = this.dataItems.length;\n      return Math.min(this.getPrivate(\"endIndex\", len), len);\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_handleBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItems) {\n      $array.each(dataItems, function (dataItem) {\n        var bullets = dataItem.bullets;\n\n        if (bullets) {\n          $array.each(bullets, function (bullet) {\n            bullet.dispose();\n          });\n          dataItem.bullets = undefined;\n        }\n      });\n      this.markDirtyValues();\n    }\n  });\n  /**\r\n   * Looks up and returns a data item by its ID.\r\n   *\r\n   * @param   id  ID\r\n   * @return      Data item\r\n   */\n\n  Object.defineProperty(Series.prototype, \"getDataItemById\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (id) {\n      return $array.find(this.dataItems, function (dataItem) {\n        return dataItem.get(\"id\") == id;\n      });\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_makeBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _this = this;\n\n      if (this._shouldMakeBullet(dataItem)) {\n        dataItem.bullets = [];\n        this.bullets.each(function (bulletFunction) {\n          _this._makeBullet(dataItem, bulletFunction);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_shouldMakeBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_dataItem) {\n      return true;\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_makeBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, bulletFunction, index) {\n      var bullet = bulletFunction(this._root, this, dataItem);\n\n      if (bullet) {\n        var sprite = bullet.get(\"sprite\");\n\n        if (sprite) {\n          sprite._setDataItem(dataItem);\n\n          sprite.setRaw(\"position\", \"absolute\");\n          this.bulletsContainer.children.push(sprite);\n        }\n\n        bullet._index = index;\n        bullet.series = this;\n        dataItem.bullets.push(bullet);\n      }\n\n      return bullet;\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_clearDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._clearDirty.call(this);\n\n      this._aggregatesCalculated = false;\n      this._selectionAggregatesCalculated = false;\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      var startIndex = this.startIndex();\n      var endIndex = this.endIndex();\n\n      if (this.isDirty(\"heatRules\")) {\n        this._valuesDirty = true;\n      }\n\n      if (this.isPrivateDirty(\"baseValueSeries\")) {\n        var baseValueSeries = this.getPrivate(\"baseValueSeries\");\n\n        if (baseValueSeries) {\n          this._disposers.push(baseValueSeries.onPrivate(\"startIndex\", function () {\n            _this.markDirtyValues();\n          }));\n        }\n      }\n\n      var calculateAggregates = this.get(\"calculateAggregates\");\n\n      if (calculateAggregates) {\n        if (this._valuesDirty && !this._dataProcessed) {\n          if (!this._aggregatesCalculated) {\n            this._calculateAggregates(0, this.dataItems.length);\n\n            this._aggregatesCalculated = true;\n          }\n        }\n\n        if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {\n          if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {// void\n          } else {\n            this._calculateAggregates(startIndex, endIndex);\n          }\n\n          this._selectionAggregatesCalculated = true;\n        }\n      }\n\n      if (this.isDirty(\"tooltip\")) {\n        var tooltip = this.get(\"tooltip\");\n\n        if (tooltip) {\n          tooltip.hide(0);\n          tooltip.set(\"tooltipTarget\", this);\n        }\n      }\n\n      if (this.isDirty(\"fill\") || this.isDirty(\"stroke\")) {\n        var markerRectangle = void 0;\n        var legendDataItem = this.get(\"legendDataItem\");\n\n        if (legendDataItem) {\n          markerRectangle = legendDataItem.get(\"markerRectangle\");\n\n          if (markerRectangle) {\n            if (this.isVisible()) {\n              if (this.isDirty(\"stroke\")) {\n                var stroke = this.get(\"stroke\");\n                markerRectangle.set(\"stroke\", stroke);\n              }\n\n              if (this.isDirty(\"fill\")) {\n                var fill = this.get(\"fill\");\n                markerRectangle.set(\"fill\", fill);\n              }\n            }\n          }\n        }\n\n        this.updateLegendMarker(undefined);\n      }\n\n      if (this.bullets.length > 0) {\n        var startIndex_1 = this.startIndex();\n        var endIndex_1 = this.endIndex();\n\n        if (endIndex_1 < this.dataItems.length) {\n          endIndex_1++;\n        }\n\n        for (var i = startIndex_1; i < endIndex_1; i++) {\n          var dataItem = this.dataItems[i];\n\n          if (!dataItem.bullets) {\n            this._makeBullets(dataItem);\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_calculateAggregates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (startIndex, endIndex) {\n      var _this = this;\n\n      var fields = this._valueFields;\n\n      if (!fields) {\n        throw new Error(\"No value fields are set for the series.\");\n      }\n\n      var sum = {};\n      var absSum = {};\n      var count = {};\n      var low = {};\n      var high = {};\n      var open = {};\n      var close = {};\n      var average = {};\n      var previous = {};\n      $array.each(fields, function (key) {\n        sum[key] = 0;\n        absSum[key] = 0;\n        count[key] = 0;\n      });\n      $array.each(fields, function (key) {\n        var change = key + \"Change\";\n        var changePercent = key + \"ChangePercent\";\n        var changePrevious = key + \"ChangePrevious\";\n        var changePreviousPercent = key + \"ChangePreviousPercent\";\n        var changeSelection = key + \"ChangeSelection\";\n        var changeSelectionPercent = key + \"ChangeSelectionPercent\";\n        var openKey = \"valueY\";\n\n        if (key == \"valueX\" || key == \"openValueX\" || key == \"lowValueX\" || key == \"highValueX\") {\n          openKey = \"valueX\";\n        }\n\n        var baseValueSeries = _this.getPrivate(\"baseValueSeries\");\n\n        for (var i = startIndex; i < endIndex; i++) {\n          var dataItem = _this.dataItems[i];\n          var value = dataItem.get(key);\n\n          if (value != null) {\n            count[key]++;\n            sum[key] += value;\n            absSum[key] += Math.abs(value);\n            average[key] = sum[key] / count[key];\n\n            if (low[key] > value || low[key] == null) {\n              low[key] = value;\n            }\n\n            if (high[key] < value || high[key] == null) {\n              high[key] = value;\n            }\n\n            close[key] = value;\n\n            if (open[key] == null) {\n              open[key] = value;\n              previous[key] = value;\n\n              if (baseValueSeries) {\n                open[openKey] = baseValueSeries._getBase(openKey);\n              }\n            }\n\n            if (startIndex === 0) {\n              dataItem.setRaw(change, value - open[openKey]);\n              dataItem.setRaw(changePercent, (value - open[openKey]) / open[openKey] * 100);\n            }\n\n            dataItem.setRaw(changePrevious, value - previous[openKey]);\n            dataItem.setRaw(changePreviousPercent, (value - previous[openKey]) / previous[openKey] * 100);\n            dataItem.setRaw(changeSelection, value - open[openKey]);\n            dataItem.setRaw(changeSelectionPercent, (value - open[openKey]) / open[openKey] * 100);\n            previous[key] = value;\n          }\n        }\n      });\n      $array.each(fields, function (key) {\n        _this.setPrivate(key + \"AverageSelection\", average[key]);\n\n        _this.setPrivate(key + \"CountSelection\", count[key]);\n\n        _this.setPrivate(key + \"SumSelection\", sum[key]);\n\n        _this.setPrivate(key + \"AbsoluteSumSelection\", absSum[key]);\n\n        _this.setPrivate(key + \"LowSelection\", low[key]);\n\n        _this.setPrivate(key + \"HighSelection\", high[key]);\n\n        _this.setPrivate(key + \"OpenSelection\", open[key]);\n\n        _this.setPrivate(key + \"CloseSelection\", close[key]);\n      });\n\n      if (startIndex === 0 && endIndex === this.dataItems.length) {\n        $array.each(fields, function (key) {\n          _this.setPrivate(key + \"Average\", average[key]);\n\n          _this.setPrivate(key + \"Count\", count[key]);\n\n          _this.setPrivate(key + \"Sum\", sum[key]);\n\n          _this.setPrivate(key + \"AbsoluteSum\", absSum[key]);\n\n          _this.setPrivate(key + \"Low\", low[key]);\n\n          _this.setPrivate(key + \"High\", high[key]);\n\n          _this.setPrivate(key + \"Open\", open[key]);\n\n          _this.setPrivate(key + \"Close\", close[key]);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._updateChildren.call(this);\n\n      this._psi = this.startIndex();\n      this._pei = this.endIndex();\n\n      if (this.isDirty(\"visible\")) {\n        this.bulletsContainer.set(\"visible\", this.get(\"visible\"));\n      } // Apply heat rules\n\n\n      var rules = this.get(\"heatRules\");\n\n      if (this._valuesDirty && rules && rules.length > 0) {\n        $array.each(rules, function (rule) {\n          var minValue = rule.minValue || _this.getPrivate(rule.dataField + \"Low\") || 0;\n          var maxValue = rule.maxValue || _this.getPrivate(rule.dataField + \"High\") || 0;\n          $array.each(rule.target._entities, function (target) {\n            var value = target.dataItem.get(rule.dataField);\n\n            if (!$type.isNumber(value)) {\n              if (rule.neutral) {\n                target.set(rule.key, rule.neutral);\n              }\n\n              return;\n            }\n\n            var percent;\n\n            if (rule.logarithmic) {\n              percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n            } else {\n              percent = (value - minValue) / (maxValue - minValue);\n            }\n\n            if ($type.isNumber(value) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n              percent = 0.5;\n            } // fixes problems if all values are the same\n\n\n            var propertyValue;\n\n            if ($type.isNumber(rule.min)) {\n              propertyValue = rule.min + (rule.max - rule.min) * percent;\n            } else if (rule.min instanceof Color) {\n              propertyValue = Color.interpolate(percent, rule.min, rule.max);\n            } else if (rule.min instanceof Percent) {\n              propertyValue = percentInterpolate(percent, rule.min, rule.max);\n            }\n\n            if (rule.customFunction) {\n              rule.customFunction.call(_this, target, minValue, maxValue, value);\n            } else {\n              target.set(rule.key, propertyValue);\n            }\n          });\n        });\n      }\n\n      if (this.bullets.length > 0) {\n        var count = this.dataItems.length;\n        var startIndex = this.startIndex();\n        var endIndex = this.endIndex();\n\n        if (endIndex < count) {\n          endIndex++;\n        }\n\n        if (startIndex > 0) {\n          startIndex--;\n        }\n\n        for (var i = 0; i < startIndex; i++) {\n          this._hideBullets(this.dataItems[i]);\n        }\n\n        for (var i = startIndex; i < endIndex; i++) {\n          this._positionBullets(this.dataItems[i]);\n        }\n\n        for (var i = endIndex; i < count; i++) {\n          this._hideBullets(this.dataItems[i]);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_positionBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _this = this;\n\n      if (dataItem.bullets) {\n        $array.each(dataItem.bullets, function (bullet) {\n          _this._positionBullet(bullet);\n\n          var sprite = bullet.get(\"sprite\");\n\n          if (bullet.get(\"dynamic\")) {\n            if (sprite) {\n              sprite._markDirtyKey(\"fill\");\n\n              sprite.markDirtySize();\n            }\n\n            if (sprite instanceof Container) {\n              sprite.walkChildren(function (child) {\n                child._markDirtyKey(\"fill\");\n\n                child.markDirtySize();\n\n                if (child instanceof Label) {\n                  child.text.markDirtyText();\n                }\n              });\n            }\n          }\n\n          if (sprite instanceof Label && sprite.get(\"populateText\")) {\n            sprite.text.markDirtyText();\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_hideBullets\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      if (dataItem.bullets) {\n        $array.each(dataItem.bullets, function (bullet) {\n          var sprite = bullet.get(\"sprite\");\n\n          if (sprite) {\n            sprite.setPrivate(\"visible\", false);\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_positionBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_bullet) {}\n  });\n  Object.defineProperty(Series.prototype, \"_placeBulletsContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (chart) {\n      chart.bulletsContainer.children.moveValue(this.bulletsContainer);\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_removeBulletsContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var bulletsContainer = this.bulletsContainer;\n\n      if (bulletsContainer.parent) {\n        bulletsContainer.parent.children.removeValue(bulletsContainer);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"disposeDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      //super.disposeDataItem(dataItem); // does nothing\n      var bullets = dataItem.bullets;\n\n      if (bullets) {\n        $array.each(bullets, function (bullet) {\n          bullet.dispose();\n        });\n      }\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_getItemReaderLabel\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return \"\";\n    }\n  });\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(Series.prototype, \"showDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, bullets;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];\n              bullets = dataItem.bullets;\n\n              if (bullets) {\n                $array.each(bullets, function (bullet) {\n                  promises.push(bullet.get(\"sprite\").show(duration));\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n\n  Object.defineProperty(Series.prototype, \"hideDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, bullets;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];\n              bullets = dataItem.bullets;\n\n              if (bullets) {\n                $array.each(bullets, function (bullet) {\n                  promises.push(bullet.get(\"sprite\").hide(duration));\n                });\n              }\n\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  Object.defineProperty(Series.prototype, \"_sequencedShowHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (show, duration) {\n      return __awaiter(this, void 0, void 0, function () {\n        var startIndex_2, endIndex_2;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this.get(\"sequencedInterpolation\")) return [3\n              /*break*/\n              , 4];\n\n              if (!$type.isNumber(duration)) {\n                duration = this.get(\"interpolationDuration\", 0);\n              }\n\n              if (!(duration > 0)) return [3\n              /*break*/\n              , 2];\n              startIndex_2 = this.startIndex();\n              endIndex_2 = this.endIndex();\n              return [4\n              /*yield*/\n              , Promise.all($array.map(this.dataItems, function (dataItem, i) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var realDuration, delay;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        realDuration = duration || 0;\n\n                        if (i < startIndex_2 - 10 || i > endIndex_2 + 10) {\n                          realDuration = 0;\n                        }\n\n                        delay = this.get(\"sequencedDelay\", 0) + realDuration / (endIndex_2 - startIndex_2);\n                        return [4\n                        /*yield*/\n                        , $time.sleep(delay * (i - startIndex_2))];\n\n                      case 1:\n                        _a.sent();\n\n                        if (!show) return [3\n                        /*break*/\n                        , 3];\n                        return [4\n                        /*yield*/\n                        , this.showDataItem(dataItem, realDuration)];\n\n                      case 2:\n                        _a.sent();\n\n                        return [3\n                        /*break*/\n                        , 5];\n\n                      case 3:\n                        return [4\n                        /*yield*/\n                        , this.hideDataItem(dataItem, realDuration)];\n\n                      case 4:\n                        _a.sent();\n\n                        _a.label = 5;\n\n                      case 5:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              }))];\n\n            case 1:\n              _a.sent();\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 2:\n              return [4\n              /*yield*/\n              , Promise.all($array.map(this.dataItems, function (dataItem) {\n                if (show) {\n                  return _this.showDataItem(dataItem, 0);\n                } else {\n                  return _this.hideDataItem(dataItem, 0);\n                }\n              }))];\n\n            case 3:\n              _a.sent();\n\n              _a.label = 4;\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"updateLegendValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var legendDataItem = dataItem.get(\"legendDataItem\");\n\n      if (legendDataItem) {\n        var valueLabel = legendDataItem.get(\"valueLabel\");\n\n        if (valueLabel) {\n          var text = valueLabel.text;\n          var txt = \"\";\n\n          valueLabel._setDataItem(dataItem);\n\n          txt = this.get(\"legendValueText\", text.get(\"text\", \"\"));\n          valueLabel.set(\"text\", txt);\n          text.markDirtyText();\n        }\n\n        var label = legendDataItem.get(\"label\");\n\n        if (label) {\n          var text = label.text;\n          var txt = \"\";\n\n          label._setDataItem(dataItem);\n\n          txt = this.get(\"legendLabelText\", text.get(\"text\", \"\"));\n          label.set(\"text\", txt);\n          text.markDirtyText();\n        }\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"updateLegendMarker\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_dataItem) {}\n  });\n  Object.defineProperty(Series.prototype, \"_onHide\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._onHide.call(this);\n\n      var tooltip = this.getTooltip();\n\n      if (tooltip) {\n        tooltip.hide();\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"hoverDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_dataItem) {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"unhoverDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_dataItem) {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Series.prototype, \"_getBase\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      var dataItem = this.dataItems[this.startIndex()];\n\n      if (dataItem) {\n        return dataItem.get(key);\n      }\n\n      return 0;\n    }\n  });\n  Object.defineProperty(Series, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Series\"\n  });\n  Object.defineProperty(Series, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Component.classNames.concat([Series.className])\n  });\n  return Series;\n}(Component);\n\nexport { Series }; //# sourceMappingURL=Series.js.map","map":null,"metadata":{},"sourceType":"module"}