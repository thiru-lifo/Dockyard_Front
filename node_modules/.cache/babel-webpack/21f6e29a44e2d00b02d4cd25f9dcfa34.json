{"ast":null,"code":"import { __extends, __read, __spreadArray } from \"tslib\";\nimport { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { getInterpolate } from \"./Animation\";\nimport { States } from \"./States\";\nimport { registry } from \"../Registry\";\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\nimport * as $array from \"./Array\";\nimport * as $order from \"./Order\";\n/**\r\n * Allows to dynamically modify setting value of its target element.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\r\n */\n\nvar Adapters =\n/** @class */\nfunction () {\n  function Adapters(entity) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_disabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._entity = entity;\n  }\n  /**\r\n   * Add a function (`callback`) that will modify value for setting `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info\r\n   */\n\n\n  Object.defineProperty(Adapters.prototype, \"add\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var callbacks = this._callbacks[key];\n\n      if (callbacks === undefined) {\n        callbacks = this._callbacks[key] = [];\n      }\n\n      callbacks.push(callback);\n\n      this._entity._markDirtyKey(key);\n\n      return new Disposer(function () {\n        if ($array.removeFirst(callbacks, callback)) {\n          _this._entity._markDirtyKey(key);\n        }\n      });\n    }\n  });\n  /**\r\n   * Removes all adapters for the specific key.\r\n   *\r\n   * @since 5.1.0\r\n   */\n\n  Object.defineProperty(Adapters.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      var callbacks = this._callbacks[key];\n\n      if (callbacks !== undefined) {\n        delete this._callbacks[key];\n\n        if (callbacks.length !== 0) {\n          this._entity._markDirtyKey(key);\n        }\n      }\n    }\n  });\n  /**\r\n   * Enables (previously disabled) adapters for specific key.\r\n   *\r\n   * @since 5.1.0\r\n   */\n\n  Object.defineProperty(Adapters.prototype, \"enable\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (this._disabled[key]) {\n        delete this._disabled[key];\n\n        this._entity._markDirtyKey(key);\n      }\n    }\n  });\n  /**\r\n   * Disables all adapters for specific key.\r\n   *\r\n   * @since 5.1.0\r\n   */\n\n  Object.defineProperty(Adapters.prototype, \"disable\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (!this._disabled[key]) {\n        this._disabled[key] = true;\n\n        this._entity._markDirtyKey(key);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Adapters.prototype, \"fold\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      if (!this._disabled[key]) {\n        var callbacks = this._callbacks[key];\n\n        if (callbacks !== undefined) {\n          for (var i = 0, len = callbacks.length; i < len; ++i) {\n            value = callbacks[i](value, this._entity, key);\n          }\n        }\n      }\n\n      return value;\n    }\n  });\n  return Adapters;\n}();\n\nexport { Adapters };\n/**\r\n * Animation object.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info\r\n */\n\nvar Animation =\n/** @class */\nfunction () {\n  function Animation(animation, from, to, duration, easing, loops, startingTime) {\n    Object.defineProperty(this, \"_animation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_from\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_to\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_duration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_easing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_loops\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_interpolate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_oldTime\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_time\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_stopped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_playing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._animation = animation;\n    this._from = from;\n    this._to = to;\n    this._duration = duration;\n    this._easing = easing;\n    this._loops = loops;\n    this._interpolate = getInterpolate(from, to);\n    this._oldTime = startingTime;\n  }\n\n  Object.defineProperty(Animation.prototype, \"to\", {\n    get: function () {\n      return this._to;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"from\", {\n    get: function () {\n      return this._from;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"playing\", {\n    get: function () {\n      return this._playing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"stopped\", {\n    get: function () {\n      return this._stopped;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"stop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._stopped) {\n        this._stopped = true;\n        this._playing = false;\n\n        if (this.events.isEnabled(\"stopped\")) {\n          this.events.dispatch(\"stopped\", {\n            type: \"stopped\",\n            target: this\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"pause\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._playing = false;\n      this._oldTime = null;\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"play\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._stopped && !this._playing) {\n        this._playing = true;\n\n        this._animation._startAnimation();\n      }\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"percentage\", {\n    get: function () {\n      return this._time / this._duration;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Animation.prototype, \"waitForStop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      return new Promise(function (resolve, _reject) {\n        if (_this._stopped) {\n          resolve();\n        } else {\n          var listener = function () {\n            stopped_1.dispose();\n            resolve();\n          };\n\n          var stopped_1 = _this.events.on(\"stopped\", listener);\n        }\n      });\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_checkEnded\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this._loops > 1) {\n        --this._loops;\n        return false;\n      } else {\n        return true;\n      }\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_run\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (currentTime) {\n      if (this._oldTime !== null) {\n        this._time += currentTime - this._oldTime;\n\n        if (this._time > this._duration) {\n          this._time = this._duration;\n        }\n      }\n\n      this._oldTime = currentTime;\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_reset\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (currentTime) {\n      this._oldTime = currentTime;\n      this._time = 0;\n    }\n  });\n  Object.defineProperty(Animation.prototype, \"_value\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (diff) {\n      return this._interpolate(this._easing(diff), this._from, this._to);\n    }\n  });\n  return Animation;\n}();\n\nexport { Animation };\n/**\r\n * @ignore\r\n */\n\nvar counter = 0;\n/**\r\n * Base class for [[Entity]] objects that support Settings.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n */\n\nvar Settings =\n/** @class */\nfunction () {\n  function Settings(settings) {\n    /**\r\n     * Unique ID.\r\n     */\n    Object.defineProperty(this, \"uid\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: ++counter\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_prevSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_prevPrivateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_animatingPrivateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    }); // TODO move this into Entity\n\n    Object.defineProperty(this, \"_userProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._settings = settings;\n  }\n\n  Object.defineProperty(Settings.prototype, \"_checkDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $object.keys(this._settings).forEach(function (key) {\n        _this._userProperties[key] = true;\n\n        _this._markDirtyKey(key);\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"resetUserSettings\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._userProperties = {};\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_runAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (currentTime) {\n      var _this = this;\n\n      if (!this.isDisposed()) {\n        var playing_1 = false;\n        $object.each(this._animatingSettings, function (key, animation) {\n          if (animation._stopped) {\n            _this._stopAnimation(key);\n          } else if (animation._playing) {\n            animation._run(currentTime);\n\n            var diff = animation.percentage;\n\n            if (diff >= 1) {\n              if (animation._checkEnded()) {\n                _this.set(key, animation._value(1));\n              } else {\n                playing_1 = true;\n\n                animation._reset(currentTime);\n\n                _this._set(key, animation._value(1));\n              }\n            } else {\n              playing_1 = true;\n\n              _this._set(key, animation._value(diff));\n            }\n          }\n        });\n        $object.each(this._animatingPrivateSettings, function (key, animation) {\n          if (animation._stopped) {\n            _this._stopAnimationPrivate(key);\n          } else if (animation._playing) {\n            animation._run(currentTime);\n\n            var diff = animation.percentage;\n\n            if (diff >= 1) {\n              if (animation._checkEnded()) {\n                _this.setPrivate(key, animation._value(1));\n              } else {\n                playing_1 = true;\n\n                animation._reset(currentTime);\n\n                _this._setPrivate(key, animation._value(1));\n              }\n            } else {\n              playing_1 = true;\n\n              _this._setPrivate(key, animation._value(diff));\n            }\n          }\n        });\n        return playing_1;\n      } else {\n        return false;\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_markDirtyKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_key) {\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_markDirtyPrivateKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_key) {\n      this.markDirty();\n    }\n  });\n  /**\r\n   * Sets a callback function to invoke when specific key of settings changes\r\n   * or is set.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\r\n   * @param   key       Settings key\r\n   * @param   callback  Callback\r\n   * @return            Disposer for event\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"on\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var events = this._settingEvents[key];\n\n      if (events === undefined) {\n        events = this._settingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._settingEvents[key];\n        }\n      });\n    }\n  });\n  /**\r\n   * Sets a callback function to invoke when specific key of private settings\r\n   * changes or is set.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info\r\n   * @ignore\r\n   * @param   key       Private settings key\r\n   * @param   callback  Callback\r\n   * @return            Disposer for event\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"onPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, callback) {\n      var _this = this;\n\n      var events = this._privateSettingEvents[key];\n\n      if (events === undefined) {\n        events = this._privateSettingEvents[key] = [];\n      }\n\n      events.push(callback);\n      return new Disposer(function () {\n        $array.removeFirst(events, callback);\n\n        if (events.length === 0) {\n          delete _this._privateSettingEvents[key];\n        }\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"getRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      return this.getRaw(key, fallback);\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_sendKeyEvent\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var _this = this;\n\n      var events = this._settingEvents[key];\n\n      if (events !== undefined) {\n        $array.each(events, function (callback) {\n          callback(value, _this, key);\n        });\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_sendPrivateKeyEvent\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var _this = this;\n\n      var events = this._privateSettingEvents[key];\n\n      if (events !== undefined) {\n        $array.each(events, function (callback) {\n          callback(value, _this, key);\n        });\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, old, value) {\n      this._prevSettings[key] = old;\n\n      this._sendKeyEvent(key, value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var old = this._settings[key];\n      this._settings[key] = value;\n\n      if (old !== value) {\n        this._setRaw(key, old, value);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var old = this._settings[key];\n      this._settings[key] = value;\n\n      if (old !== value) {\n        this._setRaw(key, old, value);\n\n        this._markDirtyKey(key);\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_stopAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      var animation = this._animatingSettings[key];\n\n      if (animation) {\n        delete this._animatingSettings[key];\n        animation.stop();\n      }\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key`, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._set(key, value);\n\n      this._stopAnimation(key);\n\n      return value;\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`;\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (key in this._settings) {\n        this._prevSettings[key] = this._settings[key];\n        delete this._settings[key];\n\n        this._sendKeyEvent(key, undefined);\n\n        this._markDirtyKey(key);\n      }\n\n      this._stopAnimation(key);\n    }\n  });\n  /**\r\n   * Removes all keys;\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"removeAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $array.each($object.keys(this._settings), function (key) {\n        _this.remove(key);\n      });\n    }\n  });\n  /**\r\n   * Returns a value of a private setting.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"getPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._privateSettings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, old, value) {\n      this._prevPrivateSettings[key] = old;\n\n      this._sendPrivateKeyEvent(key, value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var old = this._privateSettings[key];\n      this._privateSettings[key] = value;\n\n      if (old !== value) {\n        this._setPrivateRaw(key, old, value);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"_setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      var old = this._privateSettings[key];\n      this._privateSettings[key] = value;\n\n      if (old !== value) {\n        this._setPrivateRaw(key, old, value);\n\n        this._markDirtyPrivateKey(key);\n      }\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_stopAnimationPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      var animation = this._animatingPrivateSettings[key];\n\n      if (animation) {\n        animation.stop();\n        delete this._animatingPrivateSettings[key];\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._setPrivate(key, value);\n\n      this._stopAnimationPrivate(key);\n\n      return value;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"removePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (key in this._privateSettings) {\n        this._prevPrivateSettings[key] = this._privateSettings[key];\n        delete this._privateSettings[key];\n\n        this._markDirtyPrivateKey(key);\n      }\n\n      this._stopAnimationPrivate(key);\n    }\n  });\n  /**\r\n   * Sets multiple settings at once.\r\n   *\r\n   * `settings` must be an object with key: value pairs.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param settings Settings\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      var _this = this;\n\n      $object.each(settings, function (key, value) {\n        _this.set(key, value);\n      });\n    }\n  });\n  /**\r\n   * Animates setting values from current/start values to new ones.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info\r\n   * @param   options  Animation options\r\n   * @return           Animation object\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"animate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (options) {\n      var key = options.key;\n      var to = options.to;\n      var duration = options.duration || 0;\n      var loops = options.loops || 1;\n      var from = options.from === undefined ? this.get(key) : options.from;\n      var easing = options.easing === undefined ? $ease.linear : options.easing;\n\n      if (duration === 0) {\n        this.set(key, to);\n      } else {\n        if (from === undefined || from === to) {\n          this.set(key, to);\n        } else {\n          this.set(key, from);\n          var animation_1 = this._animatingSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());\n\n          this._startAnimation();\n\n          return animation_1;\n        }\n      }\n\n      var animation = new Animation(this, from, to, duration, easing, loops, null);\n      animation.stop();\n      return animation;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"animatePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (options) {\n      var key = options.key;\n      var to = options.to;\n      var duration = options.duration || 0;\n      var loops = options.loops || 1;\n      var from = options.from === undefined ? this.getPrivate(key) : options.from;\n      var easing = options.easing === undefined ? $ease.linear : options.easing;\n\n      if (duration === 0) {\n        this.setPrivate(key, to);\n      } else {\n        if (from === undefined || from === to) {\n          this.setPrivate(key, to);\n        } else {\n          this.setPrivate(key, from);\n          var animation_2 = this._animatingPrivateSettings[key] = new Animation(this, from, to, duration, easing, loops, this._animationTime());\n\n          this._startAnimation();\n\n          return animation_2;\n        }\n      }\n\n      var animation = new Animation(this, from, to, duration, easing, loops, null);\n      animation.stop();\n      return animation;\n    }\n  });\n  Object.defineProperty(Settings.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  /**\r\n   * Returns `true` if this element is disposed.\r\n   *\r\n   * @return Disposed\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Disposes this object.\r\n   */\n\n  Object.defineProperty(Settings.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._dispose();\n      }\n    }\n  });\n  return Settings;\n}();\n\nexport { Settings };\n/**\r\n * Base class.\r\n *\r\n * @important\r\n */\n\nvar Entity =\n/** @class */\nfunction (_super) {\n  __extends(Entity, _super);\n  /**\r\n   * IMPORTANT! Do not instantiate this class via `new Class()` syntax.\r\n   *\r\n   * Use static method `Class.new()` instead.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @ignore\r\n   */\n\n\n  function Entity(root, settings, isReal, templates) {\n    if (templates === void 0) {\n      templates = [];\n    }\n\n    var _this = _super.call(this, settings) || this;\n\n    Object.defineProperty(_this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_user_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // for testing purposes\n\n    Object.defineProperty(_this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new States(_this)\n    });\n    Object.defineProperty(_this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Adapters(_this)\n    });\n    Object.defineProperty(_this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createEvents()\n    });\n    Object.defineProperty(_this, \"_userPrivateProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_dirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_dirtyPrivate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(_this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // Templates for the themes\n\n    Object.defineProperty(_this, \"_templates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    }); // Internal templates which can be overridden by the user's templates\n\n    Object.defineProperty(_this, \"_internalTemplates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    }); // Default themes which can be overridden by the user's themes\n\n    Object.defineProperty(_this, \"_defaultThemes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    }); // Disposers for all of the templates\n\n    Object.defineProperty(_this, \"_templateDisposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    }); // Whether the template setup function should be run\n\n    Object.defineProperty(_this, \"_runSetup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"_disposerProperties\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    _this._root = root;\n    _this._internalTemplates = templates;\n\n    if (settings.id) {\n      _this._registerId(settings.id);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Entity, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (root, settings, template) {\n      var x = new this(root, settings, true);\n      x._template = template;\n\n      x._afterNew();\n\n      return x;\n    }\n  });\n  Object.defineProperty(Entity, \"_new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (root, settings, templates) {\n      if (templates === void 0) {\n        templates = [];\n      }\n\n      var x = new this(root, settings, true, templates);\n\n      x._afterNew();\n\n      return x;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this._checkDirty();\n\n      var shouldApply = false;\n      var template = this._template;\n\n      if (template) {\n        shouldApply = true;\n\n        template._setObjectTemplate(this);\n      }\n\n      $array.each(this._internalTemplates, function (template) {\n        shouldApply = true;\n\n        template._setObjectTemplate(_this);\n      });\n\n      if (shouldApply) {\n        this._applyTemplates(false);\n      }\n\n      this.states.create(\"default\", {});\n\n      this._setDefaults();\n    }\n  }); // This is the same as _afterNew, except it also applies the themes.\n  // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).\n\n  Object.defineProperty(Entity.prototype, \"_afterNewApplyThemes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      this._checkDirty();\n\n      var template = this._template;\n\n      if (template) {\n        template._setObjectTemplate(this);\n      }\n\n      $array.each(this._internalTemplates, function (template) {\n        template._setObjectTemplate(_this);\n      });\n      this.states.create(\"default\", {});\n\n      this._setDefaults();\n\n      this._applyThemes();\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_createEvents\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return new EventDispatcher();\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"classNames\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this.constructor.classNames;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Entity.prototype, \"className\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this.constructor.className;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Entity.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(Entity.prototype, \"_setDefault\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      if (!(key in this._settings)) {\n        _super.prototype.set.call(this, key, value);\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_setRawDefault\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      if (!(key in this._settings)) {\n        _super.prototype.setRaw.call(this, key, value);\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_clearDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $object.keys(this._dirty).forEach(function (key) {\n        _this._dirty[key] = false;\n      });\n      $object.keys(this._dirtyPrivate).forEach(function (key) {\n        _this._dirtyPrivate[key] = false;\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"isDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      return !!this._dirty[key];\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"isPrivateDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      return !!this._dirtyPrivate[key];\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_markDirtyKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      this._dirty[key] = true;\n\n      _super.prototype._markDirtyKey.call(this, key);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_markDirtyPrivateKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      this._dirtyPrivate[key] = true;\n\n      _super.prototype._markDirtyKey.call(this, key);\n    }\n  });\n  /**\r\n   * Checks if element is of certain class (or inherits one).\r\n   *\r\n   * @param   type  Class name to check\r\n   * @return {boolean} Is of class?\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"isType\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (type) {\n      return this.classNames.indexOf(type) !== -1;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_pushPropertyDisposer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, disposer) {\n      var disposers = this._disposerProperties[key];\n\n      if (disposers === undefined) {\n        disposers = this._disposerProperties[key] = [];\n      }\n\n      disposers.push(disposer);\n      return disposer;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_disposeProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      var disposers = this._disposerProperties[key];\n\n      if (disposers !== undefined) {\n        $array.each(disposers, function (disposer) {\n          disposer.dispose();\n        });\n        delete this._disposerProperties[key];\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"template\", {\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * @todo needs description\r\n     * @param  value  Template\r\n     */\n    set: function (value) {\n      var template = this._template;\n\n      if (template !== value) {\n        this._template = value;\n\n        if (template) {\n          template._removeObjectTemplate(this);\n        }\n\n        if (value) {\n          value._setObjectTemplate(this);\n        }\n\n        this._applyTemplates();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"markDirty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._root._addDirtyEntity(this);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_startAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._root._addAnimation(this);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_animationTime\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._root.animationTime;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyState\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_name) {}\n  });\n  Object.defineProperty(Entity.prototype, \"_applyStateAnimated\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_name, _duration) {}\n  });\n  Object.defineProperty(Entity.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this.adapters.fold(key, this._settings[key]);\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key`, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userProperties[key] = true;\n      return _super.prototype.set.call(this, key, value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userProperties[key] = true;\n\n      _super.prototype.setRaw.call(this, key, value);\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"_setSoft\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      if (!this._userProperties[key]) {\n        return _super.prototype.set.call(this, key, value);\n      }\n\n      return value;\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._userProperties[key];\n\n      this._removeTemplateProperty(key);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setPrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userPrivateProperties[key] = true;\n      return _super.prototype.setPrivate.call(this, key, value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setPrivateRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userPrivateProperties[key] = true;\n\n      _super.prototype.setPrivateRaw.call(this, key, value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"removePrivate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._userPrivateProperties[key];\n\n      this._removeTemplatePrivateProperty(key);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_setTemplateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (template, key, value) {\n      if (!this._userProperties[key]) {\n        var match = this._findTemplateByKey(key);\n\n        if (template === match) {\n          _super.prototype.set.call(this, key, value);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_setTemplatePrivateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (template, key, value) {\n      if (!this._userPrivateProperties[key]) {\n        var match = this._findTemplateByPrivateKey(key);\n\n        if (template === match) {\n          _super.prototype.setPrivate.call(this, key, value);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_removeTemplateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (!this._userProperties[key]) {\n        var match = this._findTemplateByKey(key);\n\n        if (match) {\n          // TODO don't stop the animation if the property didn't change\n          _super.prototype.set.call(this, key, match._settings[key]);\n        } else {\n          _super.prototype.remove.call(this, key);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_removeTemplatePrivateProperty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      if (!this._userPrivateProperties[key]) {\n        var match = this._findTemplateByPrivateKey(key);\n\n        if (match) {\n          // TODO don't stop the animation if the property didn't change\n          _super.prototype.setPrivate.call(this, key, match._privateSettings[key]);\n        } else {\n          _super.prototype.removePrivate.call(this, key);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_walkParents\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      f(this._root._rootContainer);\n      f(this);\n    }\n  }); // TODO faster version of this method which is specialized to just 1 key\n\n  Object.defineProperty(Entity.prototype, \"_applyStateByKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      var other = this.states.create(name, {});\n      var seen = {};\n\n      this._eachTemplate(function (template) {\n        var state = template.states.lookup(name);\n\n        if (state) {\n          state._apply(other, seen);\n        }\n      });\n\n      $object.each(other._settings, function (key) {\n        if (!seen[key] && !other._userSettings[key]) {\n          other.remove(key);\n        }\n      });\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (template, state) {\n      var _this = this;\n\n      this._templateDisposers.push(template._apply(this, state));\n\n      $object.each(template._settings, function (key, value) {\n        if (!state.settings[key] && !_this._userProperties[key]) {\n          state.settings[key] = true;\n\n          _super.prototype.set.call(_this, key, value);\n        }\n      });\n      $object.each(template._privateSettings, function (key, value) {\n        if (!state.privateSettings[key] && !_this._userPrivateProperties[key]) {\n          state.privateSettings[key] = true;\n\n          _super.prototype.setPrivate.call(_this, key, value);\n        }\n      });\n\n      if (this._runSetup && template.setup) {\n        this._runSetup = false;\n        template.setup(this);\n      }\n    }\n  });\n  /**\r\n   * Calls the closure with each template and returns the first template which is true\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"_findStaticTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      if (this._template) {\n        if (f(this._template)) {\n          return this._template;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_eachTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      this._findStaticTemplate(function (template) {\n        f(template);\n        return false;\n      }); // _internalTemplates is sorted with most specific to the right\n\n\n      $array.eachReverse(this._internalTemplates, f); // _templates is sorted with most specific to the left\n\n      $array.each(this._templates, f);\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyTemplates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (remove) {\n      var _this = this;\n\n      if (remove === void 0) {\n        remove = true;\n      }\n\n      if (remove) {\n        this._disposeTemplates();\n      }\n\n      var state = {\n        settings: {},\n        privateSettings: {},\n        states: {}\n      };\n\n      this._eachTemplate(function (template) {\n        _this._applyTemplate(template, state);\n      });\n\n      if (remove) {\n        $object.each(this._settings, function (key) {\n          if (!_this._userProperties[key] && !state.settings[key]) {\n            _super.prototype.remove.call(_this, key);\n          }\n        });\n        $object.each(this._privateSettings, function (key) {\n          if (!_this._userPrivateProperties[key] && !state.privateSettings[key]) {\n            _super.prototype.removePrivate.call(_this, key);\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_findTemplate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      var value = this._findStaticTemplate(f);\n\n      if (value === undefined) {\n        // _internalTemplates is sorted with most specific to the right\n        var value_1 = $array.findReverse(this._internalTemplates, f);\n\n        if (value_1 === undefined) {\n          // _templates is sorted with most specific to the left\n          return $array.find(this._templates, f);\n        } else {\n          return value_1;\n        }\n      } else {\n        return value;\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_findTemplateByKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      return this._findTemplate(function (template) {\n        return key in template._settings;\n      });\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_findTemplateByPrivateKey\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      return this._findTemplate(function (template) {\n        return key in template._privateSettings;\n      });\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_disposeTemplates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      $array.each(this._templateDisposers, function (disposer) {\n        disposer.dispose();\n      });\n      this._templateDisposers.length = 0;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_removeTemplates\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      $array.each(this._templates, function (template) {\n        template._removeObjectTemplate(_this);\n      });\n      this._templates.length = 0;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_applyThemes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var isConnected = false;\n      var defaults = [];\n      var themes = [];\n      var themeTags = new Set();\n      var tags = this.get(\"themeTagsSelf\");\n\n      if (tags) {\n        $array.each(tags, function (tag) {\n          themeTags.add(tag);\n        });\n      }\n\n      this._walkParents(function (entity) {\n        if (entity === _this._root._rootContainer) {\n          isConnected = true;\n        }\n\n        if (entity._defaultThemes.length > 0) {\n          defaults.push(entity._defaultThemes);\n        }\n\n        var theme = entity.get(\"themes\");\n\n        if (theme) {\n          themes.push(theme);\n        }\n\n        var tags = entity.get(\"themeTags\");\n\n        if (tags) {\n          $array.each(tags, function (tag) {\n            themeTags.add(tag);\n          });\n        }\n      });\n\n      themes = defaults.concat(themes);\n\n      this._removeTemplates();\n\n      if (isConnected) {\n        $array.eachReverse(this.classNames, function (name) {\n          var allRules = [];\n          $array.each(themes, function (themes) {\n            $array.each(themes, function (theme) {\n              var rules = theme._lookupRules(name);\n\n              if (rules) {\n                $array.eachReverse(rules, function (rule) {\n                  var matches = rule.tags.every(function (tag) {\n                    return themeTags.has(tag);\n                  });\n\n                  if (matches) {\n                    var result = $array.getFirstSortedIndex(allRules, function (x) {\n                      var order = $order.compare(rule.tags.length, x.tags.length);\n\n                      if (order === 0) {\n                        return $order.compareArray(rule.tags, x.tags, $order.compare);\n                      } else {\n                        return order;\n                      }\n                    });\n                    allRules.splice(result.index, 0, rule);\n                  }\n                });\n              }\n            });\n          });\n          $array.each(allRules, function (rule) {\n            _this._templates.push(rule.template);\n\n            rule.template._setObjectTemplate(_this);\n          });\n        });\n      }\n\n      this._applyTemplates();\n\n      if (isConnected) {\n        // This causes it to only run the setup function the first time that the themes are applied\n        this._runSetup = false;\n      }\n\n      return isConnected;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(Entity.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.isDirty(\"id\")) {\n        var id = this.get(\"id\");\n\n        if (id) {\n          this._registerId(id);\n        }\n\n        var prevId = this._prevSettings.id;\n\n        if (prevId) {\n          delete registry.entitiesById[prevId];\n        }\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_registerId\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (id) {\n      if (registry.entitiesById[id] && registry.entitiesById[id] !== this) {\n        throw new Error(\"An entity with id \\\"\" + id + \"\\\" already exists.\");\n      }\n\n      registry.entitiesById[id] = this;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_afterChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"addDisposer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (disposer) {\n      this._disposers.push(disposer);\n\n      return disposer;\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._dispose.call(this);\n\n      var template = this._template;\n\n      if (template) {\n        template._removeObjectTemplate(this);\n      }\n\n      $array.each(this._internalTemplates, function (template) {\n        template._removeObjectTemplate(_this);\n      });\n\n      this._removeTemplates();\n\n      this._disposeTemplates();\n\n      this.events.dispose();\n\n      this._disposers.forEach(function (x) {\n        x.dispose();\n      });\n\n      $object.each(this._disposerProperties, function (_, disposers) {\n        $array.each(disposers, function (disposer) {\n          disposer.dispose();\n        });\n      });\n      var id = this.get(\"id\");\n\n      if (id) {\n        delete registry.entitiesById[id];\n      }\n    }\n  });\n  /**\r\n   * Creates and returns a \"disposable\" timeout.\r\n   *\r\n   * @param   fn     Callback\r\n   * @param   delay  Delay in milliseconds\r\n   * @return         Timeout disposer\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"setTimeout\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (fn, delay) {\n      var _this = this;\n\n      var id = setTimeout(function () {\n        _this.removeDispose(disposer);\n\n        fn();\n      }, delay);\n      var disposer = new Disposer(function () {\n        clearTimeout(id);\n      });\n\n      this._disposers.push(disposer);\n\n      return disposer;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"removeDispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      if (!this.isDisposed()) {\n        var index = $array.indexOf(this._disposers, target);\n\n        if (index > -1) {\n          this._disposers.splice(index, 1);\n        }\n      }\n\n      target.dispose();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"hasTag\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tag) {\n      return $array.indexOf(this.get(\"themeTags\", []), tag) !== -1;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"addTag\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tag) {\n      if (!this.hasTag(tag)) {\n        var tags = this.get(\"themeTags\", []);\n        tags.push(tag);\n        this.set(\"themeTags\", tags);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Entity.prototype, \"removeTag\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (tag) {\n      if (this.hasTag(tag)) {\n        var tags = this.get(\"themeTags\", []);\n        $array.remove(tags, tag);\n        this.set(\"themeTags\", tags);\n      }\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"_t\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (text, locale) {\n      var _a;\n\n      var rest = [];\n\n      for (var _i = 2; _i < arguments.length; _i++) {\n        rest[_i - 2] = arguments[_i];\n      }\n\n      return (_a = this._root.language).translate.apply(_a, __spreadArray([text, locale], __read(rest), false));\n    }\n  });\n  Object.defineProperty(Entity.prototype, \"root\", {\n    /**\r\n     * An instance of [[Root]] object.\r\n     *\r\n     * @readonly\r\n     * @since 5.0.6\r\n     * @return Root object\r\n     */\n    get: function () {\n      return this._root;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Entity, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Entity\"\n  });\n  Object.defineProperty(Entity, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: [\"Entity\"]\n  });\n  return Entity;\n}(Settings);\n\nexport { Entity }; //# sourceMappingURL=Entity.js.map","map":null,"metadata":{},"sourceType":"module"}