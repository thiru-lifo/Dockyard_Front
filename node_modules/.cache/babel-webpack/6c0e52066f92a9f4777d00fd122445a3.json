{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Theme } from \"../core/Theme\";\nimport { p100, p50 } from \"../core/util/Percent\";\nimport { Color } from \"../core/util/Color\";\nimport { GridLayout } from \"../core/render/GridLayout\";\nimport * as $ease from \"../core/util/Ease\";\n/**\r\n * @ignore\r\n */\n\nexport function setColor(rule, key, ic, name) {\n  // TODO this shouldn't use get, figure out a better way\n  rule.set(key, ic.get(name));\n  ic.on(name, function (value) {\n    rule.set(key, value);\n  });\n}\n/**\r\n * @ignore\r\n */\n\nvar DefaultTheme =\n/** @class */\nfunction (_super) {\n  __extends(DefaultTheme, _super);\n\n  function DefaultTheme() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(DefaultTheme.prototype, \"setupDefaultRules\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype.setupDefaultRules.call(this);\n\n      var language = this._root.language;\n      var ic = this._root.interfaceColors;\n      var horizontalLayout = this._root.horizontalLayout;\n      var verticalLayout = this._root.verticalLayout;\n      var r = this.rule.bind(this);\n      /**\r\n       * ========================================================================\r\n       * core\r\n       * ========================================================================\r\n       */\n\n      r(\"InterfaceColors\").setAll({\n        stroke: Color.fromHex(0xe5e5e5),\n        fill: Color.fromHex(0xf3f3f3),\n        primaryButton: Color.fromHex(0x6794dc),\n        primaryButtonHover: Color.fromHex(0x6771dc),\n        primaryButtonDown: Color.fromHex(0x68dc76),\n        primaryButtonActive: Color.fromHex(0x68dc76),\n        primaryButtonText: Color.fromHex(0xffffff),\n        primaryButtonStroke: Color.fromHex(0xffffff),\n        secondaryButton: Color.fromHex(0xd9d9d9),\n        secondaryButtonHover: Color.fromHex(0xa3a3a3),\n        secondaryButtonDown: Color.fromHex(0x8d8d8d),\n        secondaryButtonActive: Color.fromHex(0xe6e6e6),\n        secondaryButtonText: Color.fromHex(0x000000),\n        secondaryButtonStroke: Color.fromHex(0xffffff),\n        grid: Color.fromHex(0x000000),\n        background: Color.fromHex(0xffffff),\n        alternativeBackground: Color.fromHex(0x000000),\n        text: Color.fromHex(0x000000),\n        alternativeText: Color.fromHex(0xffffff),\n        disabled: Color.fromHex(0xadadad),\n        positive: Color.fromHex(0x50b300),\n        negative: Color.fromHex(0xb30000)\n      });\n      {\n        var rule = r(\"ColorSet\");\n        rule.setAll({\n          passOptions: {\n            hue: 0.05,\n            saturation: 0,\n            lightness: 0\n          },\n          colors: [Color.fromHex(0x67b7dc)],\n          step: 1,\n          //baseColor: Color.fromRGB(103, 183, 220),\n          //count: 20,\n          reuse: false,\n          startIndex: 0\n        });\n        rule.setPrivate(\"currentStep\", 0);\n        rule.setPrivate(\"currentPass\", 0);\n      }\n      r(\"Entity\").setAll({\n        stateAnimationDuration: 0,\n        stateAnimationEasing: $ease.out($ease.cubic)\n      });\n      r(\"Component\").setAll({\n        interpolationDuration: 0,\n        interpolationEasing: $ease.out($ease.cubic)\n      });\n      r(\"Sprite\").setAll({\n        visible: true,\n        scale: 1,\n        opacity: 1,\n        rotation: 0,\n        position: \"relative\",\n        tooltipX: p50,\n        tooltipY: p50,\n        tooltipPosition: \"fixed\",\n        isMeasured: true\n      });\n      r(\"Sprite\").states.create(\"default\", {\n        \"visible\": true,\n        opacity: 1\n      });\n      r(\"Container\").setAll({\n        interactiveChildren: true,\n        setStateOnChildren: false\n      });\n      r(\"Graphics\").setAll({\n        strokeWidth: 1\n      });\n      r(\"Chart\").setAll({\n        width: p100,\n        height: p100,\n        interactiveChildren: false\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: alignment\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Sprite\", [\"horizontal\", \"center\"]).setAll({\n        centerX: p50,\n        x: p50\n      });\n      r(\"Sprite\", [\"vertical\", \"center\"]).setAll({\n        centerY: p50,\n        y: p50\n      });\n      r(\"Container\", [\"horizontal\", \"layout\"]).setAll({\n        layout: horizontalLayout\n      });\n      r(\"Container\", [\"vertical\", \"layout\"]).setAll({\n        layout: verticalLayout\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: patterns\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Pattern\").setAll({\n        repetition: \"repeat\",\n        width: 50,\n        height: 50,\n        rotation: 0,\n        fillOpacity: 1\n      });\n      r(\"LinePattern\").setAll({\n        gap: 6,\n        colorOpacity: 1,\n        width: 49,\n        height: 49\n      });\n      r(\"RectanglePattern\").setAll({\n        gap: 6,\n        checkered: false,\n        centered: true,\n        maxWidth: 5,\n        maxHeight: 5,\n        width: 48,\n        height: 48,\n        strokeWidth: 0\n      });\n      r(\"CirclePattern\").setAll({\n        gap: 5,\n        checkered: false,\n        centered: false,\n        radius: 3,\n        strokeWidth: 0,\n        width: 45,\n        height: 45\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: gradients\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"LinearGradient\").setAll({\n        rotation: 90\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: Legend\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Legend\").setAll({\n        fillField: \"fill\",\n        strokeField: \"stroke\",\n        nameField: \"name\",\n        layout: GridLayout.new(this._root, {}),\n        layer: 30,\n        clickTarget: \"itemContainer\"\n      }); // Class: Container\n\n      r(\"Container\", [\"legend\", \"item\", \"itemcontainer\"]).setAll({\n        paddingLeft: 5,\n        paddingRight: 5,\n        paddingBottom: 5,\n        paddingTop: 5,\n        layout: horizontalLayout,\n        setStateOnChildren: true,\n        interactiveChildren: false,\n        ariaChecked: true,\n        focusable: true,\n        ariaLabel: language.translate(\"Press ENTER to toggle\"),\n        role: \"checkbox\"\n      });\n      {\n        var rule = r(\"Rectangle\", [\"legend\", \"item\", \"background\"]);\n        rule.setAll({\n          fillOpacity: 0\n        });\n        setColor(rule, \"fill\", ic, \"background\");\n      }\n      r(\"Container\", [\"legend\", \"marker\"]).setAll({\n        setStateOnChildren: true,\n        centerY: p50,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingBottom: 0,\n        paddingTop: 0,\n        width: 18,\n        height: 18\n      });\n      r(\"RoundedRectangle\", [\"legend\", \"marker\", \"rectangle\"]).setAll({\n        width: p100,\n        height: p100,\n        cornerRadiusBL: 3,\n        cornerRadiusTL: 3,\n        cornerRadiusBR: 3,\n        cornerRadiusTR: 3\n      });\n      {\n        var rule = r(\"RoundedRectangle\", [\"legend\", \"marker\", \"rectangle\"]).states.create(\"disabled\", {});\n        setColor(rule, \"fill\", ic, \"disabled\");\n        setColor(rule, \"stroke\", ic, \"disabled\");\n      }\n      r(\"Label\", [\"legend\", \"label\"]).setAll({\n        centerY: p50,\n        marginLeft: 5,\n        paddingRight: 0,\n        paddingLeft: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        populateText: true\n      });\n      {\n        var rule = r(\"Label\", [\"legend\", \"label\"]).states.create(\"disabled\", {});\n        setColor(rule, \"fill\", ic, \"disabled\");\n      }\n      r(\"Label\", [\"legend\", \"value\", \"label\"]).setAll({\n        centerY: p50,\n        marginLeft: 5,\n        paddingRight: 0,\n        paddingLeft: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        width: 50,\n        centerX: p100,\n        populateText: true\n      });\n      {\n        var rule = r(\"Label\", [\"legend\", \"value\", \"label\"]).states.create(\"disabled\", {});\n        setColor(rule, \"fill\", ic, \"disabled\");\n      }\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: HeatLegend\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"HeatLegend\").setAll({\n        stepCount: 1\n      });\n      r(\"RoundedRectangle\", [\"heatlegend\", \"marker\"]).setAll({\n        cornerRadiusTR: 0,\n        cornerRadiusBR: 0,\n        cornerRadiusTL: 0,\n        cornerRadiusBL: 0\n      });\n      r(\"RoundedRectangle\", [\"vertical\", \"heatlegend\", \"marker\"]).setAll({\n        height: p100,\n        width: 15\n      });\n      r(\"RoundedRectangle\", [\"horizontal\", \"heatlegend\", \"marker\"]).setAll({\n        width: p100,\n        height: 15\n      });\n      r(\"HeatLegend\", [\"vertical\"]).setAll({\n        height: p100\n      });\n      r(\"HeatLegend\", [\"horizontal\"]).setAll({\n        width: p100\n      });\n      r(\"Label\", [\"heatlegend\", \"start\"]).setAll({\n        paddingLeft: 5,\n        paddingRight: 5,\n        paddingTop: 5,\n        paddingBottom: 5\n      });\n      r(\"Label\", [\"heatlegend\", \"end\"]).setAll({\n        paddingLeft: 5,\n        paddingRight: 5,\n        paddingTop: 5,\n        paddingBottom: 5\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: Labels\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      {\n        var rule = r(\"Label\");\n        rule.setAll({\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 10,\n          paddingRight: 10,\n          fontFamily: \"-apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\"\",\n          fontSize: \"1em\",\n          populateText: false\n        });\n        setColor(rule, \"fill\", ic, \"text\");\n      }\n      r(\"RadialLabel\").setAll({\n        textType: \"regular\",\n        centerY: p50,\n        centerX: p50,\n        inside: false,\n        radius: 0,\n        baseRadius: p100,\n        orientation: \"auto\",\n        textAlign: \"center\"\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: Elements and shapes\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"RoundedRectangle\").setAll({\n        cornerRadiusTL: 8,\n        cornerRadiusBL: 8,\n        cornerRadiusTR: 8,\n        cornerRadiusBR: 8\n      });\n      r(\"PointedRectangle\").setAll({\n        pointerBaseWidth: 15,\n        pointerLength: 10,\n        cornerRadius: 8\n      });\n      r(\"Slice\").setAll({\n        shiftRadius: 0,\n        dRadius: 0,\n        dInnerRadius: 0\n      });\n      {\n        var rule = r(\"Tick\");\n        rule.setAll({\n          strokeOpacity: .15,\n          isMeasured: false,\n          length: 4.5,\n          position: \"absolute\"\n        });\n        setColor(rule, \"stroke\", ic, \"grid\");\n      }\n      r(\"Bullet\").setAll({\n        locationX: 0.5,\n        locationY: 0.5\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: Tooltip\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Tooltip\").setAll({\n        position: \"absolute\",\n        getFillFromSprite: true,\n        getStrokeFromSprite: false,\n        autoTextColor: true,\n        paddingTop: 9,\n        paddingBottom: 8,\n        paddingLeft: 10,\n        paddingRight: 10,\n        marginBottom: 5,\n        pointerOrientation: \"vertical\",\n        centerX: p50,\n        centerY: p50,\n        animationEasing: $ease.out($ease.cubic),\n        exportable: false //layer: 100\n\n      });\n      {\n        var rule = r(\"PointedRectangle\", [\"tooltip\", \"background\"]);\n        rule.setAll({\n          strokeOpacity: 0.9,\n          cornerRadius: 4,\n          pointerLength: 4,\n          pointerBaseWidth: 8,\n          fillOpacity: 0.9,\n          stroke: Color.fromHex(0xffffff)\n        });\n      }\n      {\n        var rule = r(\"Label\", [\"tooltip\"]);\n        rule.setAll({\n          role: \"tooltip\",\n          populateText: true,\n          paddingRight: 0,\n          paddingTop: 0,\n          paddingLeft: 0,\n          paddingBottom: 0\n        });\n        setColor(rule, \"fill\", ic, \"alternativeText\");\n      }\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: Button\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Button\").setAll({\n        paddingTop: 8,\n        paddingBottom: 8,\n        paddingLeft: 10,\n        paddingRight: 10,\n        interactive: true,\n        layout: horizontalLayout,\n        interactiveChildren: false,\n        setStateOnChildren: true,\n        focusable: true\n      });\n      r(\"Button\").states.create(\"hover\", {});\n      r(\"Button\").states.create(\"down\", {\n        stateAnimationDuration: 0\n      });\n      r(\"Button\").states.create(\"active\", {});\n      {\n        var rule = r(\"RoundedRectangle\", [\"button\", \"background\"]);\n        setColor(rule, \"fill\", ic, \"primaryButton\");\n        setColor(rule, \"stroke\", ic, \"primaryButtonStroke\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"button\", \"background\"]).states.create(\"hover\", {});\n        setColor(rule, \"fill\", ic, \"primaryButtonHover\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"button\", \"background\"]).states.create(\"down\", {\n          stateAnimationDuration: 0\n        });\n        setColor(rule, \"fill\", ic, \"primaryButtonDown\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"button\", \"background\"]).states.create(\"active\", {});\n        setColor(rule, \"fill\", ic, \"primaryButtonActive\");\n      }\n      {\n        var rule = r(\"Graphics\", [\"button\", \"icon\"]);\n        setColor(rule, \"stroke\", ic, \"primaryButtonText\");\n      }\n      {\n        var rule = r(\"Label\", [\"button\"]);\n        setColor(rule, \"fill\", ic, \"primaryButtonText\");\n      }\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * charts/xy: ZoomOutButton\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Button\", [\"zoom\"]).setAll({\n        paddingTop: 18,\n        paddingBottom: 18,\n        paddingLeft: 12,\n        paddingRight: 12,\n        centerX: 46,\n        centerY: -10,\n        y: 0,\n        x: p100,\n        role: \"button\",\n        ariaLabel: language.translate(\"Zoom Out\"),\n        layer: 30\n      });\n      {\n        var rule = r(\"RoundedRectangle\", [\"background\", \"button\", \"zoom\"]);\n        rule.setAll({\n          cornerRadiusBL: 40,\n          cornerRadiusBR: 40,\n          cornerRadiusTL: 40,\n          cornerRadiusTR: 40\n        });\n        setColor(rule, \"fill\", ic, \"primaryButton\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"background\", \"button\", \"zoom\"]).states.create(\"hover\", {});\n        setColor(rule, \"fill\", ic, \"primaryButtonHover\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"background\", \"button\", \"zoom\"]).states.create(\"down\", {\n          stateAnimationDuration: 0\n        });\n        setColor(rule, \"fill\", ic, \"primaryButtonDown\");\n      }\n      {\n        var rule = r(\"Graphics\", [\"icon\", \"button\", \"zoom\"]);\n        rule.setAll({\n          strokeOpacity: 0.7,\n          draw: function (display) {\n            display.moveTo(0, 0);\n            display.lineTo(12, 0);\n          }\n        });\n        setColor(rule, \"stroke\", ic, \"primaryButtonText\");\n      }\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: ResizeButton\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Button\", [\"resize\"]).setAll({\n        paddingTop: 9,\n        paddingBottom: 9,\n        paddingLeft: 13,\n        paddingRight: 13,\n        draggable: true,\n        centerX: p50,\n        centerY: p50,\n        position: \"absolute\",\n        role: \"slider\",\n        ariaValueMin: \"0\",\n        ariaValueMax: \"100\",\n        ariaLabel: language.translate(\"Use up and down arrows to move selection\")\n      });\n      {\n        var rule = r(\"RoundedRectangle\", [\"background\", \"resize\", \"button\"]);\n        rule.setAll({\n          cornerRadiusBL: 40,\n          cornerRadiusBR: 40,\n          cornerRadiusTL: 40,\n          cornerRadiusTR: 40\n        });\n        setColor(rule, \"fill\", ic, \"secondaryButton\");\n        setColor(rule, \"stroke\", ic, \"secondaryButtonStroke\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"background\", \"resize\", \"button\"]).states.create(\"hover\", {});\n        setColor(rule, \"fill\", ic, \"secondaryButtonHover\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"background\", \"resize\", \"button\"]).states.create(\"down\", {\n          stateAnimationDuration: 0\n        });\n        setColor(rule, \"fill\", ic, \"secondaryButtonDown\");\n      }\n      {\n        var rule = r(\"Graphics\", [\"resize\", \"button\", \"icon\"]);\n        rule.setAll({\n          strokeOpacity: 0.7,\n          draw: function (display) {\n            display.moveTo(0, 0);\n            display.lineTo(0, 12);\n            display.moveTo(4, 0);\n            display.lineTo(4, 12);\n          }\n        });\n        setColor(rule, \"stroke\", ic, \"secondaryButtonText\");\n      }\n      r(\"Button\", [\"resize\", \"vertical\"]).setAll({\n        rotation: 90,\n        cursorOverStyle: \"ns-resize\"\n      });\n      r(\"Button\", [\"resize\", \"horizontal\"]).setAll({\n        cursorOverStyle: \"ew-resize\"\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: PlayButton\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Button\", [\"play\"]).setAll({\n        paddingTop: 13,\n        paddingBottom: 13,\n        paddingLeft: 14,\n        paddingRight: 14,\n        ariaLabel: language.translate(\"Play\"),\n        toggleKey: \"active\"\n      });\n      {\n        var rule = r(\"RoundedRectangle\", [\"play\", \"background\"]);\n        rule.setAll({\n          strokeOpacity: 0.5,\n          cornerRadiusBL: 100,\n          cornerRadiusBR: 100,\n          cornerRadiusTL: 100,\n          cornerRadiusTR: 100\n        });\n        setColor(rule, \"fill\", ic, \"primaryButton\");\n      }\n      {\n        var rule = r(\"Graphics\", [\"play\", \"icon\"]);\n        rule.setAll({\n          stateAnimationDuration: 0,\n          dx: 1,\n          draw: function (display) {\n            display.moveTo(0, -5);\n            display.lineTo(8, 0);\n            display.lineTo(0, 5);\n            display.lineTo(0, -5);\n          }\n        });\n        setColor(rule, \"fill\", ic, \"primaryButtonText\");\n      }\n      r(\"Graphics\", [\"play\", \"icon\"]).states.create(\"default\", {\n        stateAnimationDuration: 0\n      });\n      r(\"Graphics\", [\"play\", \"icon\"]).states.create(\"active\", {\n        stateAnimationDuration: 0,\n        draw: function (display) {\n          display.moveTo(-4, -5);\n          display.lineTo(-1, -5);\n          display.lineTo(-1, 5);\n          display.lineTo(-4, 5);\n          display.lineTo(-4, -5);\n          display.moveTo(4, -5);\n          display.lineTo(1, -5);\n          display.lineTo(1, 5);\n          display.lineTo(4, 5);\n          display.lineTo(4, -5);\n        }\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: SwitchButton\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Button\", [\"switch\"]).setAll({\n        paddingTop: 4,\n        paddingBottom: 4,\n        paddingLeft: 4,\n        paddingRight: 4,\n        ariaLabel: language.translate(\"Press ENTER to toggle\"),\n        toggleKey: \"active\",\n        width: 40,\n        height: 24,\n        layout: null\n      });\n      {\n        var rule = r(\"RoundedRectangle\", [\"switch\", \"background\"]);\n        rule.setAll({\n          strokeOpacity: 0.5,\n          cornerRadiusBL: 100,\n          cornerRadiusBR: 100,\n          cornerRadiusTL: 100,\n          cornerRadiusTR: 100\n        });\n        setColor(rule, \"fill\", ic, \"primaryButton\");\n      }\n      {\n        var rule = r(\"Circle\", [\"switch\", \"icon\"]);\n        rule.setAll({\n          radius: 8,\n          centerY: 0,\n          centerX: 0,\n          dx: 0\n        });\n        setColor(rule, \"fill\", ic, \"primaryButtonText\");\n      }\n      r(\"Graphics\", [\"switch\", \"icon\"]).states.create(\"active\", {\n        dx: 16\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * core: Scrollbar\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Scrollbar\").setAll({\n        start: 0,\n        end: 1,\n        layer: 30,\n        animationEasing: $ease.out($ease.cubic)\n      });\n      r(\"Scrollbar\", [\"vertical\"]).setAll({\n        marginRight: 13,\n        marginLeft: 13,\n        minWidth: 12,\n        height: p100\n      });\n      r(\"Scrollbar\", [\"horizontal\"]).setAll({\n        marginTop: 13,\n        marginBottom: 13,\n        minHeight: 12,\n        width: p100\n      });\n      this.rule(\"Button\", [\"scrollbar\"]).setAll({\n        exportable: false\n      });\n      {\n        var rule = r(\"RoundedRectangle\", [\"scrollbar\", \"main\", \"background\"]);\n        rule.setAll({\n          cornerRadiusTL: 8,\n          cornerRadiusBL: 8,\n          cornerRadiusTR: 8,\n          cornerRadiusBR: 8,\n          fillOpacity: 0.8\n        });\n        setColor(rule, \"fill\", ic, \"fill\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"scrollbar\", \"thumb\"]);\n        rule.setAll({\n          role: \"slider\",\n          ariaLive: \"polite\",\n          position: \"absolute\",\n          draggable: true\n        });\n        setColor(rule, \"fill\", ic, \"secondaryButton\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"scrollbar\", \"thumb\"]).states.create(\"hover\", {});\n        setColor(rule, \"fill\", ic, \"secondaryButtonHover\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"scrollbar\", \"thumb\"]).states.create(\"down\", {\n          stateAnimationDuration: 0\n        });\n        setColor(rule, \"fill\", ic, \"secondaryButtonDown\");\n      }\n      r(\"RoundedRectangle\", [\"scrollbar\", \"thumb\", \"vertical\"]).setAll({\n        x: p50,\n        width: p100,\n        centerX: p50,\n        ariaLabel: language.translate(\"Use up and down arrows to move selection\")\n      });\n      r(\"RoundedRectangle\", [\"scrollbar\", \"thumb\", \"horizontal\"]).setAll({\n        y: p50,\n        centerY: p50,\n        height: p100,\n        ariaLabel: language.translate(\"Use left and right arrows to move selection\")\n      }); // @todo: is this needed? used to be \"ContentScrollbar\"\n      // r(\"Scrollbar\", [\"content?\"]).setAll({\n      // \tmarginRight: 0,\n      // \tmarginLeft: 5,\n      // \tlayer: 5\n      // });\n\n      /**\r\n       * ========================================================================\r\n       * charts/xy\r\n       * ========================================================================\r\n       *\r\n       * This needs to be in DefaultTheme because it's the only theme that is\r\n       * automatically applied to Root, and tooltips different ancestors\r\n       * than actual charts using them.\r\n       */\n\n      {\n        var rule = r(\"PointedRectangle\", [\"axis\", \"tooltip\", \"background\"]);\n        rule.setAll({\n          cornerRadius: 0\n        });\n        setColor(rule, \"fill\", ic, \"alternativeBackground\");\n      }\n      r(\"Label\", [\"axis\", \"tooltip\"]).setAll({\n        role: undefined\n      });\n      r(\"Label\", [\"axis\", \"tooltip\", \"y\"]).setAll({\n        textAlign: \"right\"\n      });\n      r(\"Label\", [\"axis\", \"tooltip\", \"y\", \"opposite\"]).setAll({\n        textAlign: \"left\"\n      });\n      r(\"Label\", [\"axis\", \"tooltip\", \"x\"]).setAll({\n        textAlign: \"center\"\n      });\n      r(\"Tooltip\", [\"categoryaxis\"]).setAll({\n        labelText: \"{category}\"\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * Shapes\r\n       * ------------------------------------------------------------------------\r\n       */\n      // Class: Graphics\n\n      r(\"Star\").setAll({\n        spikes: 5,\n        innerRadius: 5,\n        radius: 10\n      }); // STOCK\n\n      r(\"Tooltip\", [\"stock\"]).setAll({\n        paddingTop: 6,\n        paddingBottom: 5,\n        paddingLeft: 7,\n        paddingRight: 7\n      });\n      r(\"PointedRectangle\", [\"tooltip\", \"stock\", \"axis\"]).setAll({\n        pointerLength: 0,\n        pointerBaseWidth: 0,\n        cornerRadius: 3\n      });\n      r(\"Label\", [\"tooltip\", \"stock\"]).setAll({\n        fontSize: \"0.8em\"\n      }); // resizer\n\n      r(\"SpriteResizer\").setAll({\n        rotationStep: 10\n      });\n      {\n        var rule = r(\"Container\", [\"resizer\", \"grip\"]);\n        rule.states.create(\"hover\", {});\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"resizer\", \"grip\"]);\n        rule.setAll({\n          strokeOpacity: 0.7,\n          strokeWidth: 1,\n          fillOpacity: 1,\n          width: 12,\n          height: 12\n        });\n        setColor(rule, \"fill\", ic, \"background\");\n        setColor(rule, \"stroke\", ic, \"alternativeBackground\");\n      }\n      {\n        var rule = r(\"RoundedRectangle\", [\"resizer\", \"grip\", \"outline\"]);\n        rule.setAll({\n          strokeOpacity: 0,\n          fillOpacity: 0,\n          width: 20,\n          height: 20\n        });\n        rule.states.create(\"hover\", {\n          fillOpacity: 0.3\n        });\n        setColor(rule, \"fill\", ic, \"alternativeBackground\");\n      }\n      r(\"RoundedRectangle\", [\"resizer\", \"grip\", \"left\"]).setAll({\n        cornerRadiusBL: 0,\n        cornerRadiusBR: 0,\n        cornerRadiusTL: 0,\n        cornerRadiusTR: 0\n      });\n      r(\"RoundedRectangle\", [\"resizer\", \"grip\", \"right\"]).setAll({\n        cornerRadiusBL: 0,\n        cornerRadiusBR: 0,\n        cornerRadiusTL: 0,\n        cornerRadiusTR: 0\n      });\n      {\n        var rule = r(\"Rectangle\", [\"resizer\", \"rectangle\"]);\n        rule.setAll({\n          strokeDasharray: [2, 2],\n          strokeOpacity: 0.5,\n          strokeWidth: 1\n        });\n        setColor(rule, \"stroke\", ic, \"alternativeBackground\");\n      }\n    }\n  });\n  return DefaultTheme;\n}(Theme);\n\nexport { DefaultTheme }; //# sourceMappingURL=DefaultTheme.js.map","map":null,"metadata":{},"sourceType":"module"}