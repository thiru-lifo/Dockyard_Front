{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport * as $type from \"../util/Type\";\n/**\r\n * Displays an image.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\r\n * @important\r\n */\n\nvar Picture =\n/** @class */\nfunction (_super) {\n  __extends(Picture, _super);\n\n  function Picture() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makePicture(undefined)\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Picture.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"width\")) {\n        var width = this.get(\"width\");\n        this._display.width = $type.isNumber(width) ? width : undefined;\n      }\n\n      if (this.isDirty(\"height\")) {\n        var height = this.get(\"height\");\n        this._display.height = $type.isNumber(height) ? height : undefined;\n      }\n\n      if (this.isDirty(\"shadowColor\")) {\n        this._display.clear();\n\n        var shadowColor = this.get(\"shadowColor\");\n        this._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n      }\n\n      if (this.isDirty(\"shadowBlur\")) {\n        this._display.clear();\n\n        this._display.shadowBlur = this.get(\"shadowBlur\");\n      }\n\n      if (this.isDirty(\"shadowOffsetX\")) {\n        this._display.clear();\n\n        this._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n      }\n\n      if (this.isDirty(\"shadowOffsetY\")) {\n        this._display.clear();\n\n        this._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n      }\n\n      if (this.isDirty(\"shadowOpacity\")) {\n        this._display.clear();\n\n        this._display.shadowOpacity = this.get(\"shadowOpacity\");\n      }\n\n      if (this.isDirty(\"src\")) {\n        this._display.clear();\n\n        this._load();\n      }\n    }\n  });\n  Object.defineProperty(Picture.prototype, \"_load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var src = this.get(\"src\");\n\n      if (src) {\n        var image_1 = new Image(); //image.crossOrigin = \"Anonymous\";\n\n        image_1.src = src;\n        image_1.decode().then(function () {\n          _this._display.image = image_1;\n\n          _this._updateSize();\n        }).catch(function (_error) {// TODO: maybe raise error?\n        });\n      }\n    }\n  });\n  Object.defineProperty(Picture.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateSize.call(this);\n\n      var image = this._display.image;\n\n      if (image) {\n        var w = this.getPrivate(\"width\", this.get(\"width\"));\n        var h = this.getPrivate(\"height\", this.get(\"height\"));\n        var r = image.width && image.height ? image.width / image.height : 0;\n\n        if ($type.isNumber(w) && $type.isNumber(h)) {\n          this._display.width = w;\n          this._display.height = h;\n        } else if ($type.isNumber(w) && r) {\n          h = w / r;\n        } else if ($type.isNumber(h) && r) {\n          w = h * r;\n        } else {\n          w = image.width;\n          h = image.height;\n        }\n\n        if ($type.isNumber(w)) {\n          this._display.width = w;\n        }\n\n        if ($type.isNumber(h)) {\n          this._display.height = h;\n        }\n\n        this.markDirtyBounds();\n        this.markDirty();\n      }\n    }\n  });\n  Object.defineProperty(Picture, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Picture\"\n  });\n  Object.defineProperty(Picture, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Picture.className])\n  });\n  return Picture;\n}(Sprite);\n\nexport { Picture }; //# sourceMappingURL=Picture.js.map","map":null,"metadata":{},"sourceType":"module"}