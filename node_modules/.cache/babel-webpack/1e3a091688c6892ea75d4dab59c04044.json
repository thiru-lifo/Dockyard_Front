{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Container } from \"./Container\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { RoundedRectangle } from \"./RoundedRectangle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { color } from \"../util/Color\";\nimport * as $math from \"../util/Math\";\n\nvar SpriteResizer =\n/** @class */\nfunction (_super) {\n  __extends(SpriteResizer, _super);\n\n  function SpriteResizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"rectangle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Rectangle.new(_this._root, {\n        themeTags: [\"rectangle\"],\n        fillOpacity: 0,\n        fill: color(0xFFFFFF)\n      }))\n    });\n    Object.defineProperty(_this, \"gripL\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"left\")\n    });\n    Object.defineProperty(_this, \"gripR\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"right\")\n    });\n    Object.defineProperty(_this, \"gripT\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"top\")\n    });\n    Object.defineProperty(_this, \"gripB\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"bottom\")\n    });\n    Object.defineProperty(_this, \"_is\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_iw\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_positionDP\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_isHover\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(SpriteResizer.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this.addTag(\"resizer\");\n      this.set(\"visible\", false);\n      this.gripL.events.on(\"dragged\", function (e) {\n        _this._resize(e.target, -1);\n      });\n      this.gripR.events.on(\"dragged\", function (e) {\n        _this._resize(e.target, 1);\n      });\n      this.gripL.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n      this.gripR.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n      this.gripT.events.on(\"dragged\", function (e) {\n        _this._rotate(e, 90);\n      });\n      this.gripB.events.on(\"dragged\", function (e) {\n        _this._rotate(e, -90);\n      });\n      this.gripT.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n      this.gripB.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_resizeStart\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (grip) {\n      var sprite = this.get(\"sprite\");\n\n      if (sprite) {\n        this._is = sprite.get(\"scale\", 1);\n        this._ix = grip.x();\n        this._iw = this.width() / 2;\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_resize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (grip, c) {\n      var sprite = this.get(\"sprite\");\n      var spriteTemplate = this.get(\"spriteTemplate\");\n\n      if (sprite) {\n        var scale = Math.max(0.01, this._is * (1 + c * (grip.x() - this._ix) / this._iw));\n\n        if (spriteTemplate) {\n          spriteTemplate.set(\"scale\", scale);\n        } else {\n          sprite.set(\"scale\", scale);\n        }\n\n        sprite.states.lookup(\"default\").set(\"scale\", scale);\n\n        this._updatePositions();\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_rotate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (e, delta) {\n      var sprite = this.get(\"sprite\");\n      var spriteTemplate = this.get(\"spriteTemplate\");\n\n      if (sprite) {\n        var parent_1 = this.parent;\n\n        if (parent_1) {\n          var rotationStep = this.get(\"rotationStep\", 10);\n          var angle = Math.round(($math.getAngle({\n            x: this.x(),\n            y: this.y()\n          }, parent_1.toLocal(e.point)) + delta) / rotationStep) * rotationStep;\n\n          if (spriteTemplate) {\n            spriteTemplate.set(\"rotation\", angle);\n          } else {\n            sprite.set(\"rotation\", angle);\n          }\n\n          sprite.states.lookup(\"default\").set(\"rotation\", angle);\n\n          this._updatePositions();\n        }\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_createGrip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeTag) {\n      var container = this.children.push(Container.new(this._root, {\n        themeTags: [\"grip\", themeTag],\n        setStateOnChildren: true,\n        draggable: true\n      }));\n      container.children.push(RoundedRectangle.new(this._root, {\n        themeTags: [\"outline\"],\n        centerX: p50,\n        centerY: p50\n      }));\n      container.children.push(RoundedRectangle.new(this._root, {\n        centerX: p50,\n        centerY: p50\n      }));\n      return container;\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._updateChildren.call(this);\n\n      if (this.isDirty(\"sprite\")) {\n        var sprite = this.get(\"sprite\");\n\n        if (sprite) {\n          this.show(0);\n          this.setPrivate(\"visible\", true);\n\n          this._updatePositions();\n\n          var parent_2 = sprite.parent;\n\n          if (parent_2) {\n            parent_2.children.moveValue(this, 0);\n          }\n\n          this._positionDP = sprite.events.on(\"positionchanged\", function () {\n            _this._updatePositions();\n          });\n        } else {\n          this.hide(0);\n          this.setPrivate(\"visible\", false);\n\n          if (this._positionDP) {\n            this._positionDP.dispose();\n          }\n        }\n      }\n\n      if (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\")) {\n        this._updatePositions();\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_updatePositions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var sprite = this.get(\"sprite\");\n\n      if (sprite) {\n        var bounds = sprite.localBounds();\n        var scale = sprite.get(\"scale\", 1);\n        var d = 20;\n        var w = (bounds.right - bounds.left) * scale + d;\n        var h = (bounds.bottom - bounds.top) * scale + d;\n        var a = sprite.get(\"rotation\", 0);\n        var rectangle = this.rectangle;\n        var cx = sprite.get(\"centerX\", p50);\n        var cy = sprite.get(\"centerY\", p50);\n        var cxr = 0;\n\n        if (cx instanceof Percent) {\n          cxr = cx.value;\n        }\n\n        var cyr = 0;\n\n        if (cy instanceof Percent) {\n          cyr = cy.value;\n        }\n\n        rectangle.setAll({\n          centerX: cx,\n          centerY: cy,\n          width: w,\n          height: h\n        });\n        this.setAll({\n          x: sprite.x() + d * (cxr - 0.5) * $math.cos(a) - d * (cyr - 0.5) * $math.sin(a),\n          y: sprite.y() + d * (cyr - 0.5) * $math.cos(a) + d * (cxr - 0.5) * $math.sin(a),\n          width: w,\n          height: h,\n          rotation: a\n        });\n        this.gripT.setAll({\n          x: (0.5 - cxr) * w,\n          y: -cyr * h\n        });\n        this.gripB.setAll({\n          x: (0.5 - cxr) * w,\n          y: (1 - cyr) * h\n        });\n        this.gripL.setAll({\n          x: -cxr * w,\n          y: (0.5 - cyr) * h\n        });\n        this.gripR.setAll({\n          x: (1 - cxr) * w,\n          y: (0.5 - cyr) * h\n        });\n        this.rectangle.setAll({\n          width: w,\n          height: h\n        });\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SpriteResizer\"\n  });\n  Object.defineProperty(SpriteResizer, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([SpriteResizer.className])\n  });\n  return SpriteResizer;\n}(Container);\n\nexport { SpriteResizer }; //# sourceMappingURL=SpriteResizer.js.map","map":null,"metadata":{},"sourceType":"module"}