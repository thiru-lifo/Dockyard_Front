{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"../../util/Entity\";\n/**\r\n * Base class for patterns.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar Pattern =\n/** @class */\nfunction (_super) {\n  __extends(Pattern, _super);\n\n  function Pattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_backgroundDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_pattern\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Pattern.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Applying themes because pattern will not have parent\n      _super.prototype._afterNewApplyThemes.call(this);\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"pattern\", {\n    get: function () {\n      return this._pattern;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(Pattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var repetition = this.get(\"repetition\", \"\");\n        var width = this.get(\"width\", 100);\n        var height = this.get(\"height\", 100);\n        var fill = this.get(\"fill\");\n        var fillOpacity = this.get(\"fillOpacity\", 1);\n\n        this._display.clear();\n\n        this._backgroundDisplay.clear();\n\n        if (fill && fillOpacity > 0) {\n          this._backgroundDisplay.beginFill(fill, fillOpacity);\n\n          this._backgroundDisplay.drawRect(0, 0, width, height);\n\n          this._backgroundDisplay.endFill();\n        }\n\n        this._display.angle = this.get(\"rotation\", 0); //this._display.pivot = { x: width / 2, y: height / 2 };\n\n        this._draw();\n\n        this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n      }\n    }\n  });\n  Object.defineProperty(Pattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Pattern\"\n  });\n  Object.defineProperty(Pattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([Pattern.className])\n  });\n  return Pattern;\n}(Entity);\n\nexport { Pattern }; //# sourceMappingURL=Pattern.js.map","map":null,"metadata":{},"sourceType":"module"}