{"ast":null,"code":"import { __extends, __read, __spreadArray } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport * as $array from \"./Array\";\nimport en from \"../../../locales/en\";\n;\n\nvar Language =\n/** @class */\nfunction (_super) {\n  __extends(Language, _super);\n\n  function Language() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Language.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.setPrivate(\"defaultLocale\", en);\n\n      _super.prototype._setDefaults.call(this);\n    }\n  });\n  Object.defineProperty(Language.prototype, \"translate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (prompt, locale) {\n      var rest = [];\n\n      for (var _i = 2; _i < arguments.length; _i++) {\n        rest[_i - 2] = arguments[_i];\n      } // Get langauge\n\n\n      if (!locale) {\n        locale = this._root.locale || this.getPrivate(\"defaultLocale\");\n      } // Init translation\n\n\n      var translation = prompt;\n      var value = locale[prompt]; // Try to look for the translation\n\n      if (value === null) {\n        translation = \"\";\n      } else if (value != null) {\n        // It might be an empty string\n        if (value) {\n          translation = value;\n        }\n      } else if (locale !== this.getPrivate(\"defaultLocale\")) {\n        // Try to look in default language\n        return this.translate.apply(this, __spreadArray([prompt, this.getPrivate(\"defaultLocale\")], __read(rest), false));\n      } // Replace %1, %2, etc params\n\n\n      if (rest.length) {\n        for (var len = rest.length, i = 0; i < len; ++i) {\n          translation = translation.split(\"%\" + (i + 1)).join(rest[i]);\n        }\n      } // Return the translation\n\n\n      return translation;\n    }\n  });\n  Object.defineProperty(Language.prototype, \"translateAny\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (prompt, locale) {\n      var rest = [];\n\n      for (var _i = 2; _i < arguments.length; _i++) {\n        rest[_i - 2] = arguments[_i];\n      }\n\n      return this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));\n    }\n  });\n  Object.defineProperty(Language.prototype, \"setTranslationAny\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (prompt, translation, locale) {\n      var localeTarget = locale || this._root.locale;\n      localeTarget[prompt] = translation;\n    }\n  });\n  Object.defineProperty(Language.prototype, \"translateEmpty\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (prompt, locale) {\n      var rest = [];\n\n      for (var _i = 2; _i < arguments.length; _i++) {\n        rest[_i - 2] = arguments[_i];\n      }\n\n      var translation = this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));\n      return translation == prompt ? \"\" : translation;\n    }\n  });\n  Object.defineProperty(Language.prototype, \"translateFunc\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (prompt, locale) {\n      if (this._root.locale[prompt]) {\n        return this._root.locale[prompt];\n      } // Try to look in default language\n\n\n      if (locale !== this.getPrivate(\"defaultLocale\")) {\n        return this.translateFunc(prompt, this.getPrivate(\"defaultLocale\"));\n      } // Fail - return empty function\n\n\n      return function () {\n        return \"\";\n      };\n    }\n  });\n  Object.defineProperty(Language.prototype, \"translateAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (list, locale) {\n      var _this = this; // Translate all items in the list\n\n\n      if (!this.isDefault()) {\n        return $array.map(list, function (x) {\n          return _this.translate(x, locale);\n        });\n      } else {\n        return list;\n      }\n    }\n  });\n  /**\r\n   * Returns `true` if the currently selected locale is a default locale.\r\n   *\r\n   * @return `true` if locale is default; `false` if it is not.\r\n   */\n\n  Object.defineProperty(Language.prototype, \"isDefault\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.getPrivate(\"defaultLocale\") === this._root.locale;\n    }\n  });\n  return Language;\n}(Entity);\n\nexport { Language }; //# sourceMappingURL=Language.js.map","map":null,"metadata":{},"sourceType":"module"}